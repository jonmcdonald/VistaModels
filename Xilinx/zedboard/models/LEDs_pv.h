
/**************************************************************/
/*                                                            */
/*      Copyright Mentor Graphics Corporation 2006 - 2012     */
/*                  All Rights Reserved                       */
/*                                                            */
/*       THIS WORK CONTAINS TRADE SECRET AND PROPRIETARY      */
/*         INFORMATION WHICH IS THE PROPERTY OF MENTOR        */
/*         GRAPHICS CORPORATION OR ITS LICENSORS AND IS       */
/*                 SUBJECT TO LICENSE TERMS.                  */
/*                                                            */
/**************************************************************/

//*<
//* Generated By Model Builder, Mentor Graphics Computer Systems, Inc.
//*
//* This file contains the PV class for LEDs.
//* This is a template file: You may modify this file to implement the 
//* behavior of your component. 
//* 
//* Model Builder version: 4.1beta1
//* Generated on: Mar. 09, 2015 12:01:13 PM, (user: markca)
//* Automatically merged on: May. 22, 2015 01:34:03 PM, (user: markca)
//* Automatically merged on: May. 29, 2015 03:23:07 PM, (user: markca)
//*>


#pragma once

#include "LEDs_model.h"

using namespace tlm;

//This class inherits from the LEDs_pv_base class
class LEDs_pv : public LEDs_pv_base {
 public:
  typedef esl::tlm_types::Address mb_address_type;
 public:
  // Constructor
  // Do not add parameters here.
  // To add parameters - use the Model Builder form (under PV->Parameters tab)
  SC_HAS_PROCESS(LEDs_pv);
  LEDs_pv(sc_core::sc_module_name module_name);   

  void drawPixel(int x0, int y0);
  void horizontalLine(int x1, int y, int x2);
  void plot4points(int cx, int cy, int x, int y);
  void drawFilledCircle(int cx, int cy, int radius);
  void drawCircle(int x0, int y0, int radius);
  void clearDisplay();

 protected:
  ////////////////////////////////////////
  // target ports read callbacks
  //////////////////////////////////////// 
  bool slave_callback_read(mb_address_type address, unsigned char* data, unsigned size);
  
  unsigned slave_callback_read_dbg(mb_address_type address, unsigned char* data, unsigned size); 

 protected:
  ////////////////////////////////////////
  // target ports write callbacks
  //////////////////////////////////////// 
  bool slave_callback_write(mb_address_type address, unsigned char* data, unsigned size);
  
  unsigned slave_callback_write_dbg(mb_address_type address, unsigned char* data, unsigned size);  
  bool slave_get_direct_memory_ptr(mb_address_type address, tlm::tlm_dmi& dmiData);   

private:
  ::mb::physical_io::sdl_client* m_client;
};

