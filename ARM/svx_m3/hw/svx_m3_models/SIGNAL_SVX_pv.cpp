
/**************************************************************/
/*                                                            */
/*      Copyright Mentor Graphics Corporation 2006 - 2015     */
/*                  All Rights Reserved                       */
/*                                                            */
/*       THIS WORK CONTAINS TRADE SECRET AND PROPRIETARY      */
/*         INFORMATION WHICH IS THE PROPERTY OF MENTOR        */
/*         GRAPHICS CORPORATION OR ITS LICENSORS AND IS       */
/*                 SUBJECT TO LICENSE TERMS.                  */
/*                                                            */
/**************************************************************/

//*<
//* Generated By Model Builder, Mentor Graphics Computer Systems, Inc.
//*
//* This file contains the PV class for SIGNAL_SVX.
//* This is a template file: You may modify this file to implement the 
//* behavior of your component. 
//* 
//* Model Builder version: 4.2.1
//* Generated on: Nov. 18, 2016 03:22:15 PM, (user: markca)
//*>



#include "SIGNAL_SVX_pv.h"
#include <iostream>
#include <iomanip>

using namespace sc_core;
using namespace sc_dt;
using namespace std;

//constructor
SIGNAL_SVX_pv::SIGNAL_SVX_pv(sc_module_name module_name) 
  : SIGNAL_SVX_pv_base(module_name), dc(0), freq(0) {
}      

 

// callback for any change in signal: slave of type: sc_in<bool>
void SIGNAL_SVX_pv::slave_callback() {
  if(debug > 1) {
    cout<<name()<<" @ "<<sc_time_stamp()<< " : PIN_OUT = "<< (unsigned) slave << endl ;
  }
  pin_out.write((bool) slave);

  if(slave) {
    sc_time time_off = sc_time_stamp() - last_off;
    sc_time time_on = last_off - last_on;
    sc_time total = time_on + time_off;


    double newdc = (time_on.to_double() / total.to_double()) * 100;
    if(newdc != dc) {
      dc = newdc;
      duty_cycle.write(dc);

      freq = (uint32_t) ((sc_time_stamp().value() - last_on.value()) / 1000);
      frequency.write(freq);

      if(debug > 0) {
        std::cout << std::fixed;
        std::cout << std::setprecision(2);
        cout << name() << " @ "<<sc_time_stamp()<< " : DUTY CYCLE = " << dc << "% : ";  
        cout << "FREQUENCY = " << std::dec << freq << " NS" << endl;
      }
    }
    else {
      if(debug > 1) {
        std::cout << std::fixed;
        std::cout << std::setprecision(2);
        cout <<name()<<" @ "<<sc_time_stamp()<< " : DUTY CYCLE = " << dc << "% " << endl;  
        cout << "FREQUENCY = " << std::dec << freq << " NS" << endl;
      }
    }

    last_on = sc_time_stamp();
  }
  else {
    last_off = sc_time_stamp();
  }
}

// in order to minimize merging conflicts, we recommend to add your functions after this comment
