
/**************************************************************/
/*                                                            */
/*      Copyright Mentor Graphics Corporation 2006 - 2015     */
/*                  All Rights Reserved                       */
/*                                                            */
/*       THIS WORK CONTAINS TRADE SECRET AND PROPRIETARY      */
/*         INFORMATION WHICH IS THE PROPERTY OF MENTOR        */
/*         GRAPHICS CORPORATION OR ITS LICENSORS AND IS       */
/*                 SUBJECT TO LICENSE TERMS.                  */
/*                                                            */
/**************************************************************/

//*<
//* Generated By Model Builder, Mentor Graphics Computer Systems, Inc.
//*
//* This file contains the PV class for SIGNAL_SVX.
//* This is a template file: You may modify this file to implement the 
//* behavior of your component. 
//* 
//* Model Builder version: 4.2.1
//* Generated on: Nov. 18, 2016 03:22:15 PM, (user: markca)
//*>



#include "SIGNAL_SVX_pv.h"
#include <iostream>
#include <iomanip>

using namespace sc_core;
using namespace sc_dt;
using namespace std;

//constructor
SIGNAL_SVX_pv::SIGNAL_SVX_pv(sc_module_name module_name) 
  : SIGNAL_SVX_pv_base(module_name), cycle(false), dc(-1), freq(0) {
}      

bool double_equals(double a, double b, double epsilon = 0.001)
{
    return std::abs(a - b) < epsilon;
}

// callback for any change in signal: slave of type: sc_in<bool>
void SIGNAL_SVX_pv::slave_callback() {
  if(debug > 1) {
    cout<<name()<<" @ "<<sc_time_stamp()<< " : PIN_OUT = "<< (unsigned) slave << endl ;
  }
  pin_out.write((bool) slave);
  
  // Calculate duty cycle 
  // Calculate frequency, assumes signal is 0 at rollover of counter
  if(slave) {
    last_on = sc_time_stamp();
  }

  if(!slave) {
    if(cycle) {
      sc_time time_on = sc_time_stamp() - last_on;
      double newdc = (time_on.to_double() / freq_t.to_double()) * 100.0;
      if(! double_equals(newdc, dc)) {
        dc = newdc;
        duty_cycle.write(dc);
        cout << name() << " @ "<<sc_time_stamp()<< " : DUTY CYCLE = " << dc << "% " << endl;  
      }
    }

    freq_t = sc_time_stamp() - last_off;
    last_off = sc_time_stamp();
    uint32_t nf = (uint32_t) (freq_t.value() / 1000);
    if(freq != nf) {
      if(freq) {
        freq = nf;      
        frequency.write(freq);
        cout << name() << " @ "<<sc_time_stamp()<< " : FREQUENCY = " << freq_t << endl;  
        cycle = true;
      }
      else {
        freq = nf;      
      }
    }


  }
}

// in order to minimize merging conflicts, we recommend to add your functions after this comment
