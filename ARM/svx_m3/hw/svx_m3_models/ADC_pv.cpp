
/**************************************************************/
/*                                                            */
/*      Copyright Mentor Graphics Corporation 2006 - 2015     */
/*                  All Rights Reserved                       */
/*                                                            */
/*       THIS WORK CONTAINS TRADE SECRET AND PROPRIETARY      */
/*         INFORMATION WHICH IS THE PROPERTY OF MENTOR        */
/*         GRAPHICS CORPORATION OR ITS LICENSORS AND IS       */
/*                 SUBJECT TO LICENSE TERMS.                  */
/*                                                            */
/**************************************************************/

//*<
//* Generated By Model Builder, Mentor Graphics Computer Systems, Inc.
//*
//* This file contains the PV class for ADC.
//* This is a template file: You may modify this file to implement the 
//* behavior of your component. 
//* 
//* Model Builder version: 4.2.1
//* Generated on: Nov. 28, 2016 03:13:41 PM, (user: markca)
//*>



#include "ADC_pv.h"
#include <iostream>

using namespace sc_core;
using namespace sc_dt;
using namespace std;

//constructor
ADC_pv::ADC_pv(sc_module_name module_name) 
  : ADC_pv_base(module_name) {
  _lastVal = 0;
  SC_THREAD(thread);
}      

// Read callback for slave port.
// Returns true when successful.
bool ADC_pv::slave_callback_read(mb_address_type address, unsigned char* data, unsigned size) {
  
  return true;
}

// Write callback for slave port.
// Returns true when successful.
bool ADC_pv::slave_callback_write(mb_address_type address, unsigned char* data, unsigned size) {
  
  return true;
} 




unsigned ADC_pv::slave_callback_read_dbg(mb_address_type address, unsigned char* data, unsigned size) {
  return 0;
} 

unsigned ADC_pv::slave_callback_write_dbg(mb_address_type address, unsigned char* data, unsigned size) {
  return 0;
} 

bool ADC_pv::slave_get_direct_memory_ptr(mb_address_type address, tlm::tlm_dmi& dmiData) {
  return false;
}

// Write callback for CTL register.
// The newValue has been already assigned to the CTL register.
void ADC_pv::cb_write_CTL(unsigned int newValue) {
  irq->write(false);
}

void ADC_pv::cb_transport_dbg_CTL(tlm::tlm_generic_payload& trans) {}
   

// in order to minimize merging conflicts, we recommend to add your functions after this comment

void ADC_pv::thread ()
{	
  while(1)
    {
      wait(pin_in->value_changed_event());
      double   changed_val = (double)(  pin_in->read());
      if(changed_val != _lastVal) {
        _lastVal = changed_val;
        DATA = (uint32_t) (_lastVal * 100);
        irq.write(true);
      }
    }
}
