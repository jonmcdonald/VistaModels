
/**************************************************************/
/*                                                            */
/*      Copyright Mentor Graphics Corporation 2006 - 2012     */
/*                  All Rights Reserved                       */
/*                                                            */
/*       THIS WORK CONTAINS TRADE SECRET AND PROPRIETARY      */
/*         INFORMATION WHICH IS THE PROPERTY OF MENTOR        */
/*         GRAPHICS CORPORATION OR ITS LICENSORS AND IS       */
/*                 SUBJECT TO LICENSE TERMS.                  */
/*                                                            */
/**************************************************************/

//*<
//* Generated By Model Builder, Mentor Graphics Computer Systems, Inc.
//*
//* This file contains the PV class for LinuxFrameBufferDisplay.
//* This is a template file: You may modify this file to implement the 
//* behavior of your component. 
//* 
//* Model Builder version: 3.8.1RND2
//* Generated on: Jul. 30, 2014 11:26:19 AM, (user: markca)
//* Automatically merged on: Jul. 30, 2014 11:59:01 AM, (user: markca)
//* Automatically merged on: Jul. 30, 2014 12:54:26 PM, (user: markca)
//* Automatically merged on: Jul. 30, 2014 10:16:52 PM, (user: markca)
//*>


#pragma once

#include "LinuxFrameBufferDisplay_model.h"

#include <X11/Xatom.h>
#include <X11/Xlib.h>
#include <X11/Xutil.h>

#define MAX_CRTX 1200
#define MAX_CRTY 800
#define CHUNKX 32
#define CHUNKY 20

#define SCREEN_ZOOM 1			        /* default zoom size*/

using namespace tlm;

//This class inherits from the LinuxFrameBufferDisplay_pv_base class
class LinuxFrameBufferDisplay_pv : public LinuxFrameBufferDisplay_pv_base {
 public:
  typedef esl::tlm_types::Address mb_address_type;
 public:
  // Constructor
  // Do not add parameters here.
  // To add parameters - use the Model Builder form (under PV->Parameters tab)
  SC_HAS_PROCESS(LinuxFrameBufferDisplay_pv);
  LinuxFrameBufferDisplay_pv(sc_core::sc_module_name module_name);  
  
 protected:
  /////////////////////////////////////////
  // write callbacks of registers
  ////////////////////////////////////////// 
  void cb_write_SMEM_LEN(unsigned int newValue); 

  void grab_buffer();

 protected:
  ////////////////////////////////////////
  // target ports read callbacks
  //////////////////////////////////////// 
  bool from_bus_callback_read(mb_address_type address, unsigned char* data, unsigned size);
  
  unsigned from_bus_callback_read_dbg(mb_address_type address, unsigned char* data, unsigned size); 

 protected:
  ////////////////////////////////////////
  // target ports write callbacks
  //////////////////////////////////////// 
  bool from_bus_callback_write(mb_address_type address, unsigned char* data, unsigned size);
  
  unsigned from_bus_callback_write_dbg(mb_address_type address, unsigned char* data, unsigned size); 
  virtual void cb_transport_dbg_SMEM_LEN(tlm::tlm_generic_payload& trans); 
  bool from_bus_get_direct_memory_ptr(mb_address_type address, tlm::tlm_dmi& dmiData);   


private:
  static void* call_startX(void *arg) { return ((LinuxFrameBufferDisplay_pv*)arg)->startX(); }
  void X11_init(void);
  void X11_close(void);
  uint32_t calc_patch_crc(int ix, int iy);
  void check_and_paint(int ix, int iy);
  void *startX();

  pthread_t xThread;

  int crtx;	
  int crty;
  int bit_depth;
  int zoom;
  
  uint32_t *crtbuf;

  pthread_mutex_t refresh_mutex;
  bool refresh;

  pthread_mutex_t change_mutex;	
  bool change;
  
  Display *display;
  GC gc;
  Window window, root, parent;
  int depth, screen, visibility;
  int repaint;
  Pixmap pixmap;
  
  uint32_t crcs[MAX_CRTX / CHUNKX][MAX_CRTY / CHUNKY];
};

