
/**************************************************************/
/*                                                            */
/*      Copyright Mentor Graphics Corporation 2006 - 2012     */
/*                  All Rights Reserved                       */
/*                                                            */
/*       THIS WORK CONTAINS TRADE SECRET AND PROPRIETARY      */
/*         INFORMATION WHICH IS THE PROPERTY OF MENTOR        */
/*         GRAPHICS CORPORATION OR ITS LICENSORS AND IS       */
/*                 SUBJECT TO LICENSE TERMS.                  */
/*                                                            */
/**************************************************************/

//*<
//* Generated By Model Builder, Mentor Graphics Computer Systems, Inc.
//*
//* This file contains the PV class for CustomPeripheral.
//* This is a template file: You may modify this file to implement the 
//* behavior of your component. 
//* 
//* Model Builder version: 3.8.1RND2
//* Generated on: Aug. 04, 2014 05:30:23 PM, (user: markca)
//* Automatically merged on: Aug. 04, 2014 10:08:13 PM, (user: markca)
//*>


#pragma once

#include "CustomPeripheral_model.h"

#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <sys/types.h> 
#include <sys/socket.h>
#include <netinet/in.h>
#include <deque>

#ifdef __VISTA_OSCI23__
#include "thread_safe_event.h"
#endif

#include "DataType.h"

using namespace tlm;

//This class inherits from the CustomPeripheral_pv_base class
class CustomPeripheral_pv : public CustomPeripheral_pv_base {
 public:
  typedef esl::tlm_types::Address mb_address_type;
 public:
  // Constructor
  // Do not add parameters here.
  // To add parameters - use the Model Builder form (under PV->Parameters tab)
  SC_HAS_PROCESS(CustomPeripheral_pv);
  CustomPeripheral_pv(sc_core::sc_module_name module_name);  
  virtual ~CustomPeripheral_pv();

 protected:
  /////////////////////////////////////////
  // write callbacks of registers
  ////////////////////////////////////////// 
  void cb_write_SETUP(unsigned int newValue); 

  void input();		// SystemC process which waits for asynchronous input from external process
  void output();	// SystemC process which takes data from input and writes out through the tlm port

 private:
  // call_startReader is a wrapper function that allows a member function to be used as pthread argument.
  static void* call_startReader(void *arg) { return ((CustomPeripheral_pv*)arg)->startReader(); }
  void *startReader();	// C++ pthread which will fork and exec the external process then wait for input
                        // from the external process.  It will forward and call notify on safe_ev

  pthread_t readerThread;
  pthread_mutex_t mutex;	// Used to safely pass data from startReader to input processes.
  
#ifdef __VISTA_OSCI23__
  thread_safe_event safe_ev;	// Thread safe event used to notify from startReader to input processes.
#endif

  std::deque<DataType *> q;	// queue holding data passed from startReader to input processes
  tlm::tlm_fifo<DataType *> fifo;  // queue holding data passed from input to output processes
       
  pid_t child_pid;  // process id of the python script

  int sockfd, newsockfd, portno;
  socklen_t clilen;
  struct sockaddr_in serv_addr, cli_addr;

 protected:
  ////////////////////////////////////////
  // target ports read callbacks
  //////////////////////////////////////// 
  bool slave_callback_read(mb_address_type address, unsigned char* data, unsigned size);
  
  unsigned slave_callback_read_dbg(mb_address_type address, unsigned char* data, unsigned size); 

 protected:
  ////////////////////////////////////////
  // target ports write callbacks
  //////////////////////////////////////// 
  bool slave_callback_write(mb_address_type address, unsigned char* data, unsigned size);
  
  unsigned slave_callback_write_dbg(mb_address_type address, unsigned char* data, unsigned size); 
  virtual void cb_transport_dbg_SETUP(tlm::tlm_generic_payload& trans); 
  bool slave_get_direct_memory_ptr(mb_address_type address, tlm::tlm_dmi& dmiData);   
};

