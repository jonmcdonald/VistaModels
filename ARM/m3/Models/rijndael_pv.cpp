
/**************************************************************/
/*                                                            */
/*      Copyright Mentor Graphics Corporation 2006 - 2012     */
/*                  All Rights Reserved                       */
/*                                                            */
/*       THIS WORK CONTAINS TRADE SECRET AND PROPRIETARY      */
/*         INFORMATION WHICH IS THE PROPERTY OF MENTOR        */
/*         GRAPHICS CORPORATION OR ITS LICENSORS AND IS       */
/*                 SUBJECT TO LICENSE TERMS.                  */
/*                                                            */
/**************************************************************/

//*<
//* Generated By Model Builder, Mentor Graphics Computer Systems, Inc.
//*
//* This file contains the PV class for rijndael.
//* This is a template file: You may modify this file to implement the 
//* behavior of your component. 
//* 
//* Model Builder version: 3.5.1
//* Generated on: Feb. 13, 2013 01:45:51 PM, (user: jon)
//*>



#include "rijndael_pv.h"
#include <iostream>

using namespace sc_core;
using namespace sc_dt;
using namespace std;

//constructor
rijndael_pv::rijndael_pv(sc_module_name module_name) 
  : rijndael_pv_base(module_name) {
  irq.initialize(false);
  SC_THREAD(thread);

  oRijndael.MakeKey("abcdefghabcdefgh", "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0", 16, 16);
} 

/////////////////////////////////////////////////////////////////////////////////
// Use these functions to define the behavior of your model when there is a 
// read event on one of the registers as defined in the Model Builder form.
// These functions are called before the read callbacks on the port.
///////////////////////////////////////////////////////////////////////////////// 

// Read callback for status register.
// The value that this function returns, will be returned to the initiator port that requested its value.
unsigned int rijndael_pv::cb_read_status() {
  
  return status;
}
 

// Read callback for clrIRQ register.
// The value that this function returns, will be returned to the initiator port that requested its value.
unsigned int rijndael_pv::cb_read_clrIRQ() {
  
  return clrIRQ;
}
  

/////////////////////////////////////////////////////////////////////////////////
// Use these functions to define the behavior of your model when there is a 
// write event on one of the registers as defined in the Model Builder form.
// These functions are called before the write callbacks on the port.
///////////////////////////////////////////////////////////////////////////////// 

// Write callback for status register.
// The newValue has been already assigned to the status register.
void rijndael_pv::cb_write_status(unsigned int newValue) {
  status_e.notify(SC_ZERO_TIME);  
}
 

// Write callback for clrIRQ register.
// The newValue has been already assigned to the clrIRQ register.
void rijndael_pv::cb_write_clrIRQ(unsigned int newValue) {
  irq.write(false);
}
  

// Read callback for s port.
// Returns true when successful.
bool rijndael_pv::s_callback_read(mb_address_type address, unsigned char* data, unsigned size) {
  
  return true;
}

// Write callback for s port.
// Returns true when successful.
bool rijndael_pv::s_callback_write(mb_address_type address, unsigned char* data, unsigned size) {
  
  return true;
} 




unsigned rijndael_pv::s_callback_read_dbg(mb_address_type address, unsigned char* data, unsigned size) {
  return 0;
} 

unsigned rijndael_pv::s_callback_write_dbg(mb_address_type address, unsigned char* data, unsigned size) {
  return 0;
} 

bool rijndael_pv::s_get_direct_memory_ptr(mb_address_type address, tlm::tlm_dmi& dmiData) {
  return false;
}

void rijndael_pv::thread() {
  char d[2048];
  char e[2048];
  char *I, *O, *T;

 while (1) {
  wait (status_e);
  
  if (status == 1 || status == 2) {
    m_read(Source, d, Size);
    oRijndael.ResetChain();
  }

  I = d;
  O = e;
  if (status == 1) {
    for (int i=0;i<51;i++) {
      oRijndael.Encrypt(I, O, 2048, oRijndael.ECB);
      T = I; I = O; O = T;
    }
  } else if (status == 2) {
    for (int i=0;i<51;i++) {
      oRijndael.Decrypt(I, O, 2048, oRijndael.ECB);
      T = I; I = O; O = T;
    }
  }
  
  if (status == 1 || status == 2) {
    m_write(Destination, d, Size);
    irq.write(true);
  }
 }
}
