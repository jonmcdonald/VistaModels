// Copyright 2005-2007 Mentor Graphics Corporation.  All rights reserved.
// 
WWHFrame.mLParatext["Vista_Users_Guide"] = new Array();
WWHFrame.mLParatext["Vista_Users_Guide"].push(["title1","<br>Vista User's Manual<br>Software Version 3.5 <br>November 2012 "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["man_loe1","<br>List of Examples<br> "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["man_lof1","<br>List of Figures<br> "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["man_lot1","<br>List of Tables<br> "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["introduction01","<br>SystemC Specifications<br>Type<br>Description "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["introduction02","<br>Vista Platform Elements<br>The main elements and features of Vista include:<br>Vista TLM2.0 Generic Model Library "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["introduction03","<br>SystemC Support<br>Vista provides a method for capturing and simulating SystemC designs, allowing you to create mode "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["introduction04","<br>TLM2.0 Socket Initiators and Targets<br>Vista also supports tlm sockets types socketInitiator and socketTarget, usin "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["introduction05","<br>Data Types Defined in the Vista Libraries<br>The following types have been defined in the SystemC specifications pre "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["introduction06","<br>Types Defined in Vista's STD_C Library<br>The following types are not specific to SystemC, but rather are C++ built- "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["introduction07","<br>Modeling<br>Vista's GUI-based modeling module offers a powerful, high-level platform that enables engineers and syst "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["introduction08","<br>Assembly<br>Vista provides a Block Diagram editor for schematic views of SystemC components within the design.<br>In "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["introduction09","<br>Analysis<br>During TLM simulation, a transaction-level database is automatically generated. All TLM database compone "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["introduction10","<br>Public-Domain Software<br>Mentor Graphics supplies a number of public domain software packages that are used by Vist "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["setup_invocation01","<br>Vista Environment Variables&#160;<br>Environment Variable<br>Description "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["setup_invocation02","<br>Installation<br>For details about installing Vista, see the Vista Installation Guide provided with this release at t "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["setup_invocation03","<br>Licensing<br>For license-related information specific to Vista, see the Vista Installation Guide.<br>For license-rel "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["setup_invocation04","<br>Building Vista Runtime for Various Simulators<br>You can create your own Vista package with your required SystemC ke "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["setup_invocation05","<br>Initialization and Project Files<br>An initialization (vista.ini) file is created in the working directory from whic "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["setup_invocation06","<br>Controlling Vista Behavior<br>You can control how Vista behaves in a number of ways:<br>You can set environment vari "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["setup_invocation07","<br>Environment Variables for Controlling Behavior<br>The table below details those Vista environment variables which yo "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["setup_invocation08","<br>Preventing Sourcing of .vistarc Files<br>To prevent Vista from sourcing the .vistarc file stored in Vista&#39;s inst "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["setup_invocation09","<br>Invoking Vista<br>Before invoking Vista, make sure that your license is active. For details, see the Installation Gu "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["setup_invocation10","<br>Vista Working Directory<br>Vista utilizes a specific directory designated as the Working Directory. It is here that  "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["setup_invocation11","<br>Troubleshooting<br>Vista provides two scripts that you can use for troubleshooting:<br>vista_run can be used to invo "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["vista_workplace_postbeta01","<br>File Menu Items&#160;<br> Item<br>Description "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["vista_workplace_postbeta02","<br>Introduction<br>The Mentor Graphics Corporation Vista 3.0 product is, to date, the only ESL tool providing a unified "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["vista_workplace_postbeta03","<br>Vista Main Window<br>The main Vista window contains three panels: <br>Browser "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["vista_workplace_postbeta04","<br>Libraries and Projects<br>Vista Project is a container which allows you to reference files associated with your desi "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["vista_workplace_postbeta05","<br>Vista Window<br>The Vista Window is divided into three main regions or panes:<br>The browser pane in the upper-left  "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["vista_workplace_postbeta06","<br>Browser Pane<br>The Vista Browser contains the Projects tab which displays all of your Vista Projects, and one or mo "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["vista_workplace_postbeta07","<br>Full View<br>Full View shows the inherent connection between the design and its class structure. It allows you to ex "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["vista_workplace_postbeta08","<br>Code View<br>In the Design view, if you select an object and click Code View, you see the code structure of the sele "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["vista_workplace_postbeta09","<br>Design View<br>The Design view visualizes the hardware structure of the design; for example, modules, processes, soc "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["vista_workplace_postbeta10","<br>Setting View Options in the Options Pane<br>While the different available views provide detailed information about t "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["vista_workplace_postbeta11","<br>Text Pane<br>Vista uses the XEmacs text editor (minimum version requirements: 21.4.15 on Linux/Unix). Clicking the T "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["vista_workplace_postbeta12","<br>Message Pane <br>The Message pane contains tabs for the Vista Console and the standard output during compilations.<b "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["vista_workplace_postbeta13","<br>Vista Console Tab<br>The Console tab displays:<br>Modeling-related messages (after Save, Save &amp; Generate or Add  "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["vista_workplace_postbeta14","<br>Compile Output Tab<br>This tab at the bottom of the main Vista window displays all messages related to the current s "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["vista_workplace_postbeta15","<br>Main Vista Menu Commands<br>Following is a description of the menu commands that are accessible during various stage "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["vista_workplace_postbeta16","<br>File Menu<br> "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["vista_workplace_postbeta17","<br>Edit Menu<br> "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["vista_workplace_postbeta18","<br>View Menu<br> "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["vista_workplace_postbeta19","<br>Project Menu<br> "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["vista_workplace_postbeta20","<br>Build Menu<br> "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["vista_workplace_postbeta21","<br>Modeling Menu<br>Tools Menu "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["vista_workplace_postbeta22","<br>Simulation Menu<br>The commands that become accessible during a simulation run are described in &quot;Simulation and "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["vista_workplace_postbeta23","<br>Breakpoints Menu<br>The commands that become accessible during a simulation run are described in &quot;Simulation an "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["vista_workplace_postbeta24","<br>Trace Menu<br>The commands that become accessible during a simulation run are described in &quot;Simulation and Veri "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["vista_workplace_postbeta25","<br>Watch Menu<br>The commands that become accessible during a simulation run are described in &quot;Simulation and Veri "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["vista_workplace_postbeta26","<br>Window Menu<br>The Window menu contains the commands listed below, as well as menu items for various windows represe "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["vista_workplace_postbeta27","<br>Help Menu<br> <br> "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["vista_workplace_postbeta28","<br>Right Mouse Button Menus<br>Depending on the context in which the mouse pointer is currently located and which type  "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["vista_workplace_postbeta29","<br>Tool Bars<br>The various icon bars appearing in the Vista environment are described below.<br>Project Design Tool Ba "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["vista_workplace_postbeta30","<br>Project Design Tool Bar<br>The tool bar displayed directly below the menu bar includes the following icons:<br>Desig "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["vista_workplace_postbeta31","<br>Simulation Tool Bar<br>During a simulation session, the Simulation tool bar, displayed beneath the Projects and simu "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["vista_workplace_postbeta32","<br>Browser Tool Bar<br>The small icon bar directly above the object tree displays the following icons.<br> "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["vista_workplace_postbeta33","<br>Text Editor Tool Bar<br>The Text Editor tool bar, directly above the text pane, contains icons for manipulating code "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["vista_workplace_postbeta34","<br>Vista Modeling Window<br>The Vista Modeling window is a modeling platform for engineers and system architects to eff "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["vista_workplace_postbeta35","<br>Block Diagram (Schematic) Editor Window<br>Schematics link the various parts of a design together. Essentially, a sc "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["vista_workplace_postbeta36","<br>Analysis Window<br>The Analysis Window enables you to analyze simulation data. For further information, see Analysis "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["projects01","<br>Vista Folders&#160;<br>Folder name<br>Files referenced by this folder "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["projects02","<br>Libraries <br>When Vista is first invoked, two libraries are displayed in the Vista browser: Generic Library and Pro "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["projects03","<br>Projects<br>Each element contained within a project is defined in the project file that has the project name as its  "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["projects04","<br>Project Settings<br>All definitions and settings made for a given project can be accessed by choosing the Project &g "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["projects05","<br>Project View in the Browser<br>One of the main advantages of Vista over any other SystemC design tools is its abilit "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["projects06","<br>Creating a New Project<br>To create a new project:<br>Choose the Project &gt; New Project command. "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["projects07","<br>Defining Project Folders<br>The Folders tab is used to define the folders that will be created for the project, and  "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["projects08","<br>Defining Project Files<br>The Files tab is used to populate the various folders defined for a project with files alr "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["projects09","<br>Defining Include Paths<br>Project settings can specify &ldquo;include paths&rdquo; to directories containing externa "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["projects10","<br>Setting Compilation-Related Options<br>Use the Compilation tab of the Project Settings dialog box to make the follow "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["projects11","<br>Defining Link Dependencies<br>A project may depend on several other projects, collectively referred to as its &ldquo "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["projects12","<br>Opening an Existing Project<br>To open an existing project:<br>Choose the File menu &gt; Open Project command.  "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["projects13","<br>Manipulating Libraries and Projects<br>For managing your design, Vista enables you to perform various editing operat "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["projects14","<br>Specifying the Top of the Design<br>In SystemC, the entry point for executing a design is the sc_main routine. There "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["projects15","<br>Generating the Designs Folder<br>When you initially create a project, prior to its first build, the project will not "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["projects16","<br>Creating a New sc_main<br>Vista allows you to automatically create an sc_main method template that can execute your  "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["projects17","<br>Adding a Clock to sc_main<br>To add a clock to an sc_main:<br>In the browser, select a specific sc_main to which the "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["projects18","<br>Instantiating Additional sc_modules in the sc_main<br>To instantiate additional sc_modules in a given sc_main:<br>In "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["projects19","<br>Graphical Design Assembly (Block Diagram) <br>You can also create a multi-level schematic of your design, instantiat "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["projects20","<br>Modifying a Project<br>Modifying a project can involve changing previously defined settings and/or adding elements t "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["projects21","<br>Changing Project Settings<br>To change any of the previously defined settings for project:<br>Choose the Project &gt "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["projects22","<br>Adding Elements to a Project<br>A number of different types of elements can be added to a project. These are describ "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["packages1","<br>Pre-Built Installation Packages&#160;<br>Package name<br>Description  "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["packages2","<br>Using Packages in Vista Projects<br>In order to use packages in your Vista projects, select the appropriate check bo "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["packages3","<br>Specifying Vista Packages at the vista_cc/vista_c++ Command Line<br>If, during compilation and linking, you want to  "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["packages4","<br>Package Description Format<br>A package description is defined by means of a Perl package that corresponds to the pa "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["packages5","<br>Pre-Built Packages Provided with Vista<br>Vista&#39;s installation contains the following pre-built packages: <br>Th "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["editing_source_files1","<br>Editing Source Files in Vista<br>Within its text editing pane, by default Vista uses the XEmacs text editor. H "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["editing_source_files2","<br>Using XEmacs in Vista<br>XEmacs Version Requirements<br>If your system already has XEmacs installed, note that, on L "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["editing_source_files3","<br>Displaying the XEmacs Menu Bar<br>XEmacs offers a standard tool bar that includes all commands and options which are "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["editing_source_files4","<br>Writing and Editing Source Files<br>Note that, within Vista, you can write and/or edit source file content regardles "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["editing_source_files5","<br>Customizing XEmacs Behavior<br>While Vista does not read the standard user initializations for XEmacs, you can never "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["editing_source_files6","<br>More Help with XEmacs <br>For detailed information on using XEmacs, see the XEmacs Help.<br> "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["editing_source_files7","<br>Specifying a Different Text Editor<br>Vista supports integrating your own preferred textual editor alongside XEmacs  "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Modeling_Phase01","<br>Vista's Modeling - Registers Tab Options &#160;<br>Field/Control<br>Description "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Modeling_Phase02","<br>Creating TLM Model Interfaces<br>The first step in the TLM modeling process is defining the model interface: i.e., t "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Modeling_Phase03","<br>Creating TLM Functionality (PV)<br>A functional (PV) model can be created by the user independent of timing and powe "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Modeling_Phase04","<br>Modeling TLM Timing/Power<br>With the Vista modeling capabilities, functionality is modeled by the user, while timin "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Modeling_Phase05","<br>Protocols at the TLM level<br>The model builder in Vista models the communication between the models through a gener "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Modeling_Phase06","<br>Protocol Channels and TLM2.0 Phases<br>In TLM2.0 each channel can be modeled by two phases that represent two timing "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Modeling_Phase07","<br>Supported Protocols in Vista<br>At the TLM level, standard protocols split between single channel and multi channels "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Modeling_Phase08","<br>Predefined Protocols<br>Vista comes with a number of pre-defined protocols. The protocols that are currently provide "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Modeling_Phase09","<br>Custom Protocols<br>In addition to the Predefined Protocols used in Vista, you can also write custom protocols. <br> "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Modeling_Phase10","<br>Custom TLM Protocol<br>You can create Protocols with channels. <br>A (hardware) channel links an initiator to a targ "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Modeling_Phase11","<br>Creating Models (Overview)<br>Model building in Vista entails creating TLM (Transaction-level) Models via an iterati "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Modeling_Phase12","<br>Defining a Model<br>Interface<br>For the task of defining an interface for a TLM model, all the ports used by the mo "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Modeling_Phase13","<br>Working with Tables<br>When using Vista's modeling tables (for example, Ports or Policies), keep in mind that:<br>Yo "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Modeling_Phase14","<br>Format for Legal Identifiers<br>Follow these rules for naming:<br>Identifiers should start with a letter (lowercase  "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Modeling_Phase15","<br>Ports<br>The first type of information to enter in defining the model interface is one or more ports and associated  "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Modeling_Phase16","<br>Defining Parameters, Registers and Memory<br>This stage involves listing Parameters, assigning Registers and definin "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Modeling_Phase17","<br>Parameters<br>This optional task involves specifying parameters to be used for internal model processing. Parameters "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Modeling_Phase18","<br>Registers<br>Registers are assigned to a specific address, and during simulation are set and read by other models us "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Modeling_Phase19","<br>FIFO Registers<br>FIFO (first-in, first out) registers are assigned to a specific address, and during simulation are "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Modeling_Phase20","<br>Memory Ranges<br>Memory ranges are set to define memory blocks.<br>Specifying Memory Ranges "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Modeling_Phase21","<br>Specifying PV Variables<br>PV variables that are defined here can be propagated to the timed model and viewed in ana "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Modeling_Phase22","<br>Functional Model (PV)<br>	After defining ports, registers, and parameters, users can automatically generate a PV mod "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Modeling_Phase23","<br>Functions for Master/Slave Ports and Registers<br>The model builder in Vista provides a convenience layer on top of  "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Modeling_Phase24","<br>Identifiers for Tracing and Analyzing Data Flow<br>The Vista model builder enables the user to understand how the da "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Modeling_Phase25","<br>PV Variables Propagated to T<br>Variables that can be read at actual (synchronized) time in the T model can be decla "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Modeling_Phase26","<br>Using External PV Models (TLM 2.0)<br>You can use external PV models, if the appropriate interface is based on stand "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Modeling_Phase27","<br>Generic Payload<br>Models built using Vista communicate with each other through TLM 2.0 Sockets and TLM 2.0 Generic  "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Modeling_Phase28","<br>Example of a Callback that uses Master Calls<br> "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Modeling_Phase29","<br>Modeling Timing and Power (T)<br>This key step in the modeling workflow, described in detail in the following sectio "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Modeling_Phase30","<br>Defining Timing and Power Policies (T)<br>Policies with simple values (expressions of literals, parameters, register "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Modeling_Phase31","<br>Timing and Power Policies<br>There are four types of timing and power policies that you can define in Vista:<br>Dela "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Modeling_Phase32","<br>Generating a Model using Policies<br>Refer to &quot;Generating a Model&quot; for instructions on generating a model  "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Modeling_Phase33","<br>Data-value-Dependent Timing/Power<br>The values of transmitted data can influence timing and power in several ways:< "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Modeling_Phase34","<br>Scalable Modeling Semantics<br>Mentor Graphics scalable TLM model approach is based on a clear separation between th "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Modeling_Phase35","<br>Functional (PV) Modeling Style<br>The behavior of the model is essentially the way it reacts to transactions coming  "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Modeling_Phase36","<br>Communication Channels<br>Callbacks and threads should communicate internally in the model by using only communicati "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Modeling_Phase37","<br>Functional Events<br>The functional code simulation run generates functional events. The functional events include t "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Modeling_Phase38","<br>Modeling Timing<br>Use policies to add timing and power to the functional code without changing it. Policies are con "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Modeling_Phase39","<br>Extracting Power from HDL Models<br>Vista provides a method for extracting power from HDL models and creating a powe "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Modeling_Phase40","<br>Using Vista Learning Power <br>Vista power modeling uses a state based power approach that maps power values to the  "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Modeling_Phase41","<br>Extracting Power &#151;  State Based Method<br>Pre-requisite<br>Prepare test benches for the HDL design (exhaustivel "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Modeling_Phase42","<br>Extracting Power &#151;  Toggle Rates Based Method<br>A signal toggle rate is closely connected with the power consu "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Modeling_Phase43","<br>Generating a Model<br>Both PV and PVT models can be generated using the specifications in the Generate tab, as descr "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Modeling_Phase44","<br>Configuring a Model from IP-XACT<br>Vista enables you to configure a predefined generic component with information e "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Modeling_Phase45","<br>Model Representation in the Vista Browser<br>Model interface and attributes (.mb) files are saved under the library  "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Modeling_Phase46","<br>Advanced Modeling Topics<br>Vista offers an additional modeling style in which users can create mixed PVT models whe "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Modeling_Phase47","<br>Transaction Callbacks and Scheduling Functions<br>For each port, whether master or slave, the following callback is  "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Modeling_Phase48","<br>Communication<br>The communication is implemented using TLM 2.0 ports of type tlm_nb_initiator_socket and tlm_nb_tar "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Modeling_Phase49","<br>Creating a Timing (T) Model<br>The Vista model builder enables the modeling of complex timing behavior in one of two "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Modeling_Phase50","<br>Setting DMI Mode for LT Simulation<br>You can set the DMI mode for both for QEMU and AFM models. <br>To enable DMI m "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Modeling_Phase51","<br>T Model Callbacks<br>The following T Model callbacks (similar to the ones used in the bus) can be used:<br>The esl:: "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Modeling_Phase52","<br>Add mb_event as a Communication Channel <br>You can use mb_event as a communication channel with policies for annota "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Modeling_Phase53","<br>Basic Modeling Object Enable and Disable State<br>Each modeling object (port, register, memory range, etc) has an en "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Modeling_Phase54","<br>Resetting Modeling Objects<br>Each modelling object can be reset using the following API function:<br>After calling  "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Modeling_Phase55","<br>Modeling Objects Aggregation<br>In order to aggregate various modeling objects into compounds, use the modeling obje "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Modeling_Phase56","<br>Power-up and Power-down Modeling<br>Power-up and power-down operation is modeled using enable, disable, and reset op "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Modeling_Phase57","<br>Timing and Power Policies<br>To model the timing of power state traversals, a string or enum type mb_variable can be "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Modeling_Phase58","<br>Scalable Modeling Semantics<br>Mentor Graphics scalable TLM model approach is based on a clear separation between th "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Customizing_Gen_Models_new01","<br>Generic Model Summary&#160;<br>Model<br>Ports (Name, Side) "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Customizing_Gen_Models_new02","<br>Models<br>Users can select among the following models for customization: <br>Bus "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Customizing_Gen_Models_new03","<br>Bus<br>The Bus model supports any number of master and slave ports and can be configured to any layering scheme, suc "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Customizing_Gen_Models_new04","<br>BusRemapper<br>The BusRemapper model enables you to dynamically configure new address space for the bus master socke "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Customizing_Gen_Models_new05","<br>CPU<br>The CPU model acts as a master on a bus, and includes a SW thread that is used for executing SW commands for  "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Customizing_Gen_Models_new06","<br>Cache<br>	For an explanation of cases where it is necessary to use registers to specify &ldquo;cacheable&rdquo; and  "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Customizing_Gen_Models_new07","<br>DMA Controller<br>The purpose of this component is transfer of data from one memory location to another. <br>Associa "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Customizing_Gen_Models_new08","<br>Driver<br>Drives random traffic with random distributions of address and delays based on parameter settings.<br> "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Customizing_Gen_Models_new09","<br>Fileinput<br>Driver that reads data from a file creating transactions based on input file.<br> "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Customizing_Gen_Models_new10","<br>INTC (Interrupt Controller)<br>This component receives a set of interrupts (between 1 to 32) and uses priority setti "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Customizing_Gen_Models_new11","<br>Interconnect<br>This component serves as a bridge between components. <br>The user can define the routing between th "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Customizing_Gen_Models_new12","<br>Memory<br>Memory size is defined using the size_in_bytes parameter. Memory endianness is defined using the endiannes "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Customizing_Gen_Models_new13","<br>NIC301<br>The AMBA Network Interconnect is a highly configurable component that enables you to create a complete hig "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Customizing_Gen_Models_new14","<br>Snoop<br>The Snoop Control Unit (SCU) connects multiple processors to the memory system, and maintains data-cache co "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Customizing_Gen_Models_new15","<br>Timer<br>This component raises an Interrupt in a periodic manner.<br>Ports provided for this model type:  "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Customizing_Gen_Models_new16","<br>SystemC Model for UART Visualization Object - Middleware model<br>This is a description of the UART visualization ob "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Customizing_Gen_Models_new17","<br>Splitter<br>This model is TLM2.0 Model-Builder (AT or LT) component for splitting one input transaction into two out "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Customizing_Gen_Models_new18","<br>Transactor<br>This is a template component that enables you to configure several transactor components by specifying "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Customizing_Gen_Models_new19","<br>Generic Processors (Cores)<br>The Generic Processor models are Fast ISS (Instruction-Set-Simulator) Models for a num "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Customizing_Gen_Models_new20","<br>About QEMU<br>QEMU is a generic and open source fast machine emulator which can run the targeted operating system an "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Customizing_Gen_Models_new21","<br>QEMU in Vista<br>Vista integrates generic fast ISS (Instruction Set Simulator) processors models which are based on  "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Customizing_Gen_Models_new22","<br>Licensing<br>QEMU processor models are available for simulation, debugging, and the Virtual Platform generation unde "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Customizing_Gen_Models_new23","<br>QEMU Model Infrastructure<br>Figure&#160;8&#8209;7 Illustrates the building blocks of any QEMU model infrastructure. "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Customizing_Gen_Models_new24","<br>Processor Model Integration<br>All models have a PVT TLM2.0 wrapper and are displayed in the Vista browser under Gen "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Customizing_Gen_Models_new25","<br>Model Structure and Configuration<br>As a SystemC module, every Vista generic CPU model has an internal hierarchy of "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Customizing_Gen_Models_new26","<br>QEMU Processors Features<br>Core Configuration and General Parameters <br>The following parameters may be specified  "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Customizing_Gen_Models_new27","<br>Bus Error Modeling<br>This parameter controls how a BUS error exception is modeled inside Vista CPU models.<br>	bus_ "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Customizing_Gen_Models_new28","<br>Snoop Configuration Parameters<br>Snoop Latency (latency)<br>The parameter defines any additional overhead which is  "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Customizing_Gen_Models_new29","<br>Processors Library<br>ARM 926<br>Feature List "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Customizing_Gen_Models_new30","<br>ARM 946<br>Feature List<br>AHB Interface "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Customizing_Gen_Models_new31","<br>ARM 11 MP Core<br>Feature List<br>AXI Interface  "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Customizing_Gen_Models_new32","<br>ARM Cortex M0<br>Feature List<br>Reduced thumb/thumb2 V6-M instruction set "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Customizing_Gen_Models_new33","<br>ARM Cortex M3<br>Feature List<br>AHB Interface "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Customizing_Gen_Models_new34","<br>ARM Cortex M4<br>Feature List<br>AHB Interface "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Customizing_Gen_Models_new35","<br>ARM Cortex A8<br>Feature List<br>V7A ARM Instruction-Set  "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Customizing_Gen_Models_new36","<br>ARM Cortex A9 UP (uni-processor)<br>Feature List<br>V7A ARM Instruction-Set  "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Customizing_Gen_Models_new37","<br>ARM Cortex A9 MP (multi-processor)<br>Feature List<br>V7A ARM Instruction-Set  "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Customizing_Gen_Models_new38","<br>ARM Cortex R4<br>Feature List<br>V7A ARM Instruction-Set  "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Customizing_Gen_Models_new39","<br>ARM Cortex R5<br>Feature List<br>V7A ARM Instruction-Set  "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Customizing_Gen_Models_new40","<br>ARM Core's Family Known Limitations<br>WFE and SEV instructions are currently implemented as NOP.<br> "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Customizing_Gen_Models_new41","<br>MIPS 24K<br>Feature List<br>MIPS32 Architecture "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Customizing_Gen_Models_new42","<br>MPC 603e<br>Feature List<br>Generic Bus Interface  "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Customizing_Gen_Models_new43","<br>PPC 405<br>Feature List<br>Generic Bus Interface  "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Customizing_Gen_Models_new44","<br>PPC440 (Based on PPC440x5)<br>Model Structure<br>Under cpu.PV  "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Customizing_Gen_Models_new45","<br>ARM-FM Processors Library<br>The ARM-FM environment (version 7.0.x - including MI extension) is required to use the  "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Customizing_Gen_Models_new46","<br>AFM Integration Modifications<br>All AFM ports (pv-bus and signals) are automatically exposed through the AFM Export "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Customizing_Gen_Models_new47","<br>Supported AFM Cores<br>For AFM core specific parameters and API, refer to the AFM documentation.<br>The following AF "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Customizing_Gen_Models_new48","<br>Supported AFM Peripherals<br>For AFM peripheral specific parameters and API, refer to the AFM peripherals documentat "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Customizing_Gen_Models_new49","<br>Additions to main.cpp When Using ARM-FM<br>When ARM-FM models are used, the following should be added to main.cpp:<b "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Customizing_Gen_Models_new50","<br>ARM-FM big.LITTLE Clusters<br>Component names:<br>Generic_Libarary/ARM_FastModels/bigLITTLE_A15x1_A7x1_CT "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Customizing_Gen_Models_new51","<br>Core Creation Flow<br>Cortex A9 Based System - Formation Flow<br>The instantiation of a QEMU processor model within  "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Customizing_Gen_Models_new52","<br>Physical I/O<br>The following sections describe two types of physical I/O: Virtual Local Area Network and Console.<b "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Customizing_Gen_Models_new53","<br>VLAN - Virtual LAN<br>The VLAN (Virtual Local Area Network) package is used to enable TLM models to communicate with "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Customizing_Gen_Models_new54","<br>Console<br>The console physical IO enables TLM models (UART for example) to communicate with a user using a textual  "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Customizing_Gen_Models_new55","<br>Software Debug Flow<br>Once a system has been created, it is required to bring up the software running on the proces "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Customizing_Gen_Models_new56","<br>Debug Flow Using GDB <br>Specify the GDB stub port (i.e. 1234) through the model parameters or through an external p "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Customizing_Gen_Models_new57","<br>Trace API Example <br>The following example shows how to use the trace API (both core and cache trace APIs), this ex "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Customizing_Gen_Models_new58","<br>ARM GDB Cross Debugger Configurations<br>The file arm-gdb.el configures the GDB to use the arm cross debugger,<br> "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Customizing_Gen_Models_new59","<br>Modifying Generic Configuration and Updating Tables<br>If a model port is added or renamed, you might wish to automa "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Customizing_Gen_Models_new60","<br>Statistics Modeling Package<br>The Statistics Modeling Package defines various distributions available for use with  "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Customizing_Gen_Models_new61","<br>Classes<br>Most of the pre-defined (&ldquo;mb_&rdquo;) classes can be created via the graphical user interface (Buil "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Customizing_Gen_Models_new62","<br>mb_register Class<br>Objects of this class are created automatically via declare_register in PV.<br>If you are using "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Customizing_Gen_Models_new63","<br>mb_memory Class<br>Objects of this class are created automatically via declare_memory in PV.<br>If you are using an  "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Customizing_Gen_Models_new64","<br>mb_memory_range Class<br>Objects of this class are created automatically via declare_memory in PV.<br>If you are usi "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Customizing_Gen_Models_new65","<br>mb_variable Class (PV and T)<br>To propagate values from PV to T. When the component is defined, one or more mb_var  "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Customizing_Gen_Models_new66","<br>mb_event Class<br>mb_event objects serve to synchronize the PV and T models when there are threads in a component ot "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Customizing_Gen_Models_new67","<br>mb_fifo_reg Class<br>The following summarizes mb_fifo_reg behavior:<br>An mb_fifo_reg is associated with a slave por "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Customizing_Gen_Models_new68","<br>Registers Class<br>When registers have been defined in a component, a class, which enables the components to read an "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Customizing_Gen_Models_new69","<br>The PV Model Base Class<br>All the PV models are derived from the same base class that provides common utilities. Th "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Customizing_Gen_Models_new70","<br>Vista Models Catalogue Library<br>A new Models Library has been established which consists of common models that are "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["ve_10mrg_block01","<br>Block Diagram Editor Routing Icons&#160;<br>Name<br>Sidebar Icon "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["ve_10mrg_block02","<br>Block Diagrams in Vista<br>A Vista block diagram consists of one or more TLM2.0 component instances, which may be ac "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["ve_10mrg_block03","<br>Vista Workflow<br>The following steps summarize the design and verification process and clarify where the schematic  "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["ve_10mrg_block04","<br>Object Attributes<br>Each graphical object can be further refined using the &ldquo;Attribute&rdquo; dialog. As descr "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["ve_10mrg_block05","<br>Binders, Signals and Channels<br>SystemC block diagrams provide a number of types of connections between blocks: bin "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["ve_10mrg_block06","<br>The Attribute Dialog<br>Each graphical object can be further refined using the Attribute dialog. Each object type ha "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["ve_10mrg_block07","<br>Structure &amp; Flexibility of the Block Diagram and Its Generated Code<br>One of the capabilities of the Block Diag "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["ve_10mrg_block08","<br>Partition of Code into Segments<br>The source file contains Segments. Each segment typically has three parts:<br>For "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["ve_10mrg_block09","<br>Segment Skeleton of an Empty Block Diagram<br>The typical generated file has the following structure:<br> "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["ve_10mrg_block10","<br>Description of Segments<br>The following segments are described in this section:<br>Includes Segment "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["ve_10mrg_block11","<br>Modifying the Generated Code<br>Assume the following block diagram (below), and the generated code following it (wit "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["ve_10mrg_block12","<br>Additional Tips<br>1. Renaming Design Objects<br>   You can change the name of design objects in graphics. "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["ve_10mrg_block13","<br>Creating a New Schematic (Block Diagram)<br>Models created in the Vista modeling dialog, as well as any SystemC clas "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["ve_10mrg_block14","<br>Opening the Block Diagram Editor<br>To open a window of the block diagram editor, do one of the following:<br>Create "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["ve_10mrg_block15","<br>Connectivity in Block Diagrams<br>Signals, channels and binders provide the connectivity between instances in a bloc "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["ve_10mrg_block16","<br>Adding Sockets<br>The Block Diagram Editor contains sidebar tools for adding initiator and target sockets to the com "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["ve_10mrg_block17","<br>Drawing Channels<br>You can use a number of icons in the Block Diagram Editor to create lines that represent connect "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["ve_10mrg_block18","<br>Manually Routing Channels<br>To manually route a channel&#151; <br>Click the appropriate icon. "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["ve_10mrg_block19","<br>Autorouting Channels<br>Autorouting is automatic in that wherever possible, it avoids cutting across existing elemen "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["ve_10mrg_block20","<br>Graphically Manipulating Channels<br>Once you have drawn a channel, you can adjust its shape or move the entire chan "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["ve_10mrg_block21","<br>Defining Channel Contents<br>The role of any channel in a block diagram is to carry information from one point to an "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["ve_10mrg_block22","<br>Discontinuous Channels<br>Within a block diagram unit, a channel that is graphically discontinuous on a given page i "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["ve_10mrg_block23","<br>Pins and Connectors&#151; Definition<br>In a block diagram, a pin is automatically created at the end of any channel "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["ve_10mrg_block24","<br>Local Signals and Channels<br>Internal (i.e., non-interface) signals and communication channels belonging to a block "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["ve_10mrg_block25","<br>Resolved Channel Types<br>SystemC defines a number of resolution types which may be used when there is contention be "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["ve_10mrg_block26","<br>Instantiated Components<br>Within a block diagram, you can instantiate any unit defined in your Vista libraries as a "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["ve_10mrg_block27","<br>Instantiating a Component<br>To instantiate a unit as a component in a block diagram, do one of the following:<br>Se "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["ve_10mrg_block28","<br>Flipping Components<br>After placing a component instance in a block diagram, you can flip it horizontally and/or ve "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["ve_10mrg_block29","<br>Updating Component Symbols<br>If you want to update the component instances in your block diagram to reflect revisio "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["ve_10mrg_block30","<br>Updating Components and Autorouting<br>After you update a component, autorouting may adjust the paths of channels in "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["ve_10mrg_block31","<br>Replacing Component Symbols<br>The Replace Component command lets you (1) select a different symbol to be displayed  "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["ve_10mrg_block32","<br>Creating Hierarchical Block Diagrams<br>Vista block diagram allows defining a hierarchical design. It is possible to "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["ve_10mrg_block33","<br>Creating Hierarchical Block Diagram's Flow <br>Open a new block diagram, instantiate components normally and connect "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["ve_10mrg_block34","<br>Basic Block Diagram Operations<br>This section describes basic operations in Vista's Block Diagram graphical editor: "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["ve_10mrg_block35","<br>Graphic Elements<br>The following paragraphs describe issues related to working with graphic elements in the Block D "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["ve_10mrg_block36","<br>Editing Symbols within the Block Diagram Editor<br>You can edit component symbols either directly within the Block D "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["ve_10mrg_block37","<br>Editing Text on Screen<br>Much of the text appearing in graphical units can be edited directly in the graphical edit "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["ve_10mrg_block38","<br>Saving Units and Objects<br>Two commands are available for saving design units and objects &#151; <br>File &gt; Save "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["ve_10mrg_block39","<br>Improving Block Diagram Appearance<br>Sometimes, block diagrams become too cluttered, and channel routing becomes so "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["ve_10mrg_block40","<br>Setting up the Page<br>Page setup options are set in the Options pane (Tools &gt; Options &gt; Page Setup). <br>In t "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["ve_10mrg_block41","<br>Printing<br>As you work in Vista, you can print all or part of your graphical and textual units, and the results of  "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["ve_10mrg_block42","<br>Capturing HTML<br>To generate an HTML representation of the currently active application window, choose File &gt; HT "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["ve_10mrg_block43","<br>Additional Editor Actions<br>The following additional Block Diagram actions are described below:<br>Scrolling in the "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["ve_10mrg_block44","<br>Scrolling in the Graphical Editor<br>To scroll in the graphical or textual editors, you can use the horizontal and v "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["ve_10mrg_block45","<br>Undoing and Redoing Steps of Work<br>Each of the Vista graphical editors has an Undo icon and a Redo icon. Using the "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["ve_10mrg_block46","<br>Redrawing the Active Window<br>To redraw the graphics of the active editor window, use any of these methods:<br>Pres "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["ve_10mrg_block47","<br>Block Diagram User Interface Elements<br>The Block Diagram Editor contains the following parts:<br>Block Diagram Edi "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["ve_10mrg_block48","<br>Block Diagram Editor Menu Commands<br>Following is a description of the menu commands that are accessible in the Blo "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["ve_10mrg_block49","<br>File <br> "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["ve_10mrg_block50","<br>Edit <br>Array "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["ve_10mrg_block51","<br>View <br> "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["ve_10mrg_block52","<br>Attributes <br>Visibility "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["ve_10mrg_block53","<br>Tools <br> "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["ve_10mrg_block54","<br>Block Diagram Editor Tool Bar<br>The tool bar displayed in the Schematic Editor includes the following icons:<br> "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["ve_10mrg_block55","<br>Block Diagram Editor Sidebar<br>The side bar displayed during block diagram editing includes icons grouped into the  "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["ve_10mrg_block56","<br>Symbol Editor<br>Within a block diagram (see &quot;Vista Design Assembly&quot;), you can instantiate as a component  "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["ve_10mrg_block57","<br>Opening the Symbol Editor <br>You can open the Symbol Editor from the editor window of the unit for which you want t "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["ve_10mrg_block58","<br>Selecting a Symbol to Edit <br>The three list boxes along the right edge of the Symbol Editor window enable you to s "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["ve_10mrg_block59","<br>Creating a New Symbol <br>To create a new symbol for the current unit &#151;  <br>In the Symbol Editor window, click "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["ve_10mrg_block60","<br>Drawing in the Symbol Editor <br>The following sections describe how to use the Symbol Editor tools to draw the geom "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["ve_10mrg_block61","<br>Grouping and Ungrouping Elements <br>To group individual line, shape, and text elements belonging to a symbol so the "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["ve_10mrg_block62","<br>Filling and Unfilling Elements <br>You can fill any closed two-dimensional graphic element so that its color is cyan "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["ve_10mrg_block63","<br>Rotating Pins and Pin Names <br>You can rotate one or more selected pins and their names together, or you can rotate "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["ve_10mrg_block64","<br>Flipping Pins <br>You can flip one or more selected pins to their mirrored image. <br>Select the pin(s) to be flippe "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["ve_10mrg_block65","<br>Moving Graphic Elements <br>To move any of the graphic elements drawn in the Symbol Editor: <br>Without selecting th "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["ve_10mrg_block66","<br>Modifying Graphic Elements <br>To resize a circle or ellipse, or to resize or reshape a rectangle: <br>Select the el "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["ve_10mrg_block67","<br>Symbol Pins <br>The pins of the symbol that you create for a unit represent the interface of the unit. The following "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["ve_10mrg_block68","<br>Symbol Configuration <br>You can create default associations for the pins of a symbol, as well as define parameters  "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["ve_10mrg_block69","<br>Block Diagram Options<br>The Tools &gt; Options menu item opens the Block Diagram options dialog which provides diff "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["ve_10mrg_block70","<br>Setup<br>Block Diagram Options - Setup Pane<br>The Setup pane contains the following options: "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["ve_10mrg_block71","<br>Default Types<br>Block Diagram Options - Default Types Pane<br>The Default Types pane contains the following options "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["ve_10mrg_block72","<br>Page Setup<br>Block Diagram Options - Page Setup Pane<br>The Page Setup pane enables you to specify one of a number  "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["ve_10mrg_block73","<br>Fonts<br>Block Diagram Options - Fonts Pane<br>The Fonts pane enables you to define the default settings for text ap "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["ve_10mrg_block74","<br>Selection Colors<br>Block Diagram Options - Selection Colors Pane<br>The Selections Color pane contains the followin "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["ve_10mrg_block75","<br>Visibility<br>Block Diagram Options - Visibility Pane<br>The Visibility pane enables you to specify which kinds of t "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["ve_10mrg_block76","<br>Colors<br>Block Diagram Options - Colors Pane<br>The Colors pane enables you to specifies the default fill and borde "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["ve_10mrg_block77","<br>Default Names<br>Block Diagram Options - Default Names Pane<br>The Default NAmes pane specifies default names for ea "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["compile_build_project1","<br>g++ Options&#160;<br>Option <br>Definition  "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["compile_build_project2","<br>Compiling a Project<br>Compiling a project involves creating objects from each of the source files that are referenc "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["compile_build_project3","<br>Building a Project<br>Building a project involves creating objects from each of the source files that are referenced "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["compile_build_project4","<br>Building a Project with its Dependencies<br>A project may depend on several other projects, collectively referred to "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["compile_build_project5","<br>Design Linking<br>The following elements are brought together during the link process:<br>Linked objects, specified  "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["compile_build_project6","<br>Linking with Purify<br>Vista supports working with IBM Rational PurifyTM, thus enabling you to examine memory utiliz "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["compile_build_project7","<br>Elaborating the Design<br>Once your design is built, elaborating it will allow you to <br>simulate and debug it  "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["compile_external_executables1","<br>Command-Line Arguments&#160;<br>Argument<br>Description "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["compile_external_executables2","<br>Command-Line Arguments<br>The above vista_cc and vista_c++ wrappers accept all the standard Vista command arguments. "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["compile_external_executables3","<br>Example<br>To illustrate, if your makefile uses the variables CC and CCC, you can either modify the makefile itself  "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["compile_external_executables4","<br>Response File Mechanism<br>Vista&#39;s compiler script wrappers, vista_cc and vistac++, support entering one or more "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["compile_external_executables5","<br>Simulating the Executable in Vista<br>Once your executable has been generated, you can simulate it within Vista. (Th "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["design_verification01","<br>Process Icons&#160;<br>Icon<br>Description "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["design_verification02","<br>The Simulation Run<br>Once a design has been successfully built, it is ready for simulation. <br>Simulation is perfo "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["design_verification03","<br>Customizing gdb Settings<br>Vista provides an initialization file, .gdbinit, which allows you to configure gdb setti "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["design_verification04","<br>Referencing the SystemC Verification (SCV) Library<br>Vista provides the SystemC Verification (SCV) Library that has "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["design_verification05","<br>Parameters<br>Parameters for internal model processing are set statically before simulation (both automatically acco "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["design_verification06","<br>Simulation Interface<br>The Simulation tool bar, located beneath the Project Design tool bar, becomes enabled when s "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["design_verification07","<br>Invoking Simulation<br>To invoke simulation on a design:<br>In the browser, select the top of the design, sc_main so "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["design_verification08","<br>Tracing and Untracing Objects<br>Use the Trace tool button to turn on tracing for an object, and Untrace to cancel t "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["design_verification09","<br>Exiting the Simulation Environment<br>To end a simulation session:<br>Choose the Simulation &gt; Quit Simulation men "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["design_verification10","<br>Simulation Branches in the Browser<br>Following compilation, build, and simulation(s) of a project, a separate Simul "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["design_verification11","<br>Pausing Simulation<br>To pause simulation for any reason during its execution:<br>Choose the Simulation &gt; Pause m "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["design_verification12","<br>Resuming Simulation<br>When simulation is stopped early (because a breakpoint was reached following a Pause) a numbe "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["design_verification13","<br>Restarting Simulation from the Beginning<br>The Simulate &gt; Resimulate command lets you perform simulation on a de "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["design_verification14","<br>Working with Breakpoints<br>Breakpoints provide one of the main tools used in debugging a design. <br>Defining Break "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["design_verification15","<br>Disabling Breakpoints<br>When you disable a breakpoint, it remains defined but will not influence the simulation run "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["design_verification16","<br>Saving a Set of Breakpoints<br>All of the breakpoints currently set for a design, whether enabled or disabled, can b "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["design_verification17","<br>Deleting Breakpoints<br>Deleting a breakpoint means removing it entirely from your design.<br>To delete one or more  "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["design_verification18","<br>Monitoring Simulation<br>Vista provides a number of tools that allow you to monitor the simulation of your design. T "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["design_verification19","<br>Waveform Window<br>The Waveform window plots, in time, the behavior of any of the SystemC ports, channels, or object "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["design_verification20","<br>Setting Up a Simulation Display<br>Acquiring Ports and Channels<br>As was already mentioned, in order that ports and "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["design_verification21","<br>Watching Values<br>The Watch feature enables you to continuously monitor the changing values of selected objects (da "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["design_verification22","<br>Watching Events<br>Events (charge/discharge) can be watched. Watched events appear in the Browser and Watch folder,  "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["design_verification23","<br>Displaying the Function Call Stack<br>You can view the contents of the call stack from any of the following location "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["design_verification24","<br>Displaying Process-Related Information<br>SystemC Process Types<br>Vista recognizes three different process types: "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["design_verification25","<br>Using the Simulation Control Window<br>The Simulation Control Window integrates, in a single tabbed display, all inf "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["design_verification26","<br>The Memory View<br>The Vista Memory View is similar to the Memory tab sheet of the Simulator Control window. It enab "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["design_verification27","<br>Memory Storage and Print command<br>Vista provides an external utility called &ldquo;Memory Storage and Printer&rdqu "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["design_verification28","<br>Monitoring and Analyzing TLM2.0 based designs<br>Vista enables you to monitor and analyze transactions of any System "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["design_verification29","<br>Enabling/Disabling Timing in Simulation<br>You can statically or dynamically disable the consumption of time and pow "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["design_verification30","<br>Monitoring STL Objects<br>Vectors, Lists, Queues and other STL containers are represented in Vista's Design Browser  "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["design_verification31","<br>Event Debugging<br>Event debugging provides an intuitive way to follow a sequence of events in simulation, allowing  "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["design_verification32","<br>Event Objects (sc_event) in the Vista Browser<br>Event objects (sc_events defined in the class or in inherited class "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["design_verification33","<br>Transaction Sequence Viewer<br>SystemC&#39;s interface class and its virtual methods allow designers to capture syst "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["design_verification34","<br>Post-Simulation Analysis<br>Running Vista in batch mode, and using Vista scripting capabilities, you can trace desig "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["design_verification35","<br>Multi-Thread Simulation<br>The separately licensed multi-thread simulation feature of the Vista product supports QEM "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Memory_Profiling1","<br>Zoom Icons<br>Icon<br>Description "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Memory_Profiling2","<br>Total Potential Memory Leak<br>At any time during simulation, you can view the total of the potential memory leaks f "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Memory_Profiling3","<br>Number of Potential Memory Leaks<br>The number of potential memory leaks is the number of allocations that, up to th "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Memory_Profiling4","<br>Max Allocation<br>The Max Allocation is the largest allocation done (freed or not freed) in the specific process, up "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Memory_Profiling5","<br>Invoking the Memory Profiling Window<br>To invoke the Memory Profiling window, do one of the following:<br>Click the "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Memory_Profiling6","<br>Memory Statistics Table Tab<br>Column headings can be clicked to sort values top-down in decreasing order.<br>Memory "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Memory_Profiling7","<br>Memory Statistics Plot Tab<br>To plot the memory statistics data:<br>Select a process (or processes). "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["analysis_ssource01","<br>Analysis Toolbar &#160;<br>Button<br>Command "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["analysis_ssource02","<br>Analyzing Simulation Data<br>Vista's analysis tool provides the following features:<br>The design tree is displayed, "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["analysis_ssource03","<br>Viewing Analysis Output<br>You may view the distribution of events (transactions or variables) over time, or the sta "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["analysis_ssource04","<br>Viewing Analysis Results<br>Each of the four formats (Tabs) of result data is described below.<br> "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["analysis_ssource05","<br>Summary (Tree Tab)<br>In the Tree tab, the design tree for the selected simulation(s) is displayed, as well as the l "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["analysis_ssource06","<br>Power Tab<br>The Power tab displays the power profiling distribution of the design instances. Four power attributes  "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["analysis_ssource07","<br>Sockets Tab<br>The Sockets tab allows you to view transaction timing profiling for the design's sockets (including s "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["analysis_ssource08","<br>Attributes Tab<br>The Attributes tab displays analysis results based on user specific attributes. These attributes ( "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["analysis_ssource09","<br>Navigating Within the Simulation Time<br>You can change the displayed &ldquo;window&rdquo; (over time) of data, in s "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["analysis_ssource10","<br>Analysis Sampling Interval<br>Analysis results are the average value computed for each Sampling Interval constitutin "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["analysis_ssource11","<br>Sample Graphs<br>Power Results<br>Power and Throughput Results "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["analysis_ssource12","<br>Viewing Bus Throughput Results<br>Upon selecting a bus master socket (or bus slave socket), and adding it to the gra "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["analysis_ssource13","<br>Contention Level Analysis<br>Contention-level analysis is a Bus Socket Attribute that is provided for the Vista mode "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["analysis_ssource14","<br>Arbitration Time Analysis<br>Arbitration-time analysis is a Bus-socket attribute provided for the Vista model builde "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["analysis_ssource15","<br>Cache Hit/Miss Ratio Analysis <br>Vista automatically computes the cache hit and miss ratio attribute of CPU cores t "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["analysis_ssource16","<br>View Power Distribution Results<br>Upon selecting the top of the design (or sub-tree unit) and adding it to the grap "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["analysis_ssource17","<br>Maximum/Minimum Analysis Values<br>Vista Analysis shows Maximum values, in addition to the average value. For Attrib "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["analysis_ssource18","<br>Sync Views<br>Vista Analysis view and Vista Waveform can synchronize timing space, allowing you to view the specific "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["analysis_ssource19","<br>Analysis Toolbar<br>The elements of the Analysis toolbar are described here.<br> "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["analysis_ssource20","<br>Analysis Menu Bar<br>The elements of the Analysis menu bar are described here.<br> "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["analysis_ssource21","<br>File Menu<br> "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["analysis_ssource22","<br>Tools Menu <br> "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["analysis_ssource23","<br>View Menu<br> "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["analysis_ssource24","<br>Window Menu<br> "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["analysis_ssource25","<br>Help Menu<br> "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["analysis_ssource26","<br>Viewing Analysis Reports<br>You can generate ASCII reports of the full transaction event dump and/or summary analysi "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["analysis_ssource27","<br>Transactions Report<br> "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["analysis_ssource28","<br>Summary Report<br> "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["analysis_ssource29","<br>Analysis from a Virtual Prototype<br>When a Virtual Prototype is executing you can trace and create analysis data. A "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["virtual_prototyping01","<br>Virtual Prototyping<br>This version of Vista contains functionality for creating Virtual Prototypes.<br>A Virt "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["virtual_prototyping02","<br>Creating a Virtual Prototype Using Vista GUI<br>To create a Virtual Prototype for a design in a Vista project using  "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["virtual_prototyping03","<br>Creating a Virtual Prototype Using vista_create_vp<br>The vista_create_vp script is a Tcl interpreter with commands  "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["virtual_prototyping04","<br>Virtual Prototype Runtime Environment<br>When a Virtual Prototype is invoked:<br>The Virtual Prototype contents are  "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["virtual_prototyping05","<br>Vista Virtual Prototype for Windows<br>Vista is now able to create a Virtual Prototype that is created on Linux. But "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["virtual_prototyping06","<br>Creating Virtual Prototype for Windows<br>Creating VP-for Windows using an external Makefile<br>To create a Virtual  "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["virtual_prototyping07","<br>Creating VP-for-Windows from Vista GUI<br>To create a Virtual Prototype for Windows from Vista GUI, do the following "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["virtual_prototyping08","<br>Creating VP-for-Windows from the command-line<br>To create a Virtual Prototype for Windows from the command line, ad "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["virtual_prototyping09","<br>Installing Virtual Prototype Executables<br>In addition to running a Virtual Prototype executable, you can:<br>insta "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["virtual_prototyping10","<br>Analysis from a Virtual Prototype<br>When a Virtual Prototype is executing you can trace and create analysis data. A "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["hdsw_verification01","<br>Hardware Software Interactions<br>This section provides information on how to interact with a Vista Qemu ISS b "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["hdsw_verification02","<br>Setting the VP-Plus License<br>The VP-Plus license (Vista VP-Plus Ap SW PN 248471) is used for both Vista and Vista  "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["hdsw_verification03","<br>Accessing Hardware Objects<br>When simulating with Vista, you can access hardware objects using the Sourcery CodeBen "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["hdsw_verification04","<br>Design Hierarchy Visibility<br>The hardware objects are designated by their hierarchical design path (SystemC path). "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["hdsw_verification05","<br>Hardware Object Operations<br>You can perform two basic operations on the hardware objects:<br>View Value &#151;  An "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["hdsw_verification06","<br>Performing Hardware-Software Tight-Debugging<br>When Vista simulation is stopped at a breakpoint (break-in-hardware) "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["hdsw_verification07","<br>Controlling Hardware Simulation<br>To aid in controlling simulation, a set of gdb monitor commands are available fro "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["hdsw_verification08","<br>Reset Commands<br>Core Reset<br>mon core reset  "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["hdsw_verification09","<br>Breakpoint Commands<br>Breakpoints enable you to stop simulation upon accessing a specified hardware object. A hardw "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["hdsw_verification10","<br>Software Image Control Commands<br>Core Load<br>Prerequisite: In some cases, before using this command, you must exe "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["hdsw_verification11","<br>TLM Control Commands<br>Set Timing Mode<br>mon tlm set-timing-model {AT | LT} "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["hdsw_verification12","<br>SystemC Control Commands<br>Show Simulation Time<br>mon systemc now  "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["hdsw_verification13","<br>Options to Trace ISS Instructions<br>Vista provides different ways through which a QEMU based core can be traced and "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["hdsw_verification14","<br>Other Commands<br>Show Process Information<br>mon process info "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["hdsw_verification15","<br>GDBSTUB Port Spec Parameter<br>A new parameter has been added to all QEMU based ISS models: gdbstub_port_spec. This  "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["hdsw_verification16","<br>Manipulating Files Between Target OS and Host<br>	This section applies only for target platforms that boot an Operat "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Gen_IPXACT1","<br>Generating IP-XACT Design Description<br>IP-XACT enables the use of a unified structure for the meta specifica "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Gen_IPXACT2","<br>The IP-XACT Flow in Vista<br>The IP-XACT flow in Vista is described in details in the following sections.<br>Predefi "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Gen_IPXACT3","<br>Generated IP-XACT Descriptions Contents<br>The content of the various IP-XACT descriptions generated for a TLM2.0 de "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Gen_IPXACT4","<br>Bus Definition<br>The Bus Definition created for a MB protocol contains the following elements:<br>VLNV - name: the  "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Gen_IPXACT5","<br>TLM Abstraction Definition<br>The TLM Abstraction Definition created for a MB protocol contains the following elemen "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Gen_IPXACT6","<br>Component<br>The Component description created for a MB model contains the following elements:<br>VLNV - Vendor: def "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Command_Line_Ops_mb01","<br>Machine Architecture Commands&#160;<br>Command name<br>Description "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Command_Line_Ops_mb02","<br>Syntax Conventions - Modeling<br>Most commands within the Vista model builder are available either from the GUI or t "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Command_Line_Ops_mb03","<br>Regular Expressions<br>The following illustrates use of regular expressions in protocol source parsing.<br> "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Command_Line_Ops_mb04","<br>Conditions<br>The following illustrates condition syntax (used in register assignments):<br>Possible identifiers inc "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Command_Line_Ops_mb05","<br>Command Reference - Modeling<br>The following table provides a brief description of each modeling command. Command d "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Command_Line_Ops_mb06","<br>add_generated_files_to_vista_project<br>Adds model generated files to a Vista project.<br>Syntax "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Command_Line_Ops_mb07","<br>add_template<br>Adds a model builder template (also known as a Generic Model).<br>Syntax "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Command_Line_Ops_mb08","<br>associate_hdl_unit_to_model<br>Associates an HDL unit and signals with a TLM model and Ports.<br>Syntax "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Command_Line_Ops_mb09","<br>clean_tlm_library<br>Deletes library content.<br>Syntax "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Command_Line_Ops_mb10","<br>clear_causality_ban<br>(Vista Power only).<br>Removes a causality ban. "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Command_Line_Ops_mb11","<br>configure_model_from_ipxact<br>Create a TLM2.0 component based on an IP-XACT description and saves the created compo "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Command_Line_Ops_mb12","<br>create_protocol<br>Creates a protocol in Vista model builder using a .tcl script.<br>Syntax "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Command_Line_Ops_mb13","<br>create_tlm_library<br>Creates a new TLM library.<br>Syntax "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Command_Line_Ops_mb14","<br>create_tlm_model<br>Creates a new TLM Model Interface with the defined ports and parameters.<br>Syntax "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Command_Line_Ops_mb15","<br>delete_objects <br>Removes objects from the current project database.<br>Syntax "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Command_Line_Ops_mb16","<br>does_tlm_library_exist<br>Checks whether a library of a specific name exists.<br>Syntax "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Command_Line_Ops_mb17","<br>dump_simulation_data<br>Dumps an ASCII list of all transactions in the TLM database into a file. If an instance is s "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Command_Line_Ops_mb18","<br>extract_model_interface<br>Creates a Model Interface where all Ports and Parameters are automatically extracted from "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Command_Line_Ops_mb19","<br>generate_power_model_code<br>Creates a power model based on a state power policy defined in a TLM module. <br>The mo "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Command_Line_Ops_mb20","<br>generate_testbench<br>Extracts a Transaction sequence for selected ports from a TLM database. The list of transactio "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Command_Line_Ops_mb21","<br>get_causality_ban<br>Gets a banned event name for a port in a model.<br>Syntax "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Command_Line_Ops_mb22","<br>get_most_active_signals<br>Extracts most active signals from VCD inputs of the model.<br>Syntax "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Command_Line_Ops_mb23","<br>instantiate_model_from_ipxact<br>Creates a new TLM model according to the data extracted from the IP-XACT RTL descri "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Command_Line_Ops_mb24","<br>instantiate_template<br>Creates an instance of a template model (for example, a template model from Generic_Library) "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Command_Line_Ops_mb25","<br>learn_model<br>Learns an HDL model from a set of TLM databases.<br>Syntax "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Command_Line_Ops_mb26","<br>learn_power_hdl<br>Learns the power behavior by activity of HDL signals of the model.<br>Syntax "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Command_Line_Ops_mb27","<br>list_commands<br>Lists Vista model builder TCL commands.<br>Syntax "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Command_Line_Ops_mb28","<br>list_machine_architecture_commands<br>Lists Vista model builder machine architecture TCL commands.<br>Syntax "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Command_Line_Ops_mb29","<br>list_read_vcd_commands<br>Lists the commands in the -tcl option of read_vcd.<br>Syntax "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Command_Line_Ops_mb30","<br>load_model <br>Loads a model from a source .mb file to the Vista tree, or updates existing model data from the corre "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Command_Line_Ops_mb31","<br>load_tcl_machine_arch<br>Reads a tcl script for timing/power learning.<br>Syntax "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Command_Line_Ops_mb32","<br>parse_protocol_source<br>Parses protocol source files into Vista model builder.<br>Syntax "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Command_Line_Ops_mb33","<br>parse_regular_expression<br>Parses the protocol internal regular expression file or an external source file if speci "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Command_Line_Ops_mb34","<br>parse_verilog_source<br>Parses the Verilog source files into the model builder HDL with library_name.<br>Syntax "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Command_Line_Ops_mb35","<br>parse_vhdl_source<br>Parses the VHDL source files into the Vista model builder.<br>Syntax "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Command_Line_Ops_mb36","<br>put_causality_ban<br>Enables the removal of an incorrect causality between an input and output event.<br>Syntax "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Command_Line_Ops_mb37","<br>read_vcd<br>Extracts a TLM database from a VCD file. A warning is issued if ports are not properly associated.<br>Sy "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Command_Line_Ops_mb38","<br>reload_tlm_library<br>Loads all models, by .mb file, from the library physical path or path specified in the -direct "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Command_Line_Ops_mb39","<br>remove_tlm_library<br>Removes a TLM library.<br>Syntax "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Command_Line_Ops_mb40","<br>report_instance_activity<br>Reports transaction activity statistics for a specified instance in a specified database "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Command_Line_Ops_mb41","<br>run_external_command<br>Executes shell commands in a Vista Power script or prompt.<br>Syntax "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Command_Line_Ops_mb42","<br>save_model<br>Saves a model.<br>Syntax "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Command_Line_Ops_mb43","<br>save_tlm_library<br>Saves all models in a library to either the library physical path or to the path specified in th "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Command_Line_Ops_mb44","<br>set_tlm_library_physical_path<br>Sets the physical path for a library. This path will be the target for generation o "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Command_Line_Ops_mb45","<br>start_output_log<br>Enables dump of output messages to a ModelBuilder_output.log (papoulis_output.log) file.<br>By d "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Command_Line_Ops_mb46","<br>stop_output_log <br>Stops the dump of output messages to a ModelBuilder_output.log (papoulis_output.log) file.<br>Sy "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Command_Line_Ops_mb47","<br>Machine Architecture Command Reference - Modeling<br>The Machine Architecture commands to be used in a tcl script ar "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Command_Line_Ops_mb48","<br>add_delay_policy<br>Adds a &#39;delay&#39; policy. (See &quot;Delay Policy&quot;.)<br>Syntax "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Command_Line_Ops_mb49","<br>add_pipeline_policy<br>Adds a &#39;pipeline&#39; policy. (See &quot;Pipeline Policy&quot;.)<br>Syntax "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Command_Line_Ops_mb50","<br>add_sequential_policy<br>Adds a &#39;sequential&#39; policy. (See &quot;Sequential Policy&quot;.)<br>Syntax "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Command_Line_Ops_mb51","<br>add_split_policy<br>Adds a &#39;sequential&#39; policy. (See &quot;Split Policy&quot;.)<br>Syntax "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Command_Line_Ops_mb52","<br>declare_fifo_register<br>Declares a register of type FIFO (See &quot;FIFO Registers&quot;.)<br>Syntax "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Command_Line_Ops_mb53","<br>declare_memory<br>Declares a memory range. (See &quot;Specifying Memory Ranges&quot;.)<br>Syntax "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Command_Line_Ops_mb54","<br>declare_register <br>Declares a register (See &quot;Specifying Registers&quot;.)<br>Syntax "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Command_Line_Ops_mb55","<br>declare_variable<br>Declares a PV variable. (See &quot;Specifying PV Variables&quot;.)<br>Syntax "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Command_Line_Ops_mb56","<br>set_clock_tree_power<br>Sets click tree power. (See &quot;Specifying Power Policies&quot;.)<br>Syntax "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Command_Line_Ops_mb57","<br>set_leakage_power<br>Sets leakage power. (See &quot;Specifying Power Policies&quot;.)<br>Syntax "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Command_Line_Ops_mb58","<br>set_register_value<br>Sets register initialization value. (See &quot;Extracting Power from HDL Models&quot;.)<br>Syn "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Command_Line_Ops_mb59","<br>set_sync_all <br>Sets synchronization at the model level. (See &quot;Timing and Power Policies&quot;.)<br>Syntax "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Command_Line_Ops_mb60","<br>state_power<br>Adds power based policy. Refer to &quot;State Based Power Policy&quot;<br>Syntax "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Command_Line_Ops_mb61","<br>set_nominal_clock<br>Sets the nominal clock value in MHz.<br>Syntax "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Command_Line_Ops_mb62","<br>Analysis Command Reference<br>The following table provides a brief description of each Vista Analysis command. Comma "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Command_Line_Ops_mb63","<br>vista_analysis<br>Opens the Analysis window for the specified simulation directory. (See &quot;Selecting a Simulatio "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Command_Line_Ops_mb64","<br>vista_dump_events<br>Creates a report of the events that occurred during analysis. (See &quot;Viewing Analysis Repor "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Command_Line_Ops_mb65","<br>vista_summary_report<br>Creates a simulation summary report, throughput for all simulation time, etc. <br>Syntax "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Command_Line_Ops_mb66","<br>Simulation in Batch Mode<br>Vista allows simulation in batch mode, executing multiple tracing and acquiring scenario "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Command_Line_Ops_mb67","<br>Vista Simulation Prompt<br>Name<br>Vista simulation prompt "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Command_Line_Ops_mb68","<br>Vista Debugging Commands<br>Name<br>Vista debugging commands:  "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Command_Line_Ops_mb69","<br>Vista Tracing Commands<br>Name<br>Vista tracing commands: trace, untrace, trace_transactions, untrace_transactions,  "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Command_Line_Ops_mb70","<br>Vista Design Element Path Format<br>Name<br>Vista design element path format. "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Command_Line_Ops_mb71","<br>Vista Batch Scripts<br>Vista supports performing several tasks in the batch mode. For each of these tasks, a specifi "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Command_Line_Ops_mb72","<br>vista_build_project<br>This script performs a batch build of the specified project, compiling only those sources tha "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Command_Line_Ops_mb73","<br>vista_build_tree<br>This script performs a batch build of the specified project, compiling only those sources and de "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Command_Line_Ops_mb74","<br>vista_create_project<br>This script performs batch creation of a new project incorporating the specified source file "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Command_Line_Ops_mb75","<br>vista_add_files_to_project<br>Prerequisite: A Vista project file or name must exist before using this script.<br>Thi "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Command_Line_Ops_mb76","<br>vista_generate_library<br>This script performs a batch generation of graphical libraries from Vista project modules, "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Command_Line_Ops_mb77","<br>vista_rebuild_project<br>This script performs a batch rebuild of the specified project. It first deletes all the pro "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Command_Line_Ops_mb78","<br>vista_rebuild_tree<br>This script performs a batch rebuild of the specified project and its dependencies. It first d "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Command_Line_Ops_mb79","<br>vista_simulate<br>This script performs batch simulation of the specified project.<br>Syntax "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["Chapter_Command_Line_Ops_mb80","<br>vista_memory_printer<br>A Vista external utility that enables you to associate files under a host with memory models "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["appendix_defining_c_protocols1","<br>Using Protocols<br>Protocol and Transaction Basics<br>Vista's TLM models are based on pre-defined protocols an "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["appendix_defining_c_protocols2","<br>Protocol Code Structure<br>The protocol is described in standard SystemVerilog 3.1. The protocol &ldquo;listens&rdqu "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["appendix_defining_c_protocols3","<br>1 - Declaration of Protocol Parameters<br>Each protocol includes parameters for three types of HDL signal:<br>master "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["appendix_defining_c_protocols4","<br>2 - Declaration of Protocol Messages and Transactions<br>Each Protocol generates and accepts messages as either:<br> "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["appendix_defining_c_protocols5","<br>3 - Declaration of the Protocol States<br>An enumeration variable should be declared that contains all the states de "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["appendix_defining_c_protocols6","<br>4 - Definition of the State Machine<br>The protocol state machine should be defined such that the timing of the deli "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["appendix_defining_c_protocols7","<br>Compiling the Protocol Code<br>In order to compile the protocol, use the following tcl command:<br>Note that you can "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["appendix_defining_c_protocols8","<br>Protocol Attributes<br>General Protocol Attributes<br>(* address *):- Defines the protocol parameter that represents "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["appendix_ve_libraries1","<br>Vista and Visual Elite<br>Vista can generate graphical symbols for use in the Mentor Graphics Visual Elite too "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["appendix_ve_libraries2","<br>Defining Settings<br>First, you must define general settings for the generation of graphical libraries:<br>Choose th "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["appendix_ve_libraries3","<br>Interactively Generating Graphical Libraries<br>To initiate the interactive generation of a graphical library from a "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["appendix_ve_libraries4","<br>Batch Generating Graphical Libraries<br>A script is provided with Vista to enable you to generate graphical librarie "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["appendix_ve_libraries5","<br>Instantiating Vista Modules in Visual Elite Designs<br>Once a library is generated, all that has to be done in Visua "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["appendix_ve_libraries6","<br>Defining Additional Attributes for Generated Components<br>When you instantiate a Vista-sourced component in a Syste "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["appendix_ve_libraries7","<br>Exporting sc_module Parameter Information to Visual Elite<br>The sc_module parameters defined for a Vista project ca "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["appendix_external_simulators01","<br>Vista Wrapper Scripts<br>Task<br>Mentor's tool "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["appendix_external_simulators02","<br>Questa<br>Vista supports the use of Questa simulator both for pure SystemC designs as well as for designs containing "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["appendix_external_simulators03","<br>Environment Prerequisite<br>In order that Vista&#39;s wrapper scripts be able to access the various Questa tools (fo "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["appendix_external_simulators04","<br>Wrapper Scripts<br>In order to build your design to be simulated on the Questa simulator, you need to use the Vista  "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["appendix_external_simulators05","<br>Work Procedures<br>For every Questa &ldquo;sccom&rdquo; use a &ldquo;vista_sccom&rdquo; wrapper script, and for ever "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["appendix_external_simulators06","<br>Notes and Limitations<br>Platform: Currently Linux is the only supported platform. Solaris and Windows(MingW) versio "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["appendix_external_simulators07","<br>Cadence NC Simulators<br>Vista supports the use of Cadence's simulators both for pure SystemC designs (NC&#8209;SC)  "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["appendix_external_simulators08","<br>Environment Prerequisite<br>In order that Vista&#39;s wrapper scripts will be able to access the various NC tools (s "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["appendix_external_simulators09","<br>Wrapper Scripts<br>In order to build an ncsim executable to be run on the NC-Sim simulator, normally you need to use "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["appendix_external_simulators10","<br>Work Procedures<br>There are three basic work procedures that can be used to simulate your Vista designs on NC-Sim:< "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["appendix_external_simulators11","<br>Using Vista TSV with NC<br>If you intend to utilize Vista's Transaction Sequence Viewer in conjunction with NC simul "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["appendix_external_simulators12","<br>Running Simulation and Debugging<br>When you complete any of the three procedures described above, Vista will be inv "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["appendix_external_simulators13","<br>Running the NC-Sim Build Programs in Batch<br>If you have a script that runs one or more of the above NC programs, t "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["appendix_external_simulators14","<br>Cosimulation with Synopsis VCS<br>When VCS is installed on your system, from within Vista you can run an externally  "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["appendix_external_simulators15","<br>Environment Prerequisite<br>In order to take advantage of this capability, first make certain that the VCS_HOME envi "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["appendix_external_simulators16","<br>Scripts for Building the Cosimulating &ldquo;simv&rdquo; Executable<br>In order to build a simv executable to be run "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["appendix_external_simulators17","<br>Running the simv Build Programs in Batch<br>If you have a script that runs one or more of the above Synopsis program "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["appendix_external_simulators18","<br>Simulate Learned Power Models With External Simulators<br>Vista Learned Power models can be simulated outside of Vis "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["CreatingTLMfromIPXACT1","<br>IP-XACT Configuration of ARM Component<br>Vista enables configuration of a predefined generic component  "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["CreatingTLMfromIPXACT2","<br>Creating a TLM Model Using the GUI<br>To create a fully configured TLM2.0 model out of the IP-XACT RTL description c "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["CreatingTLMfromIPXACT3","<br>Creating a TLM Model Using Batch Flow<br>If you are running Vista in batch mode, use the following commands to creat "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["CreatingTLMfromIPXACT4","<br>NIC301 Model Parameters<br>The following NIC301 parameters are supported (either totally or in-part). These paramete "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["CreatingTLMfromIPXACT5","<br>Generated Models<br>Together with the new TLM model representing the configured ARM component (currently, NIC301), s "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["CreatingTLMfromIPXACT6","<br>Other Operations<br>The Vista browser shows a single model for the configured TLM component. The internal hierarchy  "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["CreatingTLMfromIPXACT7","<br>ARM ADR Tool Directory Structure<br>The directory structure created by the ARM ADR tool as a result of generating IP "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["appendix_linting1","<br>SystemC Linting <br>Two linting options are available in Vista for users with the necessary licenses:<br>Atren "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["appendix_linting2","<br>Performing Atrenta SpyGlass Analysis from within Vista<br>Users who have a licensed copy of Atrenta's 1Team:System L "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["appendix_linting3","<br>Using Actis AccurateC SystemC Linter with Vista<br>Users who have licenses for AccurateC, Actis SystemC source code  "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["sdparameters_package1","<br>sdParameters Package<br> "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["appendix_matlab1","<br>Using MATLAB TLM Models in Vista<br>Using MATLAB TLM2.0 Functional Models in Vista <br>Beginning with release  "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["appendix_dynamic_design1","<br>Dynamic Design Configuration<br>The need for Dynamic Design Configuration<br>Sometimes it is needed to declare "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["appendix_dynamic_design2","<br>The new Packages<br>To provide this capability a new set of packages were created as described and listed below.<br> "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["appendix_dynamic_design3","<br>Package structure (directories and files)<br>vista_schematics - base classes for PORT_VECTOR and MODULE_VECTOR suppo "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["appendix_dynamic_design4","<br>The Types<br>A set of new types is created to implement and make use of the new capability.<br>sc_port_vector "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["appendix_dynamic_design5","<br>module_vector<br>defined in: vista_schematics/module_vector.h<br>This class represents a vector of MODULEs. Like any "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["appendix_dynamic_design6","<br>Examples structure<br>examples/test_modules/*.h - Test modules.h<br>examples/tops/*.h - top files, instantiating the "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["appendix_dynamic_design7","<br>Limitations<br>Currently Vista ModelBuilder doesn&#39;t support Vector Ports/Models<br> "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["appendix_dynamic_design8","<br>Future Release<br>multi_bind (supporting one-to-many, many-to-one).<br> "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["third_party1","<br>Third-Party&#160;Information<br>This section provides information on open source and third-party software that may b "]);
WWHFrame.mLParatext["Vista_Users_Guide"].push(["eula1","<br> IMPORTANT INFORMATION <br>USE OF ALL SOFTWARE IS SUBJECT TO LICENSE RESTRICTIONS.  CAREFULLY READ THIS LICENSE AGRE "]);