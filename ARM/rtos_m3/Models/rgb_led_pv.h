
/**************************************************************/
/*                                                            */
/*      Copyright Mentor Graphics Corporation 2006 - 2012     */
/*                  All Rights Reserved                       */
/*                                                            */
/*       THIS WORK CONTAINS TRADE SECRET AND PROPRIETARY      */
/*         INFORMATION WHICH IS THE PROPERTY OF MENTOR        */
/*         GRAPHICS CORPORATION OR ITS LICENSORS AND IS       */
/*                 SUBJECT TO LICENSE TERMS.                  */
/*                                                            */
/**************************************************************/

//*<
//* Generated By Model Builder, Mentor Graphics Computer Systems, Inc.
//*
//* This file contains the PV class for rgb_led.
//* This is a template file: You may modify this file to implement the 
//* behavior of your component. 
//* 
//* Model Builder version: 3.4.0
//* Generated on: Sep. 20, 2012 04:49:24 PM, (user: markca)
//* Automatically merged on: Sep. 21, 2012 01:19:48 PM, (user: markca)
//* Automatically merged on: Nov. 20, 2012 02:12:51 PM, (user: markca)
//*>


#pragma once

#include "rgb_led_model.h"

using namespace tlm;

//This class inherits from the rgb_led_pv_base class
class rgb_led_pv : public rgb_led_pv_base {
 public:
  typedef esl::tlm_types::Address mb_address_type;
 public:
  // Constructor
  // Do not add parameters here.
  // To add parameters - use the Model Builder form (under PV->Parameters tab)
  SC_HAS_PROCESS(rgb_led_pv);
  rgb_led_pv(sc_core::sc_module_name module_name); 

 protected:
  ////////////////////////////////////////
  // read callbacks of registers
  ////////////////////////////////////////// 
  unsigned int cb_read_RED_EN();
  unsigned int cb_read_GREEN_EN();
  unsigned int cb_read_BLUE_EN(); 
  
 protected:
  /////////////////////////////////////////
  // write callbacks of registers
  ////////////////////////////////////////// 
  void cb_write_RED_EN(unsigned int newValue);
  void cb_write_GREEN_EN(unsigned int newValue);
  void cb_write_BLUE_EN(unsigned int newValue); 

 private:
  pid_t pid;
  int commpipe[2];
  
 protected:
  ////////////////////////////////////////
  // target ports read callbacks
  //////////////////////////////////////// 
  bool ahb_slave_callback_read(mb_address_type address, unsigned char* data, unsigned size);
  
  unsigned ahb_slave_callback_read_dbg(mb_address_type address, unsigned char* data, unsigned size); 

 protected:
  ////////////////////////////////////////
  // target ports write callbacks
  //////////////////////////////////////// 
  bool ahb_slave_callback_write(mb_address_type address, unsigned char* data, unsigned size);
  
  unsigned ahb_slave_callback_write_dbg(mb_address_type address, unsigned char* data, unsigned size); 
  bool ahb_slave_get_direct_memory_ptr(mb_address_type address, tlm::tlm_dmi& dmiData);   
};

