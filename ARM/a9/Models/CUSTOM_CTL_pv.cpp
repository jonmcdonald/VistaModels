
/**************************************************************/
/*                                                            */
/*      Copyright Mentor Graphics Corporation 2006 - 2012     */
/*                  All Rights Reserved                       */
/*                                                            */
/*       THIS WORK CONTAINS TRADE SECRET AND PROPRIETARY      */
/*         INFORMATION WHICH IS THE PROPERTY OF MENTOR        */
/*         GRAPHICS CORPORATION OR ITS LICENSORS AND IS       */
/*                 SUBJECT TO LICENSE TERMS.                  */
/*                                                            */
/**************************************************************/

//*<
//* Generated By Model Builder, Mentor Graphics Computer Systems, Inc.
//*
//* This file contains the PV class for CUSTOM_CTL.
//* This is a template file: You may modify this file to implement the 
//* behavior of your component. 
//* 
//* Model Builder version: 3.7.0
//* Generated on: Oct. 29, 2013 12:00:28 PM, (user: markca)
//*>



#include "CUSTOM_CTL_pv.h"
#include <iostream>

using namespace sc_core;
using namespace sc_dt;
using namespace std;

//constructor
CUSTOM_CTL_pv::CUSTOM_CTL_pv(sc_module_name module_name) 
  : CUSTOM_CTL_pv_base(module_name) {
}   

/////////////////////////////////////////////////////////////////////////////////
// Use these functions to define the behavior of your model when there is a 
// write event on one of the registers as defined in the Model Builder form.
// These functions are called before the write callbacks on the port.
///////////////////////////////////////////////////////////////////////////////// 

// Write callback for SYS_HALT register.
// The newValue has been already assigned to the SYS_STOP register.
void CUSTOM_CTL_pv::cb_write_SYS_STOP(unsigned int newValue) {
  sc_stop();
}
  

// Read callback for reg_access port.
// Returns true when successful.
bool CUSTOM_CTL_pv::reg_access_callback_read(mb_address_type address, unsigned char* data, unsigned size) {
  
  return true;
}

// Write callback for reg_access port.
// Returns true when successful.
bool CUSTOM_CTL_pv::reg_access_callback_write(mb_address_type address, unsigned char* data, unsigned size) {
  
  return true;
} 




unsigned CUSTOM_CTL_pv::reg_access_callback_read_dbg(mb_address_type address, unsigned char* data, unsigned size) {
  return 0;
} 

unsigned CUSTOM_CTL_pv::reg_access_callback_write_dbg(mb_address_type address, unsigned char* data, unsigned size) {
  return 0;
} 

bool CUSTOM_CTL_pv::reg_access_get_direct_memory_ptr(mb_address_type address, tlm::tlm_dmi& dmiData) {
  return false;
}

 
void CUSTOM_CTL_pv::cb_transport_dbg_SYS_STOP(tlm::tlm_generic_payload& trans) {}
