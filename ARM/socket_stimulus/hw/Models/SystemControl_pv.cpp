
/**************************************************************/
/*                                                            */
/*      Copyright Mentor Graphics Corporation 2006 - 2012     */
/*                  All Rights Reserved                       */
/*                                                            */
/*       THIS WORK CONTAINS TRADE SECRET AND PROPRIETARY      */
/*         INFORMATION WHICH IS THE PROPERTY OF MENTOR        */
/*         GRAPHICS CORPORATION OR ITS LICENSORS AND IS       */
/*                 SUBJECT TO LICENSE TERMS.                  */
/*                                                            */
/**************************************************************/

//*<
//* Generated By Model Builder, Mentor Graphics Computer Systems, Inc.
//*
//* This file contains the PV class for SystemControl.
//* This is a template file: You may modify this file to implement the 
//* behavior of your component. 
//* 
//* Model Builder version: 3.8.1RND2
//* Generated on: Jul. 25, 2014 02:42:44 PM, (user: markca)
//* Automatically merged on: Jul. 25, 2014 02:43:32 PM, (user: markca)
//* Automatically merged on: Jul. 25, 2014 03:56:52 PM, (user: markca)
//*>



#include "SystemControl_pv.h"
#include <iostream>
#include "DataType.h"

using namespace sc_core;
using namespace sc_dt;
using namespace std;

//constructor
SystemControl_pv::SystemControl_pv(sc_module_name module_name) 
  : SystemControl_pv_base(module_name) {
} 

/////////////////////////////////////////////////////////////////////////////////
// Use these functions to define the behavior of your model when there is a 
// read event on one of the registers as defined in the Model Builder form.
// These functions are called before the read callbacks on the port.
///////////////////////////////////////////////////////////////////////////////// 

// Read callback for STATE register.
// The value that this function returns, will be returned to the initiator port that requested its value.
unsigned int SystemControl_pv::cb_read_STATE() {

  // reset interrupt signal
  flag.write(0);
  
  return STATE;
}
  

/////////////////////////////////////////////////////////////////////////////////
// Use these functions to define the behavior of your model when there is a 
// write event on one of the registers as defined in the Model Builder form.
// These functions are called before the write callbacks on the port.
///////////////////////////////////////////////////////////////////////////////// 

// Write callback for STATE register.
// The newValue has been already assigned to the STATE register.
void SystemControl_pv::cb_write_STATE(unsigned int newValue) {
  
}
  

// Read callback for from_event port.
// Returns true when successful.
bool SystemControl_pv::from_event_callback_read(mb_address_type address, unsigned char* data, unsigned size) {
  
  return true;
}


// Read callback for from_bus port.
// Returns true when successful.
bool SystemControl_pv::from_bus_callback_read(mb_address_type address, unsigned char* data, unsigned size) {
  
  return true;
}

// Write callback for from_event port.
// Returns true when successful.
bool SystemControl_pv::from_event_callback_write(mb_address_type address, unsigned char* data, unsigned size) {
  
  DataType *d = (DataType *) data;

  cout << sc_time_stamp()<<", "<<name()<<" "<<d->r<<", "<<d->g<<", "<<d->b<<endl;
  
  STATE = (d->b << 2) | (d->g << 1) | (d->r << 0);

  // trigger interrupt
  flag.write(1);

  delete d;

  return true;
} 

// Write callback for from_bus port.
// Returns true when successful.
bool SystemControl_pv::from_bus_callback_write(mb_address_type address, unsigned char* data, unsigned size) {
  
  return true;
} 




unsigned SystemControl_pv::from_event_callback_read_dbg(mb_address_type address, unsigned char* data, unsigned size) {
  return 0;
} 

unsigned SystemControl_pv::from_event_callback_write_dbg(mb_address_type address, unsigned char* data, unsigned size) {
  return 0;
} 

bool SystemControl_pv::from_event_get_direct_memory_ptr(mb_address_type address, tlm::tlm_dmi& dmiData) {
  return false;
}





unsigned SystemControl_pv::from_bus_callback_read_dbg(mb_address_type address, unsigned char* data, unsigned size) {
  return 0;
} 

unsigned SystemControl_pv::from_bus_callback_write_dbg(mb_address_type address, unsigned char* data, unsigned size) {
  return 0;
} 

bool SystemControl_pv::from_bus_get_direct_memory_ptr(mb_address_type address, tlm::tlm_dmi& dmiData) {
  return false;
}

 
void SystemControl_pv::cb_transport_dbg_STATE(tlm::tlm_generic_payload& trans) {}
