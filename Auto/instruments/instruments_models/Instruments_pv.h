
/**************************************************************/
/*                                                            */
/*      Copyright Mentor Graphics Corporation 2006 - 2012     */
/*                  All Rights Reserved                       */
/*                                                            */
/*       THIS WORK CONTAINS TRADE SECRET AND PROPRIETARY      */
/*         INFORMATION WHICH IS THE PROPERTY OF MENTOR        */
/*         GRAPHICS CORPORATION OR ITS LICENSORS AND IS       */
/*                 SUBJECT TO LICENSE TERMS.                  */
/*                                                            */
/**************************************************************/

//*<
//* Generated By Model Builder, Mentor Graphics Computer Systems, Inc.
//*
//* This file contains the PV class for Instruments.
//* This is a template file: You may modify this file to implement the 
//* behavior of your component. 
//* 
//* Model Builder version: 4.1beta2
//* Generated on: Apr. 17, 2015 02:47:16 PM, (user: markca)
//*>


#pragma once

#include "Instruments_model.h"
#include <pthread.h>
#include <sys/types.h> 
#include <sys/socket.h>
#include <netinet/in.h>
#include <deque>

#ifdef __VISTA_OSCI23__
#include "thread_safe_event.h"
#endif

#include "InstrumentsDataType.h"

using namespace tlm;

//This class inherits from the Instruments_pv_base class
class Instruments_pv : public Instruments_pv_base {
 public:
  typedef esl::tlm_types::Address mb_address_type;
 public:
  // Constructor
  // Do not add parameters here.
  // To add parameters - use the Model Builder form (under PV->Parameters tab)
  SC_HAS_PROCESS(Instruments_pv);
  Instruments_pv(sc_core::sc_module_name module_name);    
  virtual ~Instruments_pv();

protected:
  void input();		// SystemC process which waits for asynchronous input from external process

private:
  // call_startReader is a wrapper function that allows a member function to be used as pthread argument.
  static void* call_startReader(void *arg) { return ((Instruments_pv*)arg)->startReader(); }
  void *startReader();	// C++ pthread which will fork and exec the external process then wait for input
                        // from the external process.  It will forward and call notify on safe_ev

  pthread_t readerThread;
  pthread_mutex_t mutex;	// Used to safely pass data from startReader to input processes.
  
#ifdef __VISTA_OSCI23__
  thread_safe_event safe_ev;	// Thread safe event used to notify from startReader to input processes.
#endif    

  pid_t child_pid;  // process id of the python script
  int sockfd, newsockfd, portno;
  socklen_t clilen;
  struct sockaddr_in serv_addr, cli_addr;

  std::deque<InstrumentsDataType *> q;	// queue holding data passed from startReader to input processes

public:
  tlm::tlm_fifo<uint> acceleratorFifo;  
  tlm::tlm_fifo<uint> brakeFifo;  

};

