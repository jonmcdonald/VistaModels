
/**************************************************************/
/*                                                            */
/*      Copyright Mentor Graphics Corporation 2006 - 2012     */
/*                  All Rights Reserved                       */
/*                                                            */
/*       THIS WORK CONTAINS TRADE SECRET AND PROPRIETARY      */
/*         INFORMATION WHICH IS THE PROPERTY OF MENTOR        */
/*         GRAPHICS CORPORATION OR ITS LICENSORS AND IS       */
/*                 SUBJECT TO LICENSE TERMS.                  */
/*                                                            */
/**************************************************************/

//*<
//* Generated By Model Builder, Mentor Graphics Computer Systems, Inc.
//*
//* This file contains the PV class for LinuxFrameBufferDisplay.
//* This is a template file: You may modify this file to implement the 
//* behavior of your component. 
//* 
//* Model Builder version: 3.8.1RND2
//* Generated on: Jul. 30, 2014 11:26:19 AM, (user: markca)
//* Automatically merged on: Jul. 30, 2014 11:59:01 AM, (user: markca)
//* Automatically merged on: Jul. 30, 2014 12:54:26 PM, (user: markca)
//* Automatically merged on: Jul. 30, 2014 10:16:52 PM, (user: markca)
//* Automatically merged on: Aug. 06, 2014 10:08:47 AM, (user: markca)
//*>


#pragma once

#include "LinuxFrameBufferDisplay_model.h"

using namespace tlm;

//This class inherits from the LinuxFrameBufferDisplay_pv_base class
class LinuxFrameBufferDisplay_pv : public LinuxFrameBufferDisplay_pv_base {
 public:
  typedef esl::tlm_types::Address mb_address_type;
 public:
  // Constructor
  // Do not add parameters here.
  // To add parameters - use the Model Builder form (under PV->Parameters tab)
  SC_HAS_PROCESS(LinuxFrameBufferDisplay_pv);
  LinuxFrameBufferDisplay_pv(sc_core::sc_module_name module_name);   

  void updateDisplay();

 protected:
  ////////////////////////////////////////
  // target ports read callbacks
  //////////////////////////////////////// 
  bool from_bus_callback_read(mb_address_type address, unsigned char* data, unsigned size);
  
  unsigned from_bus_callback_read_dbg(mb_address_type address, unsigned char* data, unsigned size); 

 protected:
  ////////////////////////////////////////
  // target ports write callbacks
  //////////////////////////////////////// 
  bool from_bus_callback_write(mb_address_type address, unsigned char* data, unsigned size);
  
  unsigned from_bus_callback_write_dbg(mb_address_type address, unsigned char* data, unsigned size);  
  bool from_bus_get_direct_memory_ptr(mb_address_type address, tlm::tlm_dmi& dmiData);   

private:
  ::mb::physical_io::sdl_client* m_client;
  sc_core::sc_time frame_refresh_rate;
};

