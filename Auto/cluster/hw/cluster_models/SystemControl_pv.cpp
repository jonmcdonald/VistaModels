
/**************************************************************/
/*                                                            */
/*      Copyright Mentor Graphics Corporation 2006 - 2012     */
/*                  All Rights Reserved                       */
/*                                                            */
/*       THIS WORK CONTAINS TRADE SECRET AND PROPRIETARY      */
/*         INFORMATION WHICH IS THE PROPERTY OF MENTOR        */
/*         GRAPHICS CORPORATION OR ITS LICENSORS AND IS       */
/*                 SUBJECT TO LICENSE TERMS.                  */
/*                                                            */
/**************************************************************/

//*<
//* Generated By Model Builder, Mentor Graphics Computer Systems, Inc.
//*
//* This file contains the PV class for SystemControl.
//* This is a template file: You may modify this file to implement the 
//* behavior of your component. 
//* 
//* Model Builder version: 3.8.1RND2
//* Generated on: Aug. 12, 2014 04:25:56 PM, (user: markca)
//* Automatically merged on: Aug. 12, 2014 05:00:00 PM, (user: markca)
//* Automatically merged on: May. 07, 2015 01:32:29 PM, (user: markca)
//* Automatically merged on: May. 07, 2015 03:19:40 PM, (user: markca)
//*>



#include "SystemControl_pv.h"
#include <iostream>

using namespace sc_core;
using namespace sc_dt;
using namespace std;

//constructor
SystemControl_pv::SystemControl_pv(sc_module_name module_name) 
  : SystemControl_pv_base(module_name) {
}   

/////////////////////////////////////////////////////////////////////////////////
// Use these functions to define the behavior of your model when there is a 
// write event on one of the registers as defined in the Model Builder form.
// These functions are called before the write callbacks on the port.
///////////////////////////////////////////////////////////////////////////////// 

// Write callback for SYSCTRL register.
// The newValue has been already assigned to the SYSCTRL register.
void SystemControl_pv::cb_write_SYSCTRL(unsigned int newValue) {
}
  

// Read callback for slave port.
// Returns true when successful.
bool SystemControl_pv::slave_callback_read(mb_address_type address, unsigned char* data, unsigned size) {
  
  return true;
}

// Write callback for slave port.
// Returns true when successful.
bool SystemControl_pv::slave_callback_write(mb_address_type address, unsigned char* data, unsigned size) {
  
  return true;
} 




unsigned SystemControl_pv::slave_callback_read_dbg(mb_address_type address, unsigned char* data, unsigned size) {
  return 0;
} 

unsigned SystemControl_pv::slave_callback_write_dbg(mb_address_type address, unsigned char* data, unsigned size) {
  return 0;
} 

bool SystemControl_pv::slave_get_direct_memory_ptr(mb_address_type address, tlm::tlm_dmi& dmiData) {
  return false;
}

 
void SystemControl_pv::cb_transport_dbg_SYSCTRL(tlm::tlm_generic_payload& trans) {}
