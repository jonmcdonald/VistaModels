
/**************************************************************/
/*                                                            */
/*      Copyright Mentor Graphics Corporation 2006 - 2012     */
/*                  All Rights Reserved                       */
/*                                                            */
/*       THIS WORK CONTAINS TRADE SECRET AND PROPRIETARY      */
/*         INFORMATION WHICH IS THE PROPERTY OF MENTOR        */
/*         GRAPHICS CORPORATION OR ITS LICENSORS AND IS       */
/*                 SUBJECT TO LICENSE TERMS.                  */
/*                                                            */
/**************************************************************/

//*<
//* Generated By Model Builder, Mentor Graphics Computer Systems, Inc.
//*
//* This file contains the PV class for EMUDriver.
//* This is a template file: You may modify this file to implement the 
//* behavior of your component. 
//* 
//* Model Builder version: 3.9.0
//* Generated on: Mar. 31, 2015 03:29:12 PM, (user: jon)
//* Automatically merged on: May. 13, 2015 12:42:16 PM, (user: jon)
//*>



#include "EMUDriver_pv.h"
#include "MemoryMap.h"
#include <iostream>

using namespace sc_core;
using namespace sc_dt;
using namespace std;

extern bool myRunning;

//constructor
EMUDriver_pv::EMUDriver_pv(sc_module_name module_name) 
  : EMUDriver_pv_base(module_name) {
  SC_THREAD(thread);
}    

// Read callback for rxi port.
// Returns true when successful.
bool EMUDriver_pv::rxi_callback_read(mb_address_type address, unsigned char* data, unsigned size) {
  
  return true;
}

// Write callback for rxi port.
// Returns true when successful.
bool EMUDriver_pv::rxi_callback_write(mb_address_type address, unsigned char* data, unsigned size) {
  
  return true;
} 

unsigned EMUDriver_pv::rxi_callback_read_dbg(mb_address_type address, unsigned char* data, unsigned size) {
  return 0;
} 

unsigned EMUDriver_pv::rxi_callback_write_dbg(mb_address_type address, unsigned char* data, unsigned size) {
  return 0;
} 

bool EMUDriver_pv::rxi_get_direct_memory_ptr(mb_address_type address, tlm::tlm_dmi& dmiData) {
  return false;
}

// callback for any change in signal: rxi of type: sc_in<bool>
/*void EMUDriver_pv::rxi_callback() {
  unsigned s;
  unsigned id;
  unsigned char d[9];

  if (rxi.read() == 1) {
    m_write(CAN_ACK, 0);
    m_read(CAN_RXSIZE, s);
    m_read(CAN_RXIDENT, id);
    if (s > 0)
      m_read(CAN_RXDATA, d, s);
  }
}*/

void EMUDriver_pv::thread() {
  unsigned d;
  mb::mb_token_ptr tokenptr;

  while(myRunning) {
    wait (70, SC_MS);
    d = s->pull();
    e->push(d,0);
    d = e->pull(0);
    RPM = d;
    tokenptr = new mb::mb_token();
    tokenptr->setField("CreationTime", sc_time_stamp());
    set_current_token(tokenptr);
    m_write(CAN_DATA, d);
    m_write(CAN_SIZE, 4);
    m_write(CAN_IDENT, RPMID);
  }
}

 
