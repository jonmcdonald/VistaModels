
/**************************************************************/
/*                                                            */
/*      Copyright Mentor Graphics Corporation 2006 - 2012     */
/*                  All Rights Reserved                       */
/*                                                            */
/*       THIS WORK CONTAINS TRADE SECRET AND PROPRIETARY      */
/*         INFORMATION WHICH IS THE PROPERTY OF MENTOR        */
/*         GRAPHICS CORPORATION OR ITS LICENSORS AND IS       */
/*                 SUBJECT TO LICENSE TERMS.                  */
/*                                                            */
/**************************************************************/

//*<
//* Generated By Model Builder, Mentor Graphics Computer Systems, Inc.
//*
//* This file contains the PV class for can.
//* This is a template file: You may modify this file to implement the 
//* behavior of your component. 
//* 
//* Model Builder version: 3.9.0
//* Generated on: Mar. 31, 2015 03:44:29 PM, (user: jon)
//* Automatically merged on: Mar. 31, 2015 03:55:28 PM, (user: jon)
//* Automatically merged on: Apr. 01, 2015 10:59:08 AM, (user: jon)
//* Automatically merged on: Apr. 01, 2015 11:03:00 AM, (user: jon)
//* Automatically merged on: Apr. 01, 2015 11:05:01 AM, (user: jon)
//*>


#pragma once

#include "can_model.h"

using namespace tlm;

//This class inherits from the can_pv_base class
class can_pv : public can_pv_base {
 public:
  typedef esl::tlm_types::Address mb_address_type;
 public:
  // Constructor
  // Do not add parameters here.
  // To add parameters - use the Model Builder form (under PV->Parameters tab)
  SC_HAS_PROCESS(can_pv);
  can_pv(sc_core::sc_module_name module_name);  
  
 protected:
  /////////////////////////////////////////
  // write callbacks of registers
  ////////////////////////////////////////// 
  void cb_write_m_ident(unsigned int newValue);
  void cb_write_m_ack(unsigned int newValue); 

 protected:
  ////////////////////////////////////////
  // target ports read callbacks
  //////////////////////////////////////// 
  bool reg_callback_read(mb_address_type address, unsigned char* data, unsigned size);
  
  unsigned reg_callback_read_dbg(mb_address_type address, unsigned char* data, unsigned size);
  bool RX0_callback_read(mb_address_type address, unsigned char* data, unsigned size);
  
  unsigned RX0_callback_read_dbg(mb_address_type address, unsigned char* data, unsigned size); 

 protected:
  ////////////////////////////////////////
  // target ports write callbacks
  //////////////////////////////////////// 
  bool reg_callback_write(mb_address_type address, unsigned char* data, unsigned size);
  
  unsigned reg_callback_write_dbg(mb_address_type address, unsigned char* data, unsigned size);
  bool RX0_callback_write(mb_address_type address, unsigned char* data, unsigned size);
  
  unsigned RX0_callback_write_dbg(mb_address_type address, unsigned char* data, unsigned size); 
  virtual void cb_transport_dbg_m_ident(tlm::tlm_generic_payload& trans);
  virtual void cb_transport_dbg_m_ack(tlm::tlm_generic_payload& trans); 
  bool reg_get_direct_memory_ptr(mb_address_type address, tlm::tlm_dmi& dmiData);  
  bool RX0_get_direct_memory_ptr(mb_address_type address, tlm::tlm_dmi& dmiData);   

 private:
  struct CANDataType {
    unsigned int ident;
    unsigned int length;
    unsigned int crc;
    unsigned char d[9];
  };

};

