
/**************************************************************/
/*                                                            */
/*      Copyright Mentor Graphics Corporation 2006 - 2012     */
/*                  All Rights Reserved                       */
/*                                                            */
/*       THIS WORK CONTAINS TRADE SECRET AND PROPRIETARY      */
/*         INFORMATION WHICH IS THE PROPERTY OF MENTOR        */
/*         GRAPHICS CORPORATION OR ITS LICENSORS AND IS       */
/*                 SUBJECT TO LICENSE TERMS.                  */
/*                                                            */
/**************************************************************/

//*<
//* Generated By Model Builder, Mentor Graphics Computer Systems, Inc.
//*
//* This file contains the PV class for CEMDriver.
//* This is a template file: You may modify this file to implement the 
//* behavior of your component. 
//* 
//* Model Builder version: 4.1beta2
//* Generated on: Apr. 28, 2015 09:59:38 AM, (user: jon)
//* Automatically merged on: May. 13, 2015 12:47:23 PM, (user: jon)
//*>



#include "CEMDriver_pv.h"
#include "MemoryMap.h"
#include <iostream>

using namespace sc_core;
using namespace sc_dt;
using namespace std;

//constructor
CEMDriver_pv::CEMDriver_pv(sc_module_name module_name) 
  : CEMDriver_pv_base(module_name),
    bodyff("bodyff", 4),
    propff("propff", 4),
    chassisff("chassisff", 4)
{
  SC_THREAD(body_thread);
  SC_THREAD(chassis_thread);
  SC_THREAD(prop_thread);
}    

// Read callback for propRXI port.
// Returns true when successful.
bool CEMDriver_pv::propRXI_callback_read(mb_address_type address, unsigned char* data, unsigned size) {
  
  return true;
}

// Read callback for chassisRXI port.
// Returns true when successful.
bool CEMDriver_pv::chassisRXI_callback_read(mb_address_type address, unsigned char* data, unsigned size) {
  
  return true;
}

// callback for any change in signal: propRXI of type: sc_in<bool>
void CEMDriver_pv::propRXI_callback() {
  /*unsigned s;
  unsigned id;
  unsigned char d[9];
  DataType *dt;

  if (propRXI.read() == 1) {
    propB_write(CAN_ACK, 0);
    propB_read(CAN_RXSIZE, s);
    propB_read(CAN_RXIDENT, id);
    if (s > 0)
      propB_read(CAN_RXDATA, d, s);

    if (id == ACCELERATORID && s > 0) {
      dt = new DataType(id, s, d);
      bodyff.put(dt);
      dt = new DataType(id, s, d);
      chassisff.put(dt);
    }
  }*/
}


// Read callback for bodyRXI port.
// Returns true when successful.
bool CEMDriver_pv::bodyRXI_callback_read(mb_address_type address, unsigned char* data, unsigned size) {
  
  return true;
}

// callback for any change in signal: chassisRXI of type: sc_in<bool>
void CEMDriver_pv::chassisRXI_callback() {
  /*unsigned s;
  unsigned id;
  unsigned char d[9];
  DataType *dt;

  if (chassisRXI.read() == 1) {
    chassisB_write(CAN_ACK, 0);
    chassisB_read(CAN_RXSIZE, s);
    chassisB_read(CAN_RXIDENT, id);
    if (s > 0)
      chassisB_read(CAN_RXDATA, d, s);

    if ((id == SPEEDID || id == BRAKEID) && s > 0) {
      dt = new DataType(id, s, d);
      propff.put(dt);
    }
  }*/
}

// Write callback for propRXI port.
// Returns true when successful.
bool CEMDriver_pv::propRXI_callback_write(mb_address_type address, unsigned char* data, unsigned size) {
  unsigned s;
  unsigned id;
  unsigned char d[9];
  DataType *dt;

  if (*data == 1) {
    propB_write(CAN_ACK, 0);
    propB_read(CAN_RXSIZE, s);
    propB_read(CAN_RXIDENT, id);
    if (s > 0)
      propB_read(CAN_RXDATA, d, s);

    if (id == ACCELERATORID && s > 0) {
      dt = new DataType(id, s, d);
      bodyff.put(dt);
      dt = new DataType(id, s, d);
      chassisff.put(dt);
    }
  }
  return true;
} 

// Write callback for chassisRXI port.
// Returns true when successful.
bool CEMDriver_pv::chassisRXI_callback_write(mb_address_type address, unsigned char* data, unsigned size) {
  unsigned s;
  unsigned id;
  unsigned char d[9];
  DataType *dt;

  if (*data == 1) {
    chassisB_write(CAN_ACK, 0);
    chassisB_read(CAN_RXSIZE, s);
    chassisB_read(CAN_RXIDENT, id);
    if (s > 0)
      chassisB_read(CAN_RXDATA, d, s);

    if ((id == SPEEDID || id == BRAKEID) && s > 0) {
      dt = new DataType(id, s, d);
      propff.put(dt);
    }
  }
  return true;
} 

// Write callback for bodyRXI port.
// Returns true when successful.
bool CEMDriver_pv::bodyRXI_callback_write(mb_address_type address, unsigned char* data, unsigned size) {
  
  return true;
} 

unsigned CEMDriver_pv::propRXI_callback_read_dbg(mb_address_type address, unsigned char* data, unsigned size) {
  return 0;
} 

unsigned CEMDriver_pv::propRXI_callback_write_dbg(mb_address_type address, unsigned char* data, unsigned size) {
  return 0;
} 

bool CEMDriver_pv::propRXI_get_direct_memory_ptr(mb_address_type address, tlm::tlm_dmi& dmiData) {
  return false;
}

unsigned CEMDriver_pv::chassisRXI_callback_read_dbg(mb_address_type address, unsigned char* data, unsigned size) {
  return 0;
} 

unsigned CEMDriver_pv::chassisRXI_callback_write_dbg(mb_address_type address, unsigned char* data, unsigned size) {
  return 0;
} 

bool CEMDriver_pv::chassisRXI_get_direct_memory_ptr(mb_address_type address, tlm::tlm_dmi& dmiData) {
  return false;
}

unsigned CEMDriver_pv::bodyRXI_callback_read_dbg(mb_address_type address, unsigned char* data, unsigned size) {
  return 0;
} 

unsigned CEMDriver_pv::bodyRXI_callback_write_dbg(mb_address_type address, unsigned char* data, unsigned size) {
  return 0;
} 

bool CEMDriver_pv::bodyRXI_get_direct_memory_ptr(mb_address_type address, tlm::tlm_dmi& dmiData) {
  return false;
}

void CEMDriver_pv::body_thread() {
  DataType * dt;
  while (dt = bodyff.peek()) {
    bodyB_write(CAN_DATA, dt->d, dt->s);
    bodyB_write(CAN_SIZE, dt->s);
    bodyB_write(CAN_IDENT, dt->id);
    bodyff.get();
    delete dt;
  }
}

void CEMDriver_pv::prop_thread() {
  DataType * dt;
  while (dt = propff.peek()) {
    propB_write(CAN_DATA, dt->d, dt->s);
    propB_write(CAN_SIZE, dt->s);
    propB_write(CAN_IDENT, dt->id);
    propff.get();
    delete dt;
  }
}

void CEMDriver_pv::chassis_thread() {
  DataType * dt;
  while (dt = chassisff.peek()) {
    chassisB_write(CAN_DATA, dt->d, dt->s);
    chassisB_write(CAN_SIZE, dt->s);
    chassisB_write(CAN_IDENT, dt->id);
    chassisff.get();
    delete dt;
  }
}
