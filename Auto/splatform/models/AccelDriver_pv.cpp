
/**************************************************************/
/*                                                            */
/*      Copyright Mentor Graphics Corporation 2006 - 2012     */
/*                  All Rights Reserved                       */
/*                                                            */
/*       THIS WORK CONTAINS TRADE SECRET AND PROPRIETARY      */
/*         INFORMATION WHICH IS THE PROPERTY OF MENTOR        */
/*         GRAPHICS CORPORATION OR ITS LICENSORS AND IS       */
/*                 SUBJECT TO LICENSE TERMS.                  */
/*                                                            */
/**************************************************************/

//*<
//* Generated By Model Builder, Mentor Graphics Computer Systems, Inc.
//*
//* This file contains the PV class for AccelDriver.
//* This is a template file: You may modify this file to implement the 
//* behavior of your component. 
//* 
//* Model Builder version: 3.9.0
//* Generated on: Mar. 31, 2015 03:10:10 PM, (user: jon)
//* Automatically merged on: Mar. 31, 2015 05:36:43 PM, (user: jon)
//*>



#include "AccelDriver_pv.h"
#include <iostream>
#include "MemoryMap.h"

using namespace sc_core;
using namespace sc_dt;
using namespace std;

extern bool myRunning;

//constructor
AccelDriver_pv::AccelDriver_pv(sc_module_name module_name) 
  : AccelDriver_pv_base(module_name) {

  SC_THREAD(thread);
}    

// callback for any change in signal: rxi of type: sc_in<bool>
void AccelDriver_pv::rxi_callback() {
  unsigned int s;
  unsigned int id;
  unsigned char d[9];

  if (rxi.read() == 1) {
    m_write(CAN_ACK, 0);        // ack reg
    m_read(CAN_RXSIZE, s);      // length
    m_read(CAN_RXIDENT, id);    // ident
    if (s > 0) 
      m_read(CAN_RXDATA, d, s); // RX data
    d[s] = '\0';

    cout << sc_time_stamp() <<": "<< name() << ", received 0x"<<hex<< id<<dec<< ", "<< s << " ,"<< d <<endl;
  }
}

void AccelDriver_pv::thread() {
  unsigned char *d = (unsigned char *) &s[0];

  while (myRunning) {
    wait (70, SC_MS);
    m_write(CAN_DATA, d, 4);     //TX data
    m_write(CAN_SIZE, 4);        //size
    m_write(CAN_IDENT, 0x555);   //ident
    d++;
    if (d == (unsigned char *)&s[26]) d = (unsigned char *) &s[0];
  }
}

char AccelDriver_pv::s[30] = "abcdefghijklmnopqrstuvwxyzabc";
