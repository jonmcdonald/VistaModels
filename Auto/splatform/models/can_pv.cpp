
/**************************************************************/
/*                                                            */
/*      Copyright Mentor Graphics Corporation 2006 - 2012     */
/*                  All Rights Reserved                       */
/*                                                            */
/*       THIS WORK CONTAINS TRADE SECRET AND PROPRIETARY      */
/*         INFORMATION WHICH IS THE PROPERTY OF MENTOR        */
/*         GRAPHICS CORPORATION OR ITS LICENSORS AND IS       */
/*                 SUBJECT TO LICENSE TERMS.                  */
/*                                                            */
/**************************************************************/

//*<
//* Generated By Model Builder, Mentor Graphics Computer Systems, Inc.
//*
//* This file contains the PV class for can.
//* This is a template file: You may modify this file to implement the 
//* behavior of your component. 
//* 
//* Model Builder version: 3.9.0
//* Generated on: Mar. 31, 2015 03:44:29 PM, (user: jon)
//* Automatically merged on: Mar. 31, 2015 03:55:28 PM, (user: jon)
//*>



#include "can_pv.h"
#include <iostream>

using namespace sc_core;
using namespace sc_dt;
using namespace std;

//constructor
can_pv::can_pv(sc_module_name module_name) 
  : can_pv_base(module_name) {
  GI_Rx.initialize(0);
} 

/////////////////////////////////////////////////////////////////////////////////
// Use these functions to define the behavior of your model when there is a 
// read event on one of the registers as defined in the Model Builder form.
// These functions are called before the read callbacks on the port.
///////////////////////////////////////////////////////////////////////////////// 

// Read callback for m_data register.
// The value that this function returns, will be returned to the initiator port that requested its value.
unsigned int can_pv::cb_read_m_data() {
  GI_Rx.write(0);
  return m_data;
}
  

/////////////////////////////////////////////////////////////////////////////////
// Use these functions to define the behavior of your model when there is a 
// write event on one of the registers as defined in the Model Builder form.
// These functions are called before the write callbacks on the port.
///////////////////////////////////////////////////////////////////////////////// 

// Write callback for m_data register.
// The newValue has been already assigned to the m_data register.
void can_pv::cb_write_m_data(unsigned int newValue) {
  TX0_write(0x0, newValue);
}
  

// Read callback for reg port.
// Returns true when successful.
bool can_pv::reg_callback_read(mb_address_type address, unsigned char* data, unsigned size) {
  
  return true;
}


// Read callback for RX0 port.
// Returns true when successful.
bool can_pv::RX0_callback_read(mb_address_type address, unsigned char* data, unsigned size) {
  
  return true;
}

// Write callback for reg port.
// Returns true when successful.
bool can_pv::reg_callback_write(mb_address_type address, unsigned char* data, unsigned size) {
  TX0_write(address, data, size);
  return true;
} 

// Write callback for RX0 port.
// Returns true when successful.
bool can_pv::RX0_callback_write(mb_address_type address, unsigned char* data, unsigned size) {
  unsigned int *d = (unsigned int *) data;
  m_data = *d;
  return true;
} 




unsigned can_pv::reg_callback_read_dbg(mb_address_type address, unsigned char* data, unsigned size) {
  return 0;
} 

unsigned can_pv::reg_callback_write_dbg(mb_address_type address, unsigned char* data, unsigned size) {
  return 0;
} 

bool can_pv::reg_get_direct_memory_ptr(mb_address_type address, tlm::tlm_dmi& dmiData) {
  return false;
}





unsigned can_pv::RX0_callback_read_dbg(mb_address_type address, unsigned char* data, unsigned size) {
  return 0;
} 

unsigned can_pv::RX0_callback_write_dbg(mb_address_type address, unsigned char* data, unsigned size) {
  return 0;
} 

bool can_pv::RX0_get_direct_memory_ptr(mb_address_type address, tlm::tlm_dmi& dmiData) {
  return false;
}

 
void can_pv::cb_transport_dbg_m_data(tlm::tlm_generic_payload& trans) {}
