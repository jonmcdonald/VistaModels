
/**************************************************************/
/*                                                            */
/*      Copyright Mentor Graphics Corporation 2006 - 2012     */
/*                  All Rights Reserved                       */
/*                                                            */
/*       THIS WORK CONTAINS TRADE SECRET AND PROPRIETARY      */
/*         INFORMATION WHICH IS THE PROPERTY OF MENTOR        */
/*         GRAPHICS CORPORATION OR ITS LICENSORS AND IS       */
/*                 SUBJECT TO LICENSE TERMS.                  */
/*                                                            */
/**************************************************************/

//*<
//* Generated By Model Builder, Mentor Graphics Computer Systems, Inc.
//*
//* This file contains the PV class for can.
//* This is a template file: You may modify this file to implement the 
//* behavior of your component. 
//* 
//* Model Builder version: 3.9.0
//* Generated on: Mar. 31, 2015 03:44:29 PM, (user: jon)
//* Automatically merged on: Mar. 31, 2015 03:55:28 PM, (user: jon)
//* Automatically merged on: Apr. 01, 2015 10:59:08 AM, (user: jon)
//* Automatically merged on: Apr. 01, 2015 11:03:00 AM, (user: jon)
//* Automatically merged on: Apr. 01, 2015 11:05:01 AM, (user: jon)
//* Automatically merged on: Apr. 09, 2015 09:02:52 AM, (user: jon)
//*>



#include "can_pv.h"
#include <iostream>

using namespace sc_core;
using namespace sc_dt;
using namespace std;

//constructor
can_pv::can_pv(sc_module_name module_name) 
  : can_pv_base(module_name), tpff("tpff", -1) {
  GI_Rx.initialize(0);
}   

/////////////////////////////////////////////////////////////////////////////////
// Use these functions to define the behavior of your model when there is a 
// write event on one of the registers as defined in the Model Builder form.
// These functions are called before the write callbacks on the port.
///////////////////////////////////////////////////////////////////////////////// 

// Write callback for m_ident register.
// The newValue has been already assigned to the m_ident register.
void can_pv::cb_write_m_ident(unsigned int newValue) {
  unsigned char *d = new unsigned char ((m_size*8)+61);
cout << "Created CAN data packet at " << (unsigned long long) d << endl;
  unsigned char *m = (unsigned char *) &m_mem[0];
  CANDataType *c = (CANDataType *) d;

  mb::mb_token_ptr tokenptr = get_current_token();
  if (!tokenptr) {
    tokenptr = new mb::mb_token;
  }
  tokenptr->setField("DataPtr", (void *)d);
  tokenptr->setField("ReceiveCount", Receivers);

  c->ident = m_ident;
  c->length = m_size;
  c->crc = 0;
  memcpy(c->d, m, m_size);
  c->d[m_size] = '\0';
  // Writing one byte per bit to get proper timing less 1 to fix address cycle time of generic bus
  set_current_token(tokenptr);
  TX0_write(newValue, d, (m_size*8)+61);
}
 

// Write callback for m_ack register.
// The newValue has been already assigned to the m_ack register.
void can_pv::cb_write_m_ack(unsigned int newValue) {
  GI_Rx.write(0);
}
  
/////////////////////////////////////////////////////////////////////////////////
// Use these functions to define the behavior of your model when there is a  
// write/read event on one of memory io ranges as defined in the Model Builder form.
///////////////////////////////////////////////////////////////////////////////// 

// Write callback for m_rxmem memory range.
void can_pv::cb_write_m_rxmem(uint64_t address, unsigned char* data, unsigned length) {
  
}

// Read callback for m_rxmem memory range.
void can_pv::cb_read_m_rxmem(uint64_t address, unsigned char* data, unsigned length) {
  mb::mb_token_ptr tokenptr;
  CANDataType *c;
  unsigned count;
  if (tpff.nb_can_get()) {
    tokenptr = tpff.get();
    c = (CANDataType *)tokenptr->getFieldAsVoidPtr("DataPtr");
    assert (c);
    assert (length <= 8);
    memcpy(rxmem, c->d, c->length);
    memcpy(data, c->d, c->length);
    if ((count = tokenptr->getFieldAsInt("ReceiveCount")) == 1) {
      delete c;
    } else { tokenptr->setField("ReceiveCount", count-1); }
  } else {
    if (length <= 8)
      memcpy(data, rxmem, length);
    else
      cout << sc_time_stamp() <<": "<< name() <<". Error, read too long.\n";
  }
}
 

// Read callback for reg port.
// Returns true when successful.
bool can_pv::reg_callback_read(mb_address_type address, unsigned char* data, unsigned size) {
  
  return true;
}


// Read callback for RX0 port.
// Returns true when successful.
bool can_pv::RX0_callback_read(mb_address_type address, unsigned char* data, unsigned size) {
  
  return true;
}

// Write callback for reg port.
// Returns true when successful.
bool can_pv::reg_callback_write(mb_address_type address, unsigned char* data, unsigned size) {
  unsigned char *d;
// This function is not used and should not be called.
cout << "*************** reg_callback_write ***************\n";
  if (address == 0) {
    d = (unsigned char *)&m_mem[0];
    memcpy(d, data, size);
    m_size = size;
  }
  return true;
} 

// Write callback for RX0 port.
// Returns true when successful.
bool can_pv::RX0_callback_write(mb_address_type address, unsigned char* data, unsigned size) {
cout << "Received CAN data packet at " << (unsigned long long) data << endl;
  unsigned char *d;
  CANDataType *c = (CANDataType *) data;
  m_rxsize = c->length;

  mb::mb_token_ptr tokenptr = get_current_token();
  if (tokenptr && tokenptr->hasField("ReceiveCount")) {
    tpff.put(tokenptr);
  } else { cout << sc_time_stamp() <<": "<< name() <<". Error, tokenptr not set.\n"; }
  cout<<sc_time_stamp()<<": "<<name()<<", "<<c->ident<<", "<<c->length<<", "<<c->d<<endl;
  GI_Rx.write(1);
  return true;
} 




unsigned can_pv::reg_callback_read_dbg(mb_address_type address, unsigned char* data, unsigned size) {
  return 0;
} 

unsigned can_pv::reg_callback_write_dbg(mb_address_type address, unsigned char* data, unsigned size) {
  return 0;
} 

bool can_pv::reg_get_direct_memory_ptr(mb_address_type address, tlm::tlm_dmi& dmiData) {
  return false;
}





unsigned can_pv::RX0_callback_read_dbg(mb_address_type address, unsigned char* data, unsigned size) {
  return 0;
} 

unsigned can_pv::RX0_callback_write_dbg(mb_address_type address, unsigned char* data, unsigned size) {
  return 0;
} 

bool can_pv::RX0_get_direct_memory_ptr(mb_address_type address, tlm::tlm_dmi& dmiData) {
  return false;
}

 
void can_pv::cb_transport_dbg_m_ident(tlm::tlm_generic_payload& trans) {}
void can_pv::cb_transport_dbg_m_ack(tlm::tlm_generic_payload& trans) {}
