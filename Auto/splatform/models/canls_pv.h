
/**************************************************************/
/*                                                            */
/*      Copyright Mentor Graphics Corporation 2006 - 2012     */
/*                  All Rights Reserved                       */
/*                                                            */
/*       THIS WORK CONTAINS TRADE SECRET AND PROPRIETARY      */
/*         INFORMATION WHICH IS THE PROPERTY OF MENTOR        */
/*         GRAPHICS CORPORATION OR ITS LICENSORS AND IS       */
/*                 SUBJECT TO LICENSE TERMS.                  */
/*                                                            */
/**************************************************************/

//*<
//* Generated By Model Builder, Mentor Graphics Computer Systems, Inc.
//*
//* This file contains the PV class for canls.
//* This is a template file: You may modify this file to implement the 
//* behavior of your component. 
//* 
//* Model Builder version: 3.9.0
//* Generated on: Apr. 01, 2015 08:18:19 AM, (user: jon)
//*>


#pragma once

#include "canls_model.h"
#include <queue>
#include <vector>

using namespace tlm;

//This class inherits from the canls_pv_base class
class canls_pv : public canls_pv_base {
 public:
  typedef esl::tlm_types::Address mb_address_type;
 public:
  // Constructor
  // Do not add parameters here.
  // To add parameters - use the Model Builder form (under PV->Parameters tab)
  SC_HAS_PROCESS(canls_pv);
  canls_pv(sc_core::sc_module_name module_name);   

  void thread();
  void thread_r();
  void thread_c();
  void thread_ap();

 protected:
  ////////////////////////////////////////
  // target ports read callbacks
  //////////////////////////////////////// 
  bool r_tx_callback_read(mb_address_type address, unsigned char* data, unsigned size);
  
  unsigned r_tx_callback_read_dbg(mb_address_type address, unsigned char* data, unsigned size);
  bool ap_tx_callback_read(mb_address_type address, unsigned char* data, unsigned size);
  
  unsigned ap_tx_callback_read_dbg(mb_address_type address, unsigned char* data, unsigned size);
  bool c_tx_callback_read(mb_address_type address, unsigned char* data, unsigned size);
  
  unsigned c_tx_callback_read_dbg(mb_address_type address, unsigned char* data, unsigned size); 

 protected:
  ////////////////////////////////////////
  // target ports write callbacks
  //////////////////////////////////////// 
  bool r_tx_callback_write(mb_address_type address, unsigned char* data, unsigned size);
  
  unsigned r_tx_callback_write_dbg(mb_address_type address, unsigned char* data, unsigned size);
  bool ap_tx_callback_write(mb_address_type address, unsigned char* data, unsigned size);
  
  unsigned ap_tx_callback_write_dbg(mb_address_type address, unsigned char* data, unsigned size);
  bool c_tx_callback_write(mb_address_type address, unsigned char* data, unsigned size);
  
  unsigned c_tx_callback_write_dbg(mb_address_type address, unsigned char* data, unsigned size);  
  bool r_tx_get_direct_memory_ptr(mb_address_type address, tlm::tlm_dmi& dmiData);  
  bool ap_tx_get_direct_memory_ptr(mb_address_type address, tlm::tlm_dmi& dmiData);  
  bool c_tx_get_direct_memory_ptr(mb_address_type address, tlm::tlm_dmi& dmiData);   

 private:

  class DataType {
    public:
    unsigned int m_ident;
    unsigned int m_length;
    unsigned int m_crc;
    unsigned int m_size;
    char m_data[126];

      DataType() {}

      DataType(mb_address_type address, unsigned char * data, unsigned size) :
        m_ident(address), m_size(size) {
        memcpy(m_data, data, size);
      }

      bool operator() (const DataType* lhs, const DataType* rhs) const {
        return lhs->m_ident < rhs->m_ident; }
  };

  tlm_fifo<int> iff;
  mb::mb_fifo<DataType*> rff;
  mb::mb_fifo<DataType*> cff;
  mb::mb_fifo<DataType*> apff;
  priority_queue<DataType*, vector<DataType*>, DataType> pq;
};

