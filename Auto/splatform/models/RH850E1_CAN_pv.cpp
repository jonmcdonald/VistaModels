
/**************************************************************/
/*                                                            */
/*      Copyright Mentor Graphics Corporation 2006 - 2012     */
/*                  All Rights Reserved                       */
/*                                                            */
/*       THIS WORK CONTAINS TRADE SECRET AND PROPRIETARY      */
/*         INFORMATION WHICH IS THE PROPERTY OF MENTOR        */
/*         GRAPHICS CORPORATION OR ITS LICENSORS AND IS       */
/*                 SUBJECT TO LICENSE TERMS.                  */
/*                                                            */
/**************************************************************/

//*<
//* Generated By Model Builder, Mentor Graphics Computer Systems, Inc.
//*
//* This file contains the PV class for RH850E1_CAN.
//* This is a template file: You may modify this file to implement the 
//* behavior of your component. 
//* 
//* Model Builder version: 4.1beta1
//* Generated on: Mar. 16, 2015 12:40:42 PM, (user: akhader)
//* Automatically merged on: Mar. 17, 2015 10:13:02 AM, (user: akhader)
//* Automatically merged on: Mar. 17, 2015 01:58:11 PM, (user: akhader)
//* Automatically merged on: Mar. 19, 2015 10:16:13 AM, (user: akhader)
//* Automatically merged on: Mar. 22, 2015 09:26:45 AM, (user: akhader)
//* Automatically merged on: Mar. 22, 2015 01:51:33 PM, (user: akhader)
//* Automatically merged on: Mar. 22, 2015 03:14:26 PM, (user: akhader)
//* Automatically merged on: Mar. 22, 2015 06:23:38 PM, (user: akhader)
//* Automatically merged on: Mar. 24, 2015 09:38:35 AM, (user: akhader)
//* Automatically merged on: Mar. 24, 2015 04:07:53 PM, (user: akhader)
//* Automatically merged on: Mar. 24, 2015 04:29:37 PM, (user: akhader)
//* Automatically merged on: Mar. 25, 2015 02:06:54 PM, (user: akhader)
//* Automatically merged on: Mar. 25, 2015 03:05:39 PM, (user: akhader)
//* Automatically merged on: Mar. 25, 2015 03:22:53 PM, (user: akhader)
//* Automatically merged on: Mar. 26, 2015 08:57:11 AM, (user: akhader)
//* Automatically merged on: Mar. 29, 2015 09:50:29 AM, (user: akhader)
//* Automatically merged on: Mar. 29, 2015 11:51:49 AM, (user: akhader)
//* Automatically merged on: Mar. 29, 2015 02:21:57 PM, (user: akhader)
//* Automatically merged on: Mar. 29, 2015 02:37:31 PM, (user: akhader)
//*>



#include "RH850E1_CAN_pv.h"
#include <iostream>

using namespace sc_core;
using namespace sc_dt;
using namespace std;

#define RH850E1_CAN_DEBUG 5

#if defined(RH850E1_CAN_DEBUG) && RH850E1_CAN_DEBUG > 0
  #define gout(...) cout<<name()<<" @ "<<sc_time_stamp()<<" : "<<__func__<<" ["<<dec<<__LINE__<<"]: "<<hex<<__VA_ARGS__<<endl
#else
  #define gout(...) 
#endif

#define GSC_REPORT_WARNING(arg1,...) do{stringstream gss;gss<<__VA_ARGS__;string gs = gss.str();const char* gmsg = gs.c_str();SC_REPORT_WARNING(name(),gmsg);}while(0)
#define GSC_REPORT_ERROR(arg1,...) do{stringstream gss;gss<<__VA_ARGS__;string gs = gss.str();const char* gmsg = gs.c_str();SC_REPORT_ERROR(name(),gmsg);}while(0)


//constructor
RH850E1_CAN_pv::RH850E1_CAN_pv(sc_module_name module_name) 
  : RH850E1_CAN_pv_base(module_name) {

  //Report handle according to report_error and report_warning parameters
  if(!report_warning) {
    sc_report_handler::set_actions(name(), SC_WARNING, SC_DO_NOTHING);
    sc_report_handler::set_actions(name(), SC_INFO, SC_DO_NOTHING);
  }
  if(report_error == 0)
    sc_report_handler::set_actions(name(), SC_ERROR, SC_DO_NOTHING);
  else if(report_error == 1)
    sc_report_handler::set_actions(name(), SC_ERROR, SC_LOG | SC_CACHE_REPORT | SC_DISPLAY);

  setup_reg();

  reset_CAN();

    char name[100];
    sprintf(name,"CAN_TimeStamp_Counter");
    m_cnt = new Counter(name);
    m_cnt_action.parent = this;
    m_cnt->set_overflow_action(&m_cnt_action);
    m_cnt->set_increment(+1);
    m_cnt->set_limit(0xFFFF + 1);
    m_cnt_val = 0x0;
    update_counter();

} 
//destructor
RH850E1_CAN_pv::~RH850E1_CAN_pv(){
  for(unsigned i=0;i<4;i++){
    delete m_TQID[i];
    delete m_TQPTR[i];
    delete m_TQDF0[i];
    delete m_TQDF1[i];
  }
  delete m_cnt;
} 

/////////////////////////////////////////////////////////////////////////////////
// Use these functions to define the behavior of your model when there is a 
// read event on one of the registers as defined in the Model Builder form.
// These functions are called before the read callbacks on the port.
///////////////////////////////////////////////////////////////////////////////// 

// Read callback for RSCAN0GTSC register.
// The value that this function returns, will be returned to the initiator port that requested its value.
unsigned int RH850E1_CAN_pv::cb_read_RSCAN0GTSC() {
  RSCAN0GTSC = get_counter_value();
  return RSCAN0GTSC;
}
 

// Read callback for RSCAN0RFID0 register.
// The value that this function returns, will be returned to the initiator port that requested its value.
unsigned int RH850E1_CAN_pv::cb_read_RSCAN0RFID0() {
  
  return m_RFIFO_RFID[0].first();
}
 

// Read callback for RSCAN0RFPTR0 register.
// The value that this function returns, will be returned to the initiator port that requested its value.
unsigned int RH850E1_CAN_pv::cb_read_RSCAN0RFPTR0() {
  
  return m_RFIFO_RFPTR[0].first();
}
 

// Read callback for RSCAN0RFDF00 register.
// The value that this function returns, will be returned to the initiator port that requested its value.
unsigned int RH850E1_CAN_pv::cb_read_RSCAN0RFDF00() {
  
  return m_RFIFO_RFDF0[0].first();
}
 

// Read callback for RSCAN0RFDF10 register.
// The value that this function returns, will be returned to the initiator port that requested its value.
unsigned int RH850E1_CAN_pv::cb_read_RSCAN0RFDF10() {
  
  return m_RFIFO_RFDF1[0].first();
}
 

// Read callback for RSCAN0RFID1 register.
// The value that this function returns, will be returned to the initiator port that requested its value.
unsigned int RH850E1_CAN_pv::cb_read_RSCAN0RFID1() {
  
  return m_RFIFO_RFID[1].first();
}
 

// Read callback for RSCAN0RFPTR1 register.
// The value that this function returns, will be returned to the initiator port that requested its value.
unsigned int RH850E1_CAN_pv::cb_read_RSCAN0RFPTR1() {
  
  return m_RFIFO_RFPTR[1].first();
}
 

// Read callback for RSCAN0RFDF01 register.
// The value that this function returns, will be returned to the initiator port that requested its value.
unsigned int RH850E1_CAN_pv::cb_read_RSCAN0RFDF01() {
  
  return m_RFIFO_RFDF0[1].first();
}
 

// Read callback for RSCAN0RFDF11 register.
// The value that this function returns, will be returned to the initiator port that requested its value.
unsigned int RH850E1_CAN_pv::cb_read_RSCAN0RFDF11() {
  
  return m_RFIFO_RFDF1[1].first();
}
 

// Read callback for RSCAN0RFID2 register.
// The value that this function returns, will be returned to the initiator port that requested its value.
unsigned int RH850E1_CAN_pv::cb_read_RSCAN0RFID2() {
  
  return m_RFIFO_RFID[2].first();
}
 

// Read callback for RSCAN0RFPTR2 register.
// The value that this function returns, will be returned to the initiator port that requested its value.
unsigned int RH850E1_CAN_pv::cb_read_RSCAN0RFPTR2() {
  
  return m_RFIFO_RFPTR[2].first();
}
 

// Read callback for RSCAN0RFDF02 register.
// The value that this function returns, will be returned to the initiator port that requested its value.
unsigned int RH850E1_CAN_pv::cb_read_RSCAN0RFDF02() {
  
  return m_RFIFO_RFDF0[2].first();
}
 

// Read callback for RSCAN0RFDF12 register.
// The value that this function returns, will be returned to the initiator port that requested its value.
unsigned int RH850E1_CAN_pv::cb_read_RSCAN0RFDF12() {
  
  return m_RFIFO_RFDF1[2].first();
}
 

// Read callback for RSCAN0RFID3 register.
// The value that this function returns, will be returned to the initiator port that requested its value.
unsigned int RH850E1_CAN_pv::cb_read_RSCAN0RFID3() {
  
  return m_RFIFO_RFID[3].first();
}
 

// Read callback for RSCAN0RFPTR3 register.
// The value that this function returns, will be returned to the initiator port that requested its value.
unsigned int RH850E1_CAN_pv::cb_read_RSCAN0RFPTR3() {
  
  return m_RFIFO_RFPTR[3].first();
}
 

// Read callback for RSCAN0RFDF03 register.
// The value that this function returns, will be returned to the initiator port that requested its value.
unsigned int RH850E1_CAN_pv::cb_read_RSCAN0RFDF03() {
  
  return m_RFIFO_RFDF0[3].first();
}
 

// Read callback for RSCAN0RFDF13 register.
// The value that this function returns, will be returned to the initiator port that requested its value.
unsigned int RH850E1_CAN_pv::cb_read_RSCAN0RFDF13() {
  
  return m_RFIFO_RFDF1[3].first();
}
 

// Read callback for RSCAN0RFID4 register.
// The value that this function returns, will be returned to the initiator port that requested its value.
unsigned int RH850E1_CAN_pv::cb_read_RSCAN0RFID4() {
  
  return m_RFIFO_RFID[4].first();
 
}


// Read callback for RSCAN0RFPTR4 register.
// The value that this function returns, will be returned to the initiator port that requested its value.
unsigned int RH850E1_CAN_pv::cb_read_RSCAN0RFPTR4() {
  
  return m_RFIFO_RFPTR[4].first();
}
 

// Read callback for RSCAN0RFDF04 register.
// The value that this function returns, will be returned to the initiator port that requested its value.
unsigned int RH850E1_CAN_pv::cb_read_RSCAN0RFDF04() {
  
  return m_RFIFO_RFDF0[4].first();
}
 

// Read callback for RSCAN0RFDF14 register.
// The value that this function returns, will be returned to the initiator port that requested its value.
unsigned int RH850E1_CAN_pv::cb_read_RSCAN0RFDF14() {
  
  return m_RFIFO_RFDF1[4].first();
}
 

// Read callback for RSCAN0RFID5 register.
// The value that this function returns, will be returned to the initiator port that requested its value.
unsigned int RH850E1_CAN_pv::cb_read_RSCAN0RFID5() {
  
  return m_RFIFO_RFID[5].first();
}
 

// Read callback for RSCAN0RFPTR5 register.
// The value that this function returns, will be returned to the initiator port that requested its value.
unsigned int RH850E1_CAN_pv::cb_read_RSCAN0RFPTR5() {
  
  return m_RFIFO_RFPTR[5].first();
}
 

// Read callback for RSCAN0RFDF05 register.
// The value that this function returns, will be returned to the initiator port that requested its value.
unsigned int RH850E1_CAN_pv::cb_read_RSCAN0RFDF05() {
  
  return m_RFIFO_RFDF0[5].first();
}
 

// Read callback for RSCAN0RFDF15 register.
// The value that this function returns, will be returned to the initiator port that requested its value.
unsigned int RH850E1_CAN_pv::cb_read_RSCAN0RFDF15() {
  
  return m_RFIFO_RFDF1[5].first();
}
 

// Read callback for RSCAN0RFID6 register.
// The value that this function returns, will be returned to the initiator port that requested its value.
unsigned int RH850E1_CAN_pv::cb_read_RSCAN0RFID6() {
  
  return m_RFIFO_RFID[6].first();
}
 

// Read callback for RSCAN0RFPTR6 register.
// The value that this function returns, will be returned to the initiator port that requested its value.
unsigned int RH850E1_CAN_pv::cb_read_RSCAN0RFPTR6() {
  
  return m_RFIFO_RFPTR[6].first();
}
 

// Read callback for RSCAN0RFDF06 register.
// The value that this function returns, will be returned to the initiator port that requested its value.
unsigned int RH850E1_CAN_pv::cb_read_RSCAN0RFDF06() {
  
  return m_RFIFO_RFDF0[6].first();
}
 

// Read callback for RSCAN0RFDF16 register.
// The value that this function returns, will be returned to the initiator port that requested its value.
unsigned int RH850E1_CAN_pv::cb_read_RSCAN0RFDF16() {
  
  return m_RFIFO_RFDF1[6].first();
}
 

// Read callback for RSCAN0RFID7 register.
// The value that this function returns, will be returned to the initiator port that requested its value.
unsigned int RH850E1_CAN_pv::cb_read_RSCAN0RFID7() {
  
  return m_RFIFO_RFID[7].first();
}
 

// Read callback for RSCAN0RFPTR7 register.
// The value that this function returns, will be returned to the initiator port that requested its value.
unsigned int RH850E1_CAN_pv::cb_read_RSCAN0RFPTR7() {
  
  return m_RFIFO_RFPTR[7].first();
}
 

// Read callback for RSCAN0RFDF07 register.
// The value that this function returns, will be returned to the initiator port that requested its value.
unsigned int RH850E1_CAN_pv::cb_read_RSCAN0RFDF07() {
  
  return m_RFIFO_RFDF0[7].first();
}
 

// Read callback for RSCAN0RFDF17 register.
// The value that this function returns, will be returned to the initiator port that requested its value.
unsigned int RH850E1_CAN_pv::cb_read_RSCAN0RFDF17() {
  
  return m_RFIFO_RFDF1[7].first();
}
 

// Read callback for RSCAN0CFID0 register.
// The value that this function returns, will be returned to the initiator port that requested its value.
unsigned int RH850E1_CAN_pv::cb_read_RSCAN0CFID0() {
  
  return m_CFIFO_CFID[0].first();
}
 

// Read callback for RSCAN0CFPTR0 register.
// The value that this function returns, will be returned to the initiator port that requested its value.
unsigned int RH850E1_CAN_pv::cb_read_RSCAN0CFPTR0() {
  
  return m_CFIFO_CFPTR[0].first();
}
 

// Read callback for RSCAN0CFDF00 register.
// The value that this function returns, will be returned to the initiator port that requested its value.
unsigned int RH850E1_CAN_pv::cb_read_RSCAN0CFDF00() {
  
  return m_CFIFO_CFDF0[0].first();
}
 

// Read callback for RSCAN0CFDF10 register.
// The value that this function returns, will be returned to the initiator port that requested its value.
unsigned int RH850E1_CAN_pv::cb_read_RSCAN0CFDF10() {
  
  return m_CFIFO_CFDF1[0].first();
}
 

// Read callback for RSCAN0CFID1 register.
// The value that this function returns, will be returned to the initiator port that requested its value.
unsigned int RH850E1_CAN_pv::cb_read_RSCAN0CFID1() {
  
  return m_CFIFO_CFID[1].first();
}
 

// Read callback for RSCAN0CFPTR1 register.
// The value that this function returns, will be returned to the initiator port that requested its value.
unsigned int RH850E1_CAN_pv::cb_read_RSCAN0CFPTR1() {
  
  return m_CFIFO_CFPTR[1].first();
}
 

// Read callback for RSCAN0CFDF01 register.
// The value that this function returns, will be returned to the initiator port that requested its value.
unsigned int RH850E1_CAN_pv::cb_read_RSCAN0CFDF01() {
  
  return m_CFIFO_CFDF0[1].first();
}
 

// Read callback for RSCAN0CFDF11 register.
// The value that this function returns, will be returned to the initiator port that requested its value.
unsigned int RH850E1_CAN_pv::cb_read_RSCAN0CFDF11() {
  
  return m_CFIFO_CFDF1[1].first();
}
 

// Read callback for RSCAN0CFID2 register.
// The value that this function returns, will be returned to the initiator port that requested its value.
unsigned int RH850E1_CAN_pv::cb_read_RSCAN0CFID2() {
  
  return m_CFIFO_CFID[2].first();
}
 

// Read callback for RSCAN0CFPTR2 register.
// The value that this function returns, will be returned to the initiator port that requested its value.
unsigned int RH850E1_CAN_pv::cb_read_RSCAN0CFPTR2() {
  
  return m_CFIFO_CFPTR[2].first();
}
 

// Read callback for RSCAN0CFDF02 register.
// The value that this function returns, will be returned to the initiator port that requested its value.
unsigned int RH850E1_CAN_pv::cb_read_RSCAN0CFDF02() {
  
  return m_CFIFO_CFDF0[2].first();
}
 

// Read callback for RSCAN0CFDF12 register.
// The value that this function returns, will be returned to the initiator port that requested its value.
unsigned int RH850E1_CAN_pv::cb_read_RSCAN0CFDF12() {
  
  return m_CFIFO_CFDF1[2].first();
}
 

// Read callback for RSCAN0CFID3 register.
// The value that this function returns, will be returned to the initiator port that requested its value.
unsigned int RH850E1_CAN_pv::cb_read_RSCAN0CFID3() {
  
  return m_CFIFO_CFID[3].first();
}
 

// Read callback for RSCAN0CFPTR3 register.
// The value that this function returns, will be returned to the initiator port that requested its value.
unsigned int RH850E1_CAN_pv::cb_read_RSCAN0CFPTR3() {
  
  return m_CFIFO_CFPTR[3].first();
}
 

// Read callback for RSCAN0CFDF03 register.
// The value that this function returns, will be returned to the initiator port that requested its value.
unsigned int RH850E1_CAN_pv::cb_read_RSCAN0CFDF03() {
  
  return m_CFIFO_CFDF1[3].first();
}
 

// Read callback for RSCAN0CFDF13 register.
// The value that this function returns, will be returned to the initiator port that requested its value.
unsigned int RH850E1_CAN_pv::cb_read_RSCAN0CFDF13() {
  
  return RSCAN0CFDF13;
}
 

// Read callback for RSCAN0CFID4 register.
// The value that this function returns, will be returned to the initiator port that requested its value.
unsigned int RH850E1_CAN_pv::cb_read_RSCAN0CFID4() {
  
  return m_CFIFO_CFID[4].first();
}
 

// Read callback for RSCAN0CFPTR4 register.
// The value that this function returns, will be returned to the initiator port that requested its value.
unsigned int RH850E1_CAN_pv::cb_read_RSCAN0CFPTR4() {
  
  return m_CFIFO_CFPTR[4].first();
}
 

// Read callback for RSCAN0CFDF04 register.
// The value that this function returns, will be returned to the initiator port that requested its value.
unsigned int RH850E1_CAN_pv::cb_read_RSCAN0CFDF04() {
  
  return m_CFIFO_CFDF0[4].first();
}
 

// Read callback for RSCAN0CFDF14 register.
// The value that this function returns, will be returned to the initiator port that requested its value.
unsigned int RH850E1_CAN_pv::cb_read_RSCAN0CFDF14() {
  
  return m_CFIFO_CFDF1[4].first();
}
 

// Read callback for RSCAN0CFID5 register.
// The value that this function returns, will be returned to the initiator port that requested its value.
unsigned int RH850E1_CAN_pv::cb_read_RSCAN0CFID5() {
  
  return m_CFIFO_CFID[5].first();
}
 

// Read callback for RSCAN0CFPTR5 register.
// The value that this function returns, will be returned to the initiator port that requested its value.
unsigned int RH850E1_CAN_pv::cb_read_RSCAN0CFPTR5() {
  
  return m_CFIFO_CFPTR[5].first();
}
 

// Read callback for RSCAN0CFDF05 register.
// The value that this function returns, will be returned to the initiator port that requested its value.
unsigned int RH850E1_CAN_pv::cb_read_RSCAN0CFDF05() {
  
  return m_CFIFO_CFDF0[5].first();
}
 

// Read callback for RSCAN0CFDF15 register.
// The value that this function returns, will be returned to the initiator port that requested its value.
unsigned int RH850E1_CAN_pv::cb_read_RSCAN0CFDF15() {
  
  return m_CFIFO_CFDF1[5].first();
}
 

// Read callback for RSCAN0CFID6 register.
// The value that this function returns, will be returned to the initiator port that requested its value.
unsigned int RH850E1_CAN_pv::cb_read_RSCAN0CFID6() {
  
  return m_CFIFO_CFID[6].first();
}
 

// Read callback for RSCAN0CFPTR6 register.
// The value that this function returns, will be returned to the initiator port that requested its value.
unsigned int RH850E1_CAN_pv::cb_read_RSCAN0CFPTR6() {
  
  return m_CFIFO_CFPTR[6].first();
}
 

// Read callback for RSCAN0CFDF06 register.
// The value that this function returns, will be returned to the initiator port that requested its value.
unsigned int RH850E1_CAN_pv::cb_read_RSCAN0CFDF06() {
  
  return m_CFIFO_CFDF0[6].first();
}
 

// Read callback for RSCAN0CFDF16 register.
// The value that this function returns, will be returned to the initiator port that requested its value.
unsigned int RH850E1_CAN_pv::cb_read_RSCAN0CFDF16() {
  
  return m_CFIFO_CFDF1[6].first();
}
 

// Read callback for RSCAN0CFID7 register.
// The value that this function returns, will be returned to the initiator port that requested its value.
unsigned int RH850E1_CAN_pv::cb_read_RSCAN0CFID7() {
  
  return m_CFIFO_CFID[7].first();
}
 

// Read callback for RSCAN0CFPTR7 register.
// The value that this function returns, will be returned to the initiator port that requested its value.
unsigned int RH850E1_CAN_pv::cb_read_RSCAN0CFPTR7() {
  
  return m_CFIFO_CFPTR[7].first();
}
 

// Read callback for RSCAN0CFDF07 register.
// The value that this function returns, will be returned to the initiator port that requested its value.
unsigned int RH850E1_CAN_pv::cb_read_RSCAN0CFDF07() {
  
  return m_CFIFO_CFDF0[7].first();
}
 

// Read callback for RSCAN0CFDF17 register.
// The value that this function returns, will be returned to the initiator port that requested its value.
unsigned int RH850E1_CAN_pv::cb_read_RSCAN0CFDF17() {
  
  return m_CFIFO_CFDF1[7].first();
}
 

// Read callback for RSCAN0CFID8 register.
// The value that this function returns, will be returned to the initiator port that requested its value.
unsigned int RH850E1_CAN_pv::cb_read_RSCAN0CFID8() {
  
  return m_CFIFO_CFID[8].first();
}
 

// Read callback for RSCAN0CFPTR8 register.
// The value that this function returns, will be returned to the initiator port that requested its value.
unsigned int RH850E1_CAN_pv::cb_read_RSCAN0CFPTR8() {
  
  return m_CFIFO_CFPTR[8].first();
}
 

// Read callback for RSCAN0CFDF08 register.
// The value that this function returns, will be returned to the initiator port that requested its value.
unsigned int RH850E1_CAN_pv::cb_read_RSCAN0CFDF08() {
  
  return m_CFIFO_CFDF0[8].first();
}
 

// Read callback for RSCAN0CFDF18 register.
// The value that this function returns, will be returned to the initiator port that requested its value.
unsigned int RH850E1_CAN_pv::cb_read_RSCAN0CFDF18() {
  
  return m_CFIFO_CFDF1[8].first();
}
 

// Read callback for RSCAN0CFID9 register.
// The value that this function returns, will be returned to the initiator port that requested its value.
unsigned int RH850E1_CAN_pv::cb_read_RSCAN0CFID9() {
  
  return m_CFIFO_CFID[9].first();
}
 

// Read callback for RSCAN0CFPTR9 register.
// The value that this function returns, will be returned to the initiator port that requested its value.
unsigned int RH850E1_CAN_pv::cb_read_RSCAN0CFPTR9() {
  
  return m_CFIFO_CFPTR[9].first();
}
 

// Read callback for RSCAN0CFDF09 register.
// The value that this function returns, will be returned to the initiator port that requested its value.
unsigned int RH850E1_CAN_pv::cb_read_RSCAN0CFDF09() {
  
  return m_CFIFO_CFDF0[9].first();
}
 

// Read callback for RSCAN0CFDF19 register.
// The value that this function returns, will be returned to the initiator port that requested its value.
unsigned int RH850E1_CAN_pv::cb_read_RSCAN0CFDF19() {
  
  return m_CFIFO_CFDF1[9].first();
}
 

// Read callback for RSCAN0CFID10 register.
// The value that this function returns, will be returned to the initiator port that requested its value.
unsigned int RH850E1_CAN_pv::cb_read_RSCAN0CFID10() {
  
  return m_CFIFO_CFID[10].first();
}
 

// Read callback for RSCAN0CFPTR10 register.
// The value that this function returns, will be returned to the initiator port that requested its value.
unsigned int RH850E1_CAN_pv::cb_read_RSCAN0CFPTR10() {
  
  return m_CFIFO_CFPTR[10].first();
}
 

// Read callback for RSCAN0CFDF010 register.
// The value that this function returns, will be returned to the initiator port that requested its value.
unsigned int RH850E1_CAN_pv::cb_read_RSCAN0CFDF010() {
  
  return m_CFIFO_CFDF0[10].first();
}
 

// Read callback for RSCAN0CFDF110 register.
// The value that this function returns, will be returned to the initiator port that requested its value.
unsigned int RH850E1_CAN_pv::cb_read_RSCAN0CFDF110() {
  
  return m_CFIFO_CFDF1[10].first();
}
 

// Read callback for RSCAN0CFID11 register.
// The value that this function returns, will be returned to the initiator port that requested its value.
unsigned int RH850E1_CAN_pv::cb_read_RSCAN0CFID11() {
  
  return m_CFIFO_CFID[11].first();
}
 

// Read callback for RSCAN0CFPTR11 register.
// The value that this function returns, will be returned to the initiator port that requested its value.
unsigned int RH850E1_CAN_pv::cb_read_RSCAN0CFPTR11() {
  
  return m_CFIFO_CFPTR[11].first();
}
 

// Read callback for RSCAN0CFDF011 register.
// The value that this function returns, will be returned to the initiator port that requested its value.
unsigned int RH850E1_CAN_pv::cb_read_RSCAN0CFDF011() {
  
  return m_CFIFO_CFDF0[11].first();
}
 

// Read callback for RSCAN0CFDF111 register.
// The value that this function returns, will be returned to the initiator port that requested its value.
unsigned int RH850E1_CAN_pv::cb_read_RSCAN0CFDF111() {
  
  return m_CFIFO_CFDF1[11].first();
}
  

/////////////////////////////////////////////////////////////////////////////////
// Use these functions to define the behavior of your model when there is a 
// write event on one of the registers as defined in the Model Builder form.
// These functions are called before the write callbacks on the port.
///////////////////////////////////////////////////////////////////////////////// 

// Write callback for RSCAN0C0CFG register.
// The newValue has been already assigned to the RSCAN0C0CFG register.
void RH850E1_CAN_pv::cb_write_RSCAN0C0CFG(unsigned int newValue) {
  cb_write_RSCAN0CmCFG(0);
}
 

// Write callback for RSCAN0C0CTR register.
// The newValue has been already assigned to the RSCAN0C0CTR register.
void RH850E1_CAN_pv::cb_write_RSCAN0C0CTR(unsigned int newValue) {
  cb_write_RSCAN0CmCTR(0);
}
 

// Write callback for RSCAN0C1CFG register.
// The newValue has been already assigned to the RSCAN0C1CFG register.
void RH850E1_CAN_pv::cb_write_RSCAN0C1CFG(unsigned int newValue) {
  cb_write_RSCAN0CmCFG(1);
}
 

// Write callback for RSCAN0C1CTR register.
// The newValue has been already assigned to the RSCAN0C1CTR register.
void RH850E1_CAN_pv::cb_write_RSCAN0C1CTR(unsigned int newValue) {
  cb_write_RSCAN0CmCTR(1);
}
 

// Write callback for RSCAN0C2CFG register.
// The newValue has been already assigned to the RSCAN0C2CFG register.
void RH850E1_CAN_pv::cb_write_RSCAN0C2CFG(unsigned int newValue) {
  cb_write_RSCAN0CmCFG(2);
}
 

// Write callback for RSCAN0C2CTR register.
// The newValue has been already assigned to the RSCAN0C2CTR register.
void RH850E1_CAN_pv::cb_write_RSCAN0C2CTR(unsigned int newValue) {
  cb_write_RSCAN0CmCTR(2);
}
 

// Write callback for RSCAN0C3CFG register.
// The newValue has been already assigned to the RSCAN0C3CFG register.
void RH850E1_CAN_pv::cb_write_RSCAN0C3CFG(unsigned int newValue) {
  cb_write_RSCAN0CmCFG(3);
}
 

// Write callback for RSCAN0C3CTR register.
// The newValue has been already assigned to the RSCAN0C3CTR register.
void RH850E1_CAN_pv::cb_write_RSCAN0C3CTR(unsigned int newValue) {
  cb_write_RSCAN0CmCTR(3);
}
 

// Write callback for RSCAN0GCFG register.
// The newValue has been already assigned to the RSCAN0GCFG register.
void RH850E1_CAN_pv::cb_write_RSCAN0GCFG(unsigned int newValue) {

  unsigned changed = RSCAN0GCFG ^ (RSCAN0GCFG.old_value());

  if(((changed >> 4) & 0x1)){
    update_counter();
  }

  if(((changed >> 8) & 0xF)){
    update_counter();
  }

  if(((changed >> 12) & 0x1)){
    update_counter();
  }

  if(((changed >> 13) & 0x7)){
    update_counter();
  }
  
}
 

// Write callback for RSCAN0GCTR register.
// The newValue has been already assigned to the RSCAN0GCTR register.
void RH850E1_CAN_pv::cb_write_RSCAN0GCTR(unsigned int newValue) {

  unsigned changed = RSCAN0GCTR ^ (RSCAN0GCTR.old_value());

  if(((changed >> 0) & 0x7)){
    update_GlobalMode();
  }

  if(((changed >> 10) & 0x1)){
    update_GlobalTransmitHistoryBufferOverflow();
  }

  if(((changed >> 8) & 0x1)){
    set_DLCErrorFlag(get_DLCErrorFlag());
  }

  if(((changed >> 16) & 0x1)){
    if(m_cnt->is_running() == true){
      pause_counter();
      m_cnt_val = 0;
      resume_counter();
    }else{
      m_cnt_val = 0;
    }
    RSCAN0GCTR = RSCAN0GCTR & (~(1<<16));
  }

}
 

// Write callback for RSCAN0GERFL register.
// The newValue has been already assigned to the RSCAN0GERFL register.
void RH850E1_CAN_pv::cb_write_RSCAN0GERFL(unsigned int newValue) {
  RSCAN0GERFL = RSCAN0GERFL.old_value();
  if((newValue&0x1) == 0x0){
    set_DLCErrorFlag(0);
  }
}
 

// Write callback for RSCAN0RMND0 register.
// The newValue has been already assigned to the RSCAN0RMND0 register.
void RH850E1_CAN_pv::cb_write_RSCAN0RMND0(unsigned int newValue) {
  RSCAN0RMND0 = RSCAN0RMND0.old_value();
  RSCAN0RMND0 = RSCAN0RMND0 & newValue;
}
 

// Write callback for RSCAN0RMND1 register.
// The newValue has been already assigned to the RSCAN0RMND1 register.
void RH850E1_CAN_pv::cb_write_RSCAN0RMND1(unsigned int newValue) {
  RSCAN0RMND1 = RSCAN0RMND1.old_value();
  RSCAN0RMND1 = RSCAN0RMND1 & newValue;
}
 

// Write callback for RSCAN0RFCC0 register.
// The newValue has been already assigned to the RSCAN0RFCC0 register.
void RH850E1_CAN_pv::cb_write_RSCAN0RFCC0(unsigned int newValue) {
  cb_write_RSCAN0RFCCx(0);
}
 

// Write callback for RSCAN0RFCC1 register.
// The newValue has been already assigned to the RSCAN0RFCC1 register.
void RH850E1_CAN_pv::cb_write_RSCAN0RFCC1(unsigned int newValue) {
  cb_write_RSCAN0RFCCx(1);
}
 

// Write callback for RSCAN0RFCC2 register.
// The newValue has been already assigned to the RSCAN0RFCC2 register.
void RH850E1_CAN_pv::cb_write_RSCAN0RFCC2(unsigned int newValue) {
  cb_write_RSCAN0RFCCx(2);
}
 

// Write callback for RSCAN0RFCC3 register.
// The newValue has been already assigned to the RSCAN0RFCC3 register.
void RH850E1_CAN_pv::cb_write_RSCAN0RFCC3(unsigned int newValue) {
  cb_write_RSCAN0RFCCx(3);
}
 

// Write callback for RSCAN0RFCC4 register.
// The newValue has been already assigned to the RSCAN0RFCC4 register.
void RH850E1_CAN_pv::cb_write_RSCAN0RFCC4(unsigned int newValue) {
  cb_write_RSCAN0RFCCx(4);
}
 

// Write callback for RSCAN0RFCC5 register.
// The newValue has been already assigned to the RSCAN0RFCC5 register.
void RH850E1_CAN_pv::cb_write_RSCAN0RFCC5(unsigned int newValue) {
  cb_write_RSCAN0RFCCx(5);
}
 

// Write callback for RSCAN0RFCC6 register.
// The newValue has been already assigned to the RSCAN0RFCC6 register.
void RH850E1_CAN_pv::cb_write_RSCAN0RFCC6(unsigned int newValue) {
  cb_write_RSCAN0RFCCx(6);
}
 

// Write callback for RSCAN0RFCC7 register.
// The newValue has been already assigned to the RSCAN0RFCC7 register.
void RH850E1_CAN_pv::cb_write_RSCAN0RFCC7(unsigned int newValue) {
  cb_write_RSCAN0RFCCx(7);
}
 

// Write callback for RSCAN0RFSTS0 register.
// The newValue has been already assigned to the RSCAN0RFSTS0 register.
void RH850E1_CAN_pv::cb_write_RSCAN0RFSTS0(unsigned int newValue) {
  cb_write_RSCAN0RFSTSx(0);
}
 

// Write callback for RSCAN0RFSTS1 register.
// The newValue has been already assigned to the RSCAN0RFSTS1 register.
void RH850E1_CAN_pv::cb_write_RSCAN0RFSTS1(unsigned int newValue) {
  cb_write_RSCAN0RFSTSx(1);
}
 

// Write callback for RSCAN0RFSTS2 register.
// The newValue has been already assigned to the RSCAN0RFSTS2 register.
void RH850E1_CAN_pv::cb_write_RSCAN0RFSTS2(unsigned int newValue) {
  cb_write_RSCAN0RFSTSx(2);
}
 

// Write callback for RSCAN0RFSTS3 register.
// The newValue has been already assigned to the RSCAN0RFSTS3 register.
void RH850E1_CAN_pv::cb_write_RSCAN0RFSTS3(unsigned int newValue) {
  cb_write_RSCAN0RFSTSx(3);
}
 

// Write callback for RSCAN0RFSTS4 register.
// The newValue has been already assigned to the RSCAN0RFSTS4 register.
void RH850E1_CAN_pv::cb_write_RSCAN0RFSTS4(unsigned int newValue) {
  cb_write_RSCAN0RFSTSx(4);
}
 

// Write callback for RSCAN0RFSTS5 register.
// The newValue has been already assigned to the RSCAN0RFSTS5 register.
void RH850E1_CAN_pv::cb_write_RSCAN0RFSTS5(unsigned int newValue) {
  cb_write_RSCAN0RFSTSx(5);
}
 

// Write callback for RSCAN0RFSTS6 register.
// The newValue has been already assigned to the RSCAN0RFSTS6 register.
void RH850E1_CAN_pv::cb_write_RSCAN0RFSTS6(unsigned int newValue) {
  cb_write_RSCAN0RFSTSx(6);
}
 

// Write callback for RSCAN0RFSTS7 register.
// The newValue has been already assigned to the RSCAN0RFSTS7 register.
void RH850E1_CAN_pv::cb_write_RSCAN0RFSTS7(unsigned int newValue) {
  cb_write_RSCAN0RFSTSx(7);
}
 

// Write callback for RSCAN0RFPCTR0 register.
// The newValue has been already assigned to the RSCAN0RFPCTR0 register.
void RH850E1_CAN_pv::cb_write_RSCAN0RFPCTR0(unsigned int newValue) {
  cb_write_RSCAN0RFPCTRx(0);
}
 

// Write callback for RSCAN0RFPCTR1 register.
// The newValue has been already assigned to the RSCAN0RFPCTR1 register.
void RH850E1_CAN_pv::cb_write_RSCAN0RFPCTR1(unsigned int newValue) {
  cb_write_RSCAN0RFPCTRx(1);
}
 

// Write callback for RSCAN0RFPCTR2 register.
// The newValue has been already assigned to the RSCAN0RFPCTR2 register.
void RH850E1_CAN_pv::cb_write_RSCAN0RFPCTR2(unsigned int newValue) {
  cb_write_RSCAN0RFPCTRx(2);
}
 

// Write callback for RSCAN0RFPCTR3 register.
// The newValue has been already assigned to the RSCAN0RFPCTR3 register.
void RH850E1_CAN_pv::cb_write_RSCAN0RFPCTR3(unsigned int newValue) {
  cb_write_RSCAN0RFPCTRx(3);
}
 

// Write callback for RSCAN0RFPCTR4 register.
// The newValue has been already assigned to the RSCAN0RFPCTR4 register.
void RH850E1_CAN_pv::cb_write_RSCAN0RFPCTR4(unsigned int newValue) {
  cb_write_RSCAN0RFPCTRx(4);
}
 

// Write callback for RSCAN0RFPCTR5 register.
// The newValue has been already assigned to the RSCAN0RFPCTR5 register.
void RH850E1_CAN_pv::cb_write_RSCAN0RFPCTR5(unsigned int newValue) {
  cb_write_RSCAN0RFPCTRx(5);
}
 

// Write callback for RSCAN0RFPCTR6 register.
// The newValue has been already assigned to the RSCAN0RFPCTR6 register.
void RH850E1_CAN_pv::cb_write_RSCAN0RFPCTR6(unsigned int newValue) {
  cb_write_RSCAN0RFPCTRx(6);
}
 

// Write callback for RSCAN0RFPCTR7 register.
// The newValue has been already assigned to the RSCAN0RFPCTR7 register.
void RH850E1_CAN_pv::cb_write_RSCAN0RFPCTR7(unsigned int newValue) {
  cb_write_RSCAN0RFPCTRx(7);
}
 

// Write callback for RSCAN0CFCC0 register.
// The newValue has been already assigned to the RSCAN0CFCC0 register.
void RH850E1_CAN_pv::cb_write_RSCAN0CFCC0(unsigned int newValue) {
  cb_write_RSCAN0CFCCk(0);
}
 

// Write callback for RSCAN0CFCC1 register.
// The newValue has been already assigned to the RSCAN0CFCC1 register.
void RH850E1_CAN_pv::cb_write_RSCAN0CFCC1(unsigned int newValue) {
  cb_write_RSCAN0CFCCk(1);
}
 

// Write callback for RSCAN0CFCC2 register.
// The newValue has been already assigned to the RSCAN0CFCC2 register.
void RH850E1_CAN_pv::cb_write_RSCAN0CFCC2(unsigned int newValue) {
  cb_write_RSCAN0CFCCk(2);
}
 

// Write callback for RSCAN0CFCC3 register.
// The newValue has been already assigned to the RSCAN0CFCC3 register.
void RH850E1_CAN_pv::cb_write_RSCAN0CFCC3(unsigned int newValue) {
  cb_write_RSCAN0CFCCk(3);
}
 

// Write callback for RSCAN0CFCC4 register.
// The newValue has been already assigned to the RSCAN0CFCC4 register.
void RH850E1_CAN_pv::cb_write_RSCAN0CFCC4(unsigned int newValue) {
  cb_write_RSCAN0CFCCk(4);
}
 

// Write callback for RSCAN0CFCC5 register.
// The newValue has been already assigned to the RSCAN0CFCC5 register.
void RH850E1_CAN_pv::cb_write_RSCAN0CFCC5(unsigned int newValue) {
  cb_write_RSCAN0CFCCk(5);
}
 

// Write callback for RSCAN0CFCC6 register.
// The newValue has been already assigned to the RSCAN0CFCC6 register.
void RH850E1_CAN_pv::cb_write_RSCAN0CFCC6(unsigned int newValue) {
  cb_write_RSCAN0CFCCk(6);
}
 

// Write callback for RSCAN0CFCC7 register.
// The newValue has been already assigned to the RSCAN0CFCC7 register.
void RH850E1_CAN_pv::cb_write_RSCAN0CFCC7(unsigned int newValue) {
  cb_write_RSCAN0CFCCk(7);
}
 

// Write callback for RSCAN0CFCC8 register.
// The newValue has been already assigned to the RSCAN0CFCC8 register.
void RH850E1_CAN_pv::cb_write_RSCAN0CFCC8(unsigned int newValue) {
  cb_write_RSCAN0CFCCk(8);
}
 

// Write callback for RSCAN0CFCC9 register.
// The newValue has been already assigned to the RSCAN0CFCC9 register.
void RH850E1_CAN_pv::cb_write_RSCAN0CFCC9(unsigned int newValue) {
  cb_write_RSCAN0CFCCk(9);
}
 

// Write callback for RSCAN0CFCC10 register.
// The newValue has been already assigned to the RSCAN0CFCC10 register.
void RH850E1_CAN_pv::cb_write_RSCAN0CFCC10(unsigned int newValue) {
  cb_write_RSCAN0CFCCk(10);
}
 

// Write callback for RSCAN0CFCC11 register.
// The newValue has been already assigned to the RSCAN0CFCC11 register.
void RH850E1_CAN_pv::cb_write_RSCAN0CFCC11(unsigned int newValue) {
  cb_write_RSCAN0CFCCk(11);
}
 

// Write callback for RSCAN0CFSTS0 register.
// The newValue has been already assigned to the RSCAN0CFSTS0 register.
void RH850E1_CAN_pv::cb_write_RSCAN0CFSTS0(unsigned int newValue) {
  cb_write_RSCAN0CFSTSk(0);
}
 

// Write callback for RSCAN0CFSTS1 register.
// The newValue has been already assigned to the RSCAN0CFSTS1 register.
void RH850E1_CAN_pv::cb_write_RSCAN0CFSTS1(unsigned int newValue) {
  cb_write_RSCAN0CFSTSk(1);
}
 

// Write callback for RSCAN0CFSTS2 register.
// The newValue has been already assigned to the RSCAN0CFSTS2 register.
void RH850E1_CAN_pv::cb_write_RSCAN0CFSTS2(unsigned int newValue) {
  cb_write_RSCAN0CFSTSk(2);
}
 

// Write callback for RSCAN0CFSTS3 register.
// The newValue has been already assigned to the RSCAN0CFSTS3 register.
void RH850E1_CAN_pv::cb_write_RSCAN0CFSTS3(unsigned int newValue) {
  cb_write_RSCAN0CFSTSk(3);
}
 

// Write callback for RSCAN0CFSTS4 register.
// The newValue has been already assigned to the RSCAN0CFSTS4 register.
void RH850E1_CAN_pv::cb_write_RSCAN0CFSTS4(unsigned int newValue) {
  cb_write_RSCAN0CFSTSk(4);
}
 

// Write callback for RSCAN0CFSTS5 register.
// The newValue has been already assigned to the RSCAN0CFSTS5 register.
void RH850E1_CAN_pv::cb_write_RSCAN0CFSTS5(unsigned int newValue) {
  cb_write_RSCAN0CFSTSk(5);
}
 

// Write callback for RSCAN0CFSTS6 register.
// The newValue has been already assigned to the RSCAN0CFSTS6 register.
void RH850E1_CAN_pv::cb_write_RSCAN0CFSTS6(unsigned int newValue) {
  cb_write_RSCAN0CFSTSk(6);
}
 

// Write callback for RSCAN0CFSTS7 register.
// The newValue has been already assigned to the RSCAN0CFSTS7 register.
void RH850E1_CAN_pv::cb_write_RSCAN0CFSTS7(unsigned int newValue) {
  cb_write_RSCAN0CFSTSk(7);
}
 

// Write callback for RSCAN0CFSTS8 register.
// The newValue has been already assigned to the RSCAN0CFSTS8 register.
void RH850E1_CAN_pv::cb_write_RSCAN0CFSTS8(unsigned int newValue) {
  cb_write_RSCAN0CFSTSk(8);
}
 

// Write callback for RSCAN0CFSTS9 register.
// The newValue has been already assigned to the RSCAN0CFSTS9 register.
void RH850E1_CAN_pv::cb_write_RSCAN0CFSTS9(unsigned int newValue) {
  cb_write_RSCAN0CFSTSk(9);
}
 

// Write callback for RSCAN0CFSTS10 register.
// The newValue has been already assigned to the RSCAN0CFSTS10 register.
void RH850E1_CAN_pv::cb_write_RSCAN0CFSTS10(unsigned int newValue) {
  cb_write_RSCAN0CFSTSk(10);
}
 

// Write callback for RSCAN0CFSTS11 register.
// The newValue has been already assigned to the RSCAN0CFSTS11 register.
void RH850E1_CAN_pv::cb_write_RSCAN0CFSTS11(unsigned int newValue) {
  cb_write_RSCAN0CFSTSk(11);
}
 

// Write callback for RSCAN0CFPCTR0 register.
// The newValue has been already assigned to the RSCAN0CFPCTR0 register.
void RH850E1_CAN_pv::cb_write_RSCAN0CFPCTR0(unsigned int newValue) {
  cb_write_RSCAN0CFPCTRk(0);
}
 

// Write callback for RSCAN0CFPCTR1 register.
// The newValue has been already assigned to the RSCAN0CFPCTR1 register.
void RH850E1_CAN_pv::cb_write_RSCAN0CFPCTR1(unsigned int newValue) {
  cb_write_RSCAN0CFPCTRk(1);
}
 

// Write callback for RSCAN0CFPCTR2 register.
// The newValue has been already assigned to the RSCAN0CFPCTR2 register.
void RH850E1_CAN_pv::cb_write_RSCAN0CFPCTR2(unsigned int newValue) {
  cb_write_RSCAN0CFPCTRk(2);
}
 

// Write callback for RSCAN0CFPCTR3 register.
// The newValue has been already assigned to the RSCAN0CFPCTR3 register.
void RH850E1_CAN_pv::cb_write_RSCAN0CFPCTR3(unsigned int newValue) {
  cb_write_RSCAN0CFPCTRk(3);
}
 

// Write callback for RSCAN0CFPCTR4 register.
// The newValue has been already assigned to the RSCAN0CFPCTR4 register.
void RH850E1_CAN_pv::cb_write_RSCAN0CFPCTR4(unsigned int newValue) {
  cb_write_RSCAN0CFPCTRk(4);
}
 

// Write callback for RSCAN0CFPCTR5 register.
// The newValue has been already assigned to the RSCAN0CFPCTR5 register.
void RH850E1_CAN_pv::cb_write_RSCAN0CFPCTR5(unsigned int newValue) {
  cb_write_RSCAN0CFPCTRk(5);
}
 

// Write callback for RSCAN0CFPCTR6 register.
// The newValue has been already assigned to the RSCAN0CFPCTR6 register.
void RH850E1_CAN_pv::cb_write_RSCAN0CFPCTR6(unsigned int newValue) {
  cb_write_RSCAN0CFPCTRk(6);
}
 

// Write callback for RSCAN0CFPCTR7 register.
// The newValue has been already assigned to the RSCAN0CFPCTR7 register.
void RH850E1_CAN_pv::cb_write_RSCAN0CFPCTR7(unsigned int newValue) {
  cb_write_RSCAN0CFPCTRk(7);
}
 

// Write callback for RSCAN0CFPCTR8 register.
// The newValue has been already assigned to the RSCAN0CFPCTR8 register.
void RH850E1_CAN_pv::cb_write_RSCAN0CFPCTR8(unsigned int newValue) {
  cb_write_RSCAN0CFPCTRk(8);
}
 

// Write callback for RSCAN0CFPCTR9 register.
// The newValue has been already assigned to the RSCAN0CFPCTR9 register.
void RH850E1_CAN_pv::cb_write_RSCAN0CFPCTR9(unsigned int newValue) {
  cb_write_RSCAN0CFPCTRk(9);
}
 

// Write callback for RSCAN0CFPCTR10 register.
// The newValue has been already assigned to the RSCAN0CFPCTR10 register.
void RH850E1_CAN_pv::cb_write_RSCAN0CFPCTR10(unsigned int newValue) {
  cb_write_RSCAN0CFPCTRk(10);
}
 

// Write callback for RSCAN0CFPCTR11 register.
// The newValue has been already assigned to the RSCAN0CFPCTR11 register.
void RH850E1_CAN_pv::cb_write_RSCAN0CFPCTR11(unsigned int newValue) {
  cb_write_RSCAN0CFPCTRk(11);
}
 

// Write callback for RSCAN0TMC0 register.
// The newValue has been already assigned to the RSCAN0TMC0 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TMC0(unsigned int newValue) {
  cb_write_RSCAN0TMCp(0);
}
 

// Write callback for RSCAN0TMC1 register.
// The newValue has been already assigned to the RSCAN0TMC1 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TMC1(unsigned int newValue) {
  cb_write_RSCAN0TMCp(1);
}
 

// Write callback for RSCAN0TMC2 register.
// The newValue has been already assigned to the RSCAN0TMC2 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TMC2(unsigned int newValue) {
  cb_write_RSCAN0TMCp(2);
}
 

// Write callback for RSCAN0TMC3 register.
// The newValue has been already assigned to the RSCAN0TMC3 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TMC3(unsigned int newValue) {
  cb_write_RSCAN0TMCp(3);
}
 

// Write callback for RSCAN0TMC4 register.
// The newValue has been already assigned to the RSCAN0TMC4 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TMC4(unsigned int newValue) {
  cb_write_RSCAN0TMCp(4);
}
 

// Write callback for RSCAN0TMC5 register.
// The newValue has been already assigned to the RSCAN0TMC5 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TMC5(unsigned int newValue) {
  cb_write_RSCAN0TMCp(5);
}
 

// Write callback for RSCAN0TMC6 register.
// The newValue has been already assigned to the RSCAN0TMC6 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TMC6(unsigned int newValue) {
  cb_write_RSCAN0TMCp(6);
}
 

// Write callback for RSCAN0TMC7 register.
// The newValue has been already assigned to the RSCAN0TMC7 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TMC7(unsigned int newValue) {
  cb_write_RSCAN0TMCp(7);
}
 

// Write callback for RSCAN0TMC8 register.
// The newValue has been already assigned to the RSCAN0TMC8 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TMC8(unsigned int newValue) {
  cb_write_RSCAN0TMCp(8);
}
 

// Write callback for RSCAN0TMC9 register.
// The newValue has been already assigned to the RSCAN0TMC9 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TMC9(unsigned int newValue) {
  cb_write_RSCAN0TMCp(9);
}
 

// Write callback for RSCAN0TMC10 register.
// The newValue has been already assigned to the RSCAN0TMC10 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TMC10(unsigned int newValue) {
  cb_write_RSCAN0TMCp(10);
}
 

// Write callback for RSCAN0TMC11 register.
// The newValue has been already assigned to the RSCAN0TMC11 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TMC11(unsigned int newValue) {
  cb_write_RSCAN0TMCp(11);
}
 

// Write callback for RSCAN0TMC12 register.
// The newValue has been already assigned to the RSCAN0TMC12 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TMC12(unsigned int newValue) {
  cb_write_RSCAN0TMCp(12);
}
 

// Write callback for RSCAN0TMC13 register.
// The newValue has been already assigned to the RSCAN0TMC13 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TMC13(unsigned int newValue) {
  cb_write_RSCAN0TMCp(13);
}
 

// Write callback for RSCAN0TMC14 register.
// The newValue has been already assigned to the RSCAN0TMC14 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TMC14(unsigned int newValue) {
  cb_write_RSCAN0TMCp(14);
}
 

// Write callback for RSCAN0TMC15 register.
// The newValue has been already assigned to the RSCAN0TMC15 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TMC15(unsigned int newValue) {
  cb_write_RSCAN0TMCp(15);
}
 

// Write callback for RSCAN0TMC16 register.
// The newValue has been already assigned to the RSCAN0TMC16 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TMC16(unsigned int newValue) {
  cb_write_RSCAN0TMCp(16);
}
 

// Write callback for RSCAN0TMC17 register.
// The newValue has been already assigned to the RSCAN0TMC17 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TMC17(unsigned int newValue) {
  cb_write_RSCAN0TMCp(17);
}
 

// Write callback for RSCAN0TMC18 register.
// The newValue has been already assigned to the RSCAN0TMC18 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TMC18(unsigned int newValue) {
  cb_write_RSCAN0TMCp(18);
}
 

// Write callback for RSCAN0TMC19 register.
// The newValue has been already assigned to the RSCAN0TMC19 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TMC19(unsigned int newValue) {
  cb_write_RSCAN0TMCp(19);
}
 

// Write callback for RSCAN0TMC20 register.
// The newValue has been already assigned to the RSCAN0TMC20 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TMC20(unsigned int newValue) {
  cb_write_RSCAN0TMCp(20);
}
 

// Write callback for RSCAN0TMC21 register.
// The newValue has been already assigned to the RSCAN0TMC21 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TMC21(unsigned int newValue) {
  cb_write_RSCAN0TMCp(21);
}
 

// Write callback for RSCAN0TMC22 register.
// The newValue has been already assigned to the RSCAN0TMC22 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TMC22(unsigned int newValue) {
  cb_write_RSCAN0TMCp(22);
}
 

// Write callback for RSCAN0TMC23 register.
// The newValue has been already assigned to the RSCAN0TMC23 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TMC23(unsigned int newValue) {
  cb_write_RSCAN0TMCp(23);
}
 

// Write callback for RSCAN0TMC24 register.
// The newValue has been already assigned to the RSCAN0TMC24 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TMC24(unsigned int newValue) {
  cb_write_RSCAN0TMCp(24);
}
 

// Write callback for RSCAN0TMC25 register.
// The newValue has been already assigned to the RSCAN0TMC25 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TMC25(unsigned int newValue) {
  cb_write_RSCAN0TMCp(25);
}
 

// Write callback for RSCAN0TMC26 register.
// The newValue has been already assigned to the RSCAN0TMC26 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TMC26(unsigned int newValue) {
  cb_write_RSCAN0TMCp(26);
}
 

// Write callback for RSCAN0TMC27 register.
// The newValue has been already assigned to the RSCAN0TMC27 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TMC27(unsigned int newValue) {
  cb_write_RSCAN0TMCp(27);
}
 

// Write callback for RSCAN0TMC28 register.
// The newValue has been already assigned to the RSCAN0TMC28 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TMC28(unsigned int newValue) {
  cb_write_RSCAN0TMCp(28);
}
 

// Write callback for RSCAN0TMC29 register.
// The newValue has been already assigned to the RSCAN0TMC29 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TMC29(unsigned int newValue) {
  cb_write_RSCAN0TMCp(29);
}
 

// Write callback for RSCAN0TMC30 register.
// The newValue has been already assigned to the RSCAN0TMC30 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TMC30(unsigned int newValue) {
  cb_write_RSCAN0TMCp(30);
}
 

// Write callback for RSCAN0TMC31 register.
// The newValue has been already assigned to the RSCAN0TMC31 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TMC31(unsigned int newValue) {
  cb_write_RSCAN0TMCp(31);
}
 

// Write callback for RSCAN0TMC32 register.
// The newValue has been already assigned to the RSCAN0TMC32 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TMC32(unsigned int newValue) {
  cb_write_RSCAN0TMCp(32);
}
 

// Write callback for RSCAN0TMC33 register.
// The newValue has been already assigned to the RSCAN0TMC33 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TMC33(unsigned int newValue) {
  cb_write_RSCAN0TMCp(33);
}
 

// Write callback for RSCAN0TMC34 register.
// The newValue has been already assigned to the RSCAN0TMC34 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TMC34(unsigned int newValue) {
  cb_write_RSCAN0TMCp(34);
}
 

// Write callback for RSCAN0TMC35 register.
// The newValue has been already assigned to the RSCAN0TMC35 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TMC35(unsigned int newValue) {
  cb_write_RSCAN0TMCp(35);
}
 

// Write callback for RSCAN0TMC36 register.
// The newValue has been already assigned to the RSCAN0TMC36 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TMC36(unsigned int newValue) {
  cb_write_RSCAN0TMCp(36);
}
 

// Write callback for RSCAN0TMC37 register.
// The newValue has been already assigned to the RSCAN0TMC37 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TMC37(unsigned int newValue) {
  cb_write_RSCAN0TMCp(37);
}
 

// Write callback for RSCAN0TMC38 register.
// The newValue has been already assigned to the RSCAN0TMC38 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TMC38(unsigned int newValue) {
  cb_write_RSCAN0TMCp(38);
}
 

// Write callback for RSCAN0TMC39 register.
// The newValue has been already assigned to the RSCAN0TMC39 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TMC39(unsigned int newValue) {
  cb_write_RSCAN0TMCp(39);
}
 

// Write callback for RSCAN0TMC40 register.
// The newValue has been already assigned to the RSCAN0TMC40 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TMC40(unsigned int newValue) {
  cb_write_RSCAN0TMCp(40);
}
 

// Write callback for RSCAN0TMC41 register.
// The newValue has been already assigned to the RSCAN0TMC41 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TMC41(unsigned int newValue) {
  cb_write_RSCAN0TMCp(41);
}
 

// Write callback for RSCAN0TMC42 register.
// The newValue has been already assigned to the RSCAN0TMC42 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TMC42(unsigned int newValue) {
  cb_write_RSCAN0TMCp(42);
}
 

// Write callback for RSCAN0TMC43 register.
// The newValue has been already assigned to the RSCAN0TMC43 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TMC43(unsigned int newValue) {
  cb_write_RSCAN0TMCp(43);
}
 

// Write callback for RSCAN0TMC44 register.
// The newValue has been already assigned to the RSCAN0TMC44 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TMC44(unsigned int newValue) {
  cb_write_RSCAN0TMCp(44);
}
 

// Write callback for RSCAN0TMC45 register.
// The newValue has been already assigned to the RSCAN0TMC45 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TMC45(unsigned int newValue) {
  cb_write_RSCAN0TMCp(45);
}
 

// Write callback for RSCAN0TMC46 register.
// The newValue has been already assigned to the RSCAN0TMC46 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TMC46(unsigned int newValue) {
  cb_write_RSCAN0TMCp(46);
}
 

// Write callback for RSCAN0TMC47 register.
// The newValue has been already assigned to the RSCAN0TMC47 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TMC47(unsigned int newValue) {
  cb_write_RSCAN0TMCp(47);
}
 

// Write callback for RSCAN0TMC48 register.
// The newValue has been already assigned to the RSCAN0TMC48 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TMC48(unsigned int newValue) {
  cb_write_RSCAN0TMCp(48);
}
 

// Write callback for RSCAN0TMC49 register.
// The newValue has been already assigned to the RSCAN0TMC49 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TMC49(unsigned int newValue) {
  cb_write_RSCAN0TMCp(49);
}
 

// Write callback for RSCAN0TMC50 register.
// The newValue has been already assigned to the RSCAN0TMC50 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TMC50(unsigned int newValue) {
  cb_write_RSCAN0TMCp(50);
}
 

// Write callback for RSCAN0TMC51 register.
// The newValue has been already assigned to the RSCAN0TMC51 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TMC51(unsigned int newValue) {
  cb_write_RSCAN0TMCp(51);
}
 

// Write callback for RSCAN0TMC52 register.
// The newValue has been already assigned to the RSCAN0TMC52 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TMC52(unsigned int newValue) {
  cb_write_RSCAN0TMCp(52);
}
 

// Write callback for RSCAN0TMC53 register.
// The newValue has been already assigned to the RSCAN0TMC53 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TMC53(unsigned int newValue) {
  cb_write_RSCAN0TMCp(53);
}
 

// Write callback for RSCAN0TMC54 register.
// The newValue has been already assigned to the RSCAN0TMC54 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TMC54(unsigned int newValue) {
  cb_write_RSCAN0TMCp(54);
}
 

// Write callback for RSCAN0TMC55 register.
// The newValue has been already assigned to the RSCAN0TMC55 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TMC55(unsigned int newValue) {
  cb_write_RSCAN0TMCp(55);
}
 

// Write callback for RSCAN0TMC56 register.
// The newValue has been already assigned to the RSCAN0TMC56 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TMC56(unsigned int newValue) {
  cb_write_RSCAN0TMCp(56);
}
 

// Write callback for RSCAN0TMC57 register.
// The newValue has been already assigned to the RSCAN0TMC57 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TMC57(unsigned int newValue) {
  cb_write_RSCAN0TMCp(57);
}
 

// Write callback for RSCAN0TMC58 register.
// The newValue has been already assigned to the RSCAN0TMC58 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TMC58(unsigned int newValue) {
  cb_write_RSCAN0TMCp(58);
}
 

// Write callback for RSCAN0TMC59 register.
// The newValue has been already assigned to the RSCAN0TMC59 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TMC59(unsigned int newValue) {
  cb_write_RSCAN0TMCp(59);
}
 

// Write callback for RSCAN0TMC60 register.
// The newValue has been already assigned to the RSCAN0TMC60 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TMC60(unsigned int newValue) {
  cb_write_RSCAN0TMCp(60);
}
 

// Write callback for RSCAN0TMC61 register.
// The newValue has been already assigned to the RSCAN0TMC61 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TMC61(unsigned int newValue) {
  cb_write_RSCAN0TMCp(61);
}
 

// Write callback for RSCAN0TMC62 register.
// The newValue has been already assigned to the RSCAN0TMC62 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TMC62(unsigned int newValue) {
  cb_write_RSCAN0TMCp(62);
}
 

// Write callback for RSCAN0TMC63 register.
// The newValue has been already assigned to the RSCAN0TMC63 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TMC63(unsigned int newValue) {
  cb_write_RSCAN0TMCp(63);
}
 

// Write callback for RSCAN0TMSTS0 register.
// The newValue has been already assigned to the RSCAN0TMSTS0 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TMSTS0(unsigned int newValue) {
  cb_write_RSCAN0TMSTSp(0);
}
 

// Write callback for RSCAN0TMSTS1 register.
// The newValue has been already assigned to the RSCAN0TMSTS1 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TMSTS1(unsigned int newValue) {
  cb_write_RSCAN0TMSTSp(1);
}
 

// Write callback for RSCAN0TMSTS2 register.
// The newValue has been already assigned to the RSCAN0TMSTS2 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TMSTS2(unsigned int newValue) {
  cb_write_RSCAN0TMSTSp(2);
}
 

// Write callback for RSCAN0TMSTS3 register.
// The newValue has been already assigned to the RSCAN0TMSTS3 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TMSTS3(unsigned int newValue) {
  cb_write_RSCAN0TMSTSp(3);
}
 

// Write callback for RSCAN0TMSTS4 register.
// The newValue has been already assigned to the RSCAN0TMSTS4 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TMSTS4(unsigned int newValue) {
  cb_write_RSCAN0TMSTSp(4);
}
 

// Write callback for RSCAN0TMSTS5 register.
// The newValue has been already assigned to the RSCAN0TMSTS5 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TMSTS5(unsigned int newValue) {
  cb_write_RSCAN0TMSTSp(5);
}
 

// Write callback for RSCAN0TMSTS6 register.
// The newValue has been already assigned to the RSCAN0TMSTS6 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TMSTS6(unsigned int newValue) {
  cb_write_RSCAN0TMSTSp(6);
}
 

// Write callback for RSCAN0TMSTS7 register.
// The newValue has been already assigned to the RSCAN0TMSTS7 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TMSTS7(unsigned int newValue) {
  cb_write_RSCAN0TMSTSp(7);
}
 

// Write callback for RSCAN0TMSTS8 register.
// The newValue has been already assigned to the RSCAN0TMSTS8 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TMSTS8(unsigned int newValue) {
  cb_write_RSCAN0TMSTSp(8);
}
 

// Write callback for RSCAN0TMSTS9 register.
// The newValue has been already assigned to the RSCAN0TMSTS9 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TMSTS9(unsigned int newValue) {
  cb_write_RSCAN0TMSTSp(9);
}
 

// Write callback for RSCAN0TMSTS10 register.
// The newValue has been already assigned to the RSCAN0TMSTS10 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TMSTS10(unsigned int newValue) {
  cb_write_RSCAN0TMSTSp(10);
}
 

// Write callback for RSCAN0TMSTS11 register.
// The newValue has been already assigned to the RSCAN0TMSTS11 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TMSTS11(unsigned int newValue) {
  cb_write_RSCAN0TMSTSp(11);
}
 

// Write callback for RSCAN0TMSTS12 register.
// The newValue has been already assigned to the RSCAN0TMSTS12 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TMSTS12(unsigned int newValue) {
  cb_write_RSCAN0TMSTSp(12);
}
 

// Write callback for RSCAN0TMSTS13 register.
// The newValue has been already assigned to the RSCAN0TMSTS13 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TMSTS13(unsigned int newValue) {
  cb_write_RSCAN0TMSTSp(13);
}
 

// Write callback for RSCAN0TMSTS14 register.
// The newValue has been already assigned to the RSCAN0TMSTS14 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TMSTS14(unsigned int newValue) {
  cb_write_RSCAN0TMSTSp(14);
}
 

// Write callback for RSCAN0TMSTS15 register.
// The newValue has been already assigned to the RSCAN0TMSTS15 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TMSTS15(unsigned int newValue) {
  cb_write_RSCAN0TMSTSp(15);
}
 

// Write callback for RSCAN0TMSTS16 register.
// The newValue has been already assigned to the RSCAN0TMSTS16 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TMSTS16(unsigned int newValue) {
  cb_write_RSCAN0TMSTSp(16);
}
 

// Write callback for RSCAN0TMSTS17 register.
// The newValue has been already assigned to the RSCAN0TMSTS17 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TMSTS17(unsigned int newValue) {
  cb_write_RSCAN0TMSTSp(17);
}
 

// Write callback for RSCAN0TMSTS18 register.
// The newValue has been already assigned to the RSCAN0TMSTS18 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TMSTS18(unsigned int newValue) {
  cb_write_RSCAN0TMSTSp(18);
}
 

// Write callback for RSCAN0TMSTS19 register.
// The newValue has been already assigned to the RSCAN0TMSTS19 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TMSTS19(unsigned int newValue) {
  cb_write_RSCAN0TMSTSp(19);
}
 

// Write callback for RSCAN0TMSTS20 register.
// The newValue has been already assigned to the RSCAN0TMSTS20 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TMSTS20(unsigned int newValue) {
  cb_write_RSCAN0TMSTSp(20);
}
 

// Write callback for RSCAN0TMSTS21 register.
// The newValue has been already assigned to the RSCAN0TMSTS21 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TMSTS21(unsigned int newValue) {
  cb_write_RSCAN0TMSTSp(21);
}
 

// Write callback for RSCAN0TMSTS22 register.
// The newValue has been already assigned to the RSCAN0TMSTS22 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TMSTS22(unsigned int newValue) {
  cb_write_RSCAN0TMSTSp(22);
}
 

// Write callback for RSCAN0TMSTS23 register.
// The newValue has been already assigned to the RSCAN0TMSTS23 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TMSTS23(unsigned int newValue) {
  cb_write_RSCAN0TMSTSp(23);
}
 

// Write callback for RSCAN0TMSTS24 register.
// The newValue has been already assigned to the RSCAN0TMSTS24 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TMSTS24(unsigned int newValue) {
  cb_write_RSCAN0TMSTSp(24);
}
 

// Write callback for RSCAN0TMSTS25 register.
// The newValue has been already assigned to the RSCAN0TMSTS25 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TMSTS25(unsigned int newValue) {
  cb_write_RSCAN0TMSTSp(25);
}
 

// Write callback for RSCAN0TMSTS26 register.
// The newValue has been already assigned to the RSCAN0TMSTS26 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TMSTS26(unsigned int newValue) {
  cb_write_RSCAN0TMSTSp(26);
}
 

// Write callback for RSCAN0TMSTS27 register.
// The newValue has been already assigned to the RSCAN0TMSTS27 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TMSTS27(unsigned int newValue) {
  cb_write_RSCAN0TMSTSp(27);
}
 

// Write callback for RSCAN0TMSTS28 register.
// The newValue has been already assigned to the RSCAN0TMSTS28 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TMSTS28(unsigned int newValue) {
  cb_write_RSCAN0TMSTSp(28);
}
 

// Write callback for RSCAN0TMSTS29 register.
// The newValue has been already assigned to the RSCAN0TMSTS29 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TMSTS29(unsigned int newValue) {
  cb_write_RSCAN0TMSTSp(29);
}
 

// Write callback for RSCAN0TMSTS30 register.
// The newValue has been already assigned to the RSCAN0TMSTS30 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TMSTS30(unsigned int newValue) {
  cb_write_RSCAN0TMSTSp(30);
}
 

// Write callback for RSCAN0TMSTS31 register.
// The newValue has been already assigned to the RSCAN0TMSTS31 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TMSTS31(unsigned int newValue) {
  cb_write_RSCAN0TMSTSp(31);
}
 

// Write callback for RSCAN0TMSTS32 register.
// The newValue has been already assigned to the RSCAN0TMSTS32 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TMSTS32(unsigned int newValue) {
  cb_write_RSCAN0TMSTSp(32);
}
 

// Write callback for RSCAN0TMSTS33 register.
// The newValue has been already assigned to the RSCAN0TMSTS33 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TMSTS33(unsigned int newValue) {
  cb_write_RSCAN0TMSTSp(33);
}
 

// Write callback for RSCAN0TMSTS34 register.
// The newValue has been already assigned to the RSCAN0TMSTS34 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TMSTS34(unsigned int newValue) {
  cb_write_RSCAN0TMSTSp(34);
}
 

// Write callback for RSCAN0TMSTS35 register.
// The newValue has been already assigned to the RSCAN0TMSTS35 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TMSTS35(unsigned int newValue) {
  cb_write_RSCAN0TMSTSp(35);
}
 

// Write callback for RSCAN0TMSTS36 register.
// The newValue has been already assigned to the RSCAN0TMSTS36 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TMSTS36(unsigned int newValue) {
  cb_write_RSCAN0TMSTSp(36);
}
 

// Write callback for RSCAN0TMSTS37 register.
// The newValue has been already assigned to the RSCAN0TMSTS37 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TMSTS37(unsigned int newValue) {
  cb_write_RSCAN0TMSTSp(37);
}
 

// Write callback for RSCAN0TMSTS38 register.
// The newValue has been already assigned to the RSCAN0TMSTS38 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TMSTS38(unsigned int newValue) {
  cb_write_RSCAN0TMSTSp(38);
}
 

// Write callback for RSCAN0TMSTS39 register.
// The newValue has been already assigned to the RSCAN0TMSTS39 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TMSTS39(unsigned int newValue) {
  cb_write_RSCAN0TMSTSp(39);
}
 

// Write callback for RSCAN0TMSTS40 register.
// The newValue has been already assigned to the RSCAN0TMSTS40 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TMSTS40(unsigned int newValue) {
  cb_write_RSCAN0TMSTSp(40);
}
 

// Write callback for RSCAN0TMSTS41 register.
// The newValue has been already assigned to the RSCAN0TMSTS41 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TMSTS41(unsigned int newValue) {
  cb_write_RSCAN0TMSTSp(41);
}
 

// Write callback for RSCAN0TMSTS42 register.
// The newValue has been already assigned to the RSCAN0TMSTS42 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TMSTS42(unsigned int newValue) {
  cb_write_RSCAN0TMSTSp(42);
}
 

// Write callback for RSCAN0TMSTS43 register.
// The newValue has been already assigned to the RSCAN0TMSTS43 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TMSTS43(unsigned int newValue) {
  cb_write_RSCAN0TMSTSp(43);
}
 

// Write callback for RSCAN0TMSTS44 register.
// The newValue has been already assigned to the RSCAN0TMSTS44 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TMSTS44(unsigned int newValue) {
  cb_write_RSCAN0TMSTSp(44);
}
 

// Write callback for RSCAN0TMSTS45 register.
// The newValue has been already assigned to the RSCAN0TMSTS45 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TMSTS45(unsigned int newValue) {
  cb_write_RSCAN0TMSTSp(45);
}
 

// Write callback for RSCAN0TMSTS46 register.
// The newValue has been already assigned to the RSCAN0TMSTS46 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TMSTS46(unsigned int newValue) {
  cb_write_RSCAN0TMSTSp(46);
}
 

// Write callback for RSCAN0TMSTS47 register.
// The newValue has been already assigned to the RSCAN0TMSTS47 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TMSTS47(unsigned int newValue) {
  cb_write_RSCAN0TMSTSp(47);
}
 

// Write callback for RSCAN0TMSTS48 register.
// The newValue has been already assigned to the RSCAN0TMSTS48 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TMSTS48(unsigned int newValue) {
  cb_write_RSCAN0TMSTSp(48);
}
 

// Write callback for RSCAN0TMSTS49 register.
// The newValue has been already assigned to the RSCAN0TMSTS49 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TMSTS49(unsigned int newValue) {
  cb_write_RSCAN0TMSTSp(49);
}
 

// Write callback for RSCAN0TMSTS50 register.
// The newValue has been already assigned to the RSCAN0TMSTS50 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TMSTS50(unsigned int newValue) {
  cb_write_RSCAN0TMSTSp(50);
}
 

// Write callback for RSCAN0TMSTS51 register.
// The newValue has been already assigned to the RSCAN0TMSTS51 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TMSTS51(unsigned int newValue) {
  cb_write_RSCAN0TMSTSp(51);
}
 

// Write callback for RSCAN0TMSTS52 register.
// The newValue has been already assigned to the RSCAN0TMSTS52 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TMSTS52(unsigned int newValue) {
  cb_write_RSCAN0TMSTSp(52);
}
 

// Write callback for RSCAN0TMSTS53 register.
// The newValue has been already assigned to the RSCAN0TMSTS53 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TMSTS53(unsigned int newValue) {
  cb_write_RSCAN0TMSTSp(53);
}
 

// Write callback for RSCAN0TMSTS54 register.
// The newValue has been already assigned to the RSCAN0TMSTS54 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TMSTS54(unsigned int newValue) {
  cb_write_RSCAN0TMSTSp(54);
}
 

// Write callback for RSCAN0TMSTS55 register.
// The newValue has been already assigned to the RSCAN0TMSTS55 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TMSTS55(unsigned int newValue) {
  cb_write_RSCAN0TMSTSp(55);
}
 

// Write callback for RSCAN0TMSTS56 register.
// The newValue has been already assigned to the RSCAN0TMSTS56 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TMSTS56(unsigned int newValue) {
  cb_write_RSCAN0TMSTSp(56);
}
 

// Write callback for RSCAN0TMSTS57 register.
// The newValue has been already assigned to the RSCAN0TMSTS57 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TMSTS57(unsigned int newValue) {
  cb_write_RSCAN0TMSTSp(57);
}
 

// Write callback for RSCAN0TMSTS58 register.
// The newValue has been already assigned to the RSCAN0TMSTS58 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TMSTS58(unsigned int newValue) {
  cb_write_RSCAN0TMSTSp(58);
}
 

// Write callback for RSCAN0TMSTS59 register.
// The newValue has been already assigned to the RSCAN0TMSTS59 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TMSTS59(unsigned int newValue) {
  cb_write_RSCAN0TMSTSp(59);
}
 

// Write callback for RSCAN0TMSTS60 register.
// The newValue has been already assigned to the RSCAN0TMSTS60 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TMSTS60(unsigned int newValue) {
  cb_write_RSCAN0TMSTSp(60);
}
 

// Write callback for RSCAN0TMSTS61 register.
// The newValue has been already assigned to the RSCAN0TMSTS61 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TMSTS61(unsigned int newValue) {
  cb_write_RSCAN0TMSTSp(61);
}
 

// Write callback for RSCAN0TMSTS62 register.
// The newValue has been already assigned to the RSCAN0TMSTS62 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TMSTS62(unsigned int newValue) {
  cb_write_RSCAN0TMSTSp(62);
}
 

// Write callback for RSCAN0TMSTS63 register.
// The newValue has been already assigned to the RSCAN0TMSTS63 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TMSTS63(unsigned int newValue) {
  cb_write_RSCAN0TMSTSp(63);
}
 

// Write callback for RSCAN0TXQCC0 register.
// The newValue has been already assigned to the RSCAN0TXQCC0 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TXQCC0(unsigned int newValue) {
  cb_write_RSCAN0TXQCCm(0);
}
 

// Write callback for RSCAN0TXQCC1 register.
// The newValue has been already assigned to the RSCAN0TXQCC1 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TXQCC1(unsigned int newValue) {
  cb_write_RSCAN0TXQCCm(1);
}
 

// Write callback for RSCAN0TXQCC2 register.
// The newValue has been already assigned to the RSCAN0TXQCC2 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TXQCC2(unsigned int newValue) {
  cb_write_RSCAN0TXQCCm(2);
}
 

// Write callback for RSCAN0TXQCC3 register.
// The newValue has been already assigned to the RSCAN0TXQCC3 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TXQCC3(unsigned int newValue) {
  cb_write_RSCAN0TXQCCm(3);
}
 

// Write callback for RSCAN0TXQSTS0 register.
// The newValue has been already assigned to the RSCAN0TXQSTS0 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TXQSTS0(unsigned int newValue) {
  cb_write_RSCAN0TXQSTSm(0);
}
 

// Write callback for RSCAN0TXQSTS1 register.
// The newValue has been already assigned to the RSCAN0TXQSTS1 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TXQSTS1(unsigned int newValue) {
  cb_write_RSCAN0TXQSTSm(1);
}
 

// Write callback for RSCAN0TXQSTS2 register.
// The newValue has been already assigned to the RSCAN0TXQSTS2 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TXQSTS2(unsigned int newValue) {
  cb_write_RSCAN0TXQSTSm(2);
}
 

// Write callback for RSCAN0TXQSTS3 register.
// The newValue has been already assigned to the RSCAN0TXQSTS3 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TXQSTS3(unsigned int newValue) {
  cb_write_RSCAN0TXQSTSm(3);
}
 

// Write callback for RSCAN0TXQPCTR0 register.
// The newValue has been already assigned to the RSCAN0TXQPCTR0 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TXQPCTR0(unsigned int newValue) {
  cb_write_RSCAN0TXQPCTRm(0);
}
 

// Write callback for RSCAN0TXQPCTR1 register.
// The newValue has been already assigned to the RSCAN0TXQPCTR1 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TXQPCTR1(unsigned int newValue) {
  cb_write_RSCAN0TXQPCTRm(1);
}
 

// Write callback for RSCAN0TXQPCTR2 register.
// The newValue has been already assigned to the RSCAN0TXQPCTR2 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TXQPCTR2(unsigned int newValue) {
  cb_write_RSCAN0TXQPCTRm(2);
}
 

// Write callback for RSCAN0TXQPCTR3 register.
// The newValue has been already assigned to the RSCAN0TXQPCTR3 register.
void RH850E1_CAN_pv::cb_write_RSCAN0TXQPCTR3(unsigned int newValue) {
  cb_write_RSCAN0TXQPCTRm(3);
}
 

// Write callback for RSCAN0THLCC0 register.
// The newValue has been already assigned to the RSCAN0THLCC0 register.
void RH850E1_CAN_pv::cb_write_RSCAN0THLCC0(unsigned int newValue) {
  cb_write_RSCAN0THLCCm(0);
}
 

// Write callback for RSCAN0THLCC1 register.
// The newValue has been already assigned to the RSCAN0THLCC1 register.
void RH850E1_CAN_pv::cb_write_RSCAN0THLCC1(unsigned int newValue) {
  cb_write_RSCAN0THLCCm(1);
}
 

// Write callback for RSCAN0THLCC2 register.
// The newValue has been already assigned to the RSCAN0THLCC2 register.
void RH850E1_CAN_pv::cb_write_RSCAN0THLCC2(unsigned int newValue) {
  cb_write_RSCAN0THLCCm(2);
}
 

// Write callback for RSCAN0THLCC3 register.
// The newValue has been already assigned to the RSCAN0THLCC3 register.
void RH850E1_CAN_pv::cb_write_RSCAN0THLCC3(unsigned int newValue) {
  cb_write_RSCAN0THLCCm(3);
}
 

// Write callback for RSCAN0THLSTS0 register.
// The newValue has been already assigned to the RSCAN0THLSTS0 register.
void RH850E1_CAN_pv::cb_write_RSCAN0THLSTS0(unsigned int newValue) {
  cb_write_RSCAN0THLSTSm(0);
}
 

// Write callback for RSCAN0THLSTS1 register.
// The newValue has been already assigned to the RSCAN0THLSTS1 register.
void RH850E1_CAN_pv::cb_write_RSCAN0THLSTS1(unsigned int newValue) {
  cb_write_RSCAN0THLSTSm(1);
}
 

// Write callback for RSCAN0THLSTS2 register.
// The newValue has been already assigned to the RSCAN0THLSTS2 register.
void RH850E1_CAN_pv::cb_write_RSCAN0THLSTS2(unsigned int newValue) {
  cb_write_RSCAN0THLSTSm(2);
}
 

// Write callback for RSCAN0THLSTS3 register.
// The newValue has been already assigned to the RSCAN0THLSTS3 register.
void RH850E1_CAN_pv::cb_write_RSCAN0THLSTS3(unsigned int newValue) {
  cb_write_RSCAN0THLSTSm(3);
}
 

// Write callback for RSCAN0THLPCTR0 register.
// The newValue has been already assigned to the RSCAN0THLPCTR0 register.
void RH850E1_CAN_pv::cb_write_RSCAN0THLPCTR0(unsigned int newValue) {
  cb_write_RSCAN0THLPCTRm(0);
}
 

// Write callback for RSCAN0THLPCTR1 register.
// The newValue has been already assigned to the RSCAN0THLPCTR1 register.
void RH850E1_CAN_pv::cb_write_RSCAN0THLPCTR1(unsigned int newValue) {
  cb_write_RSCAN0THLPCTRm(1);
}
 

// Write callback for RSCAN0THLPCTR2 register.
// The newValue has been already assigned to the RSCAN0THLPCTR2 register.
void RH850E1_CAN_pv::cb_write_RSCAN0THLPCTR2(unsigned int newValue) {
  cb_write_RSCAN0THLPCTRm(2);
}
 

// Write callback for RSCAN0THLPCTR3 register.
// The newValue has been already assigned to the RSCAN0THLPCTR3 register.
void RH850E1_CAN_pv::cb_write_RSCAN0THLPCTR3(unsigned int newValue) {
  cb_write_RSCAN0THLPCTRm(3);
}
 

// Write callback for RSCAN0GAFLID0 register.
// The newValue has been already assigned to the RSCAN0GAFLID0 register.
void RH850E1_CAN_pv::cb_write_RSCAN0GAFLID0(unsigned int newValue) {
  cb_write_RSCAN0GAFLIDj(0);
}
 

// Write callback for RSCAN0GAFLM0 register.
// The newValue has been already assigned to the RSCAN0GAFLM0 register.
void RH850E1_CAN_pv::cb_write_RSCAN0GAFLM0(unsigned int newValue) {
  cb_write_RSCAN0GAFLMj(0);
}
 

// Write callback for RSCAN0GAFLP00 register.
// The newValue has been already assigned to the RSCAN0GAFLP00 register.
void RH850E1_CAN_pv::cb_write_RSCAN0GAFLP00(unsigned int newValue) {
  cb_write_RSCAN0GAFLP0j(0);
}
 

// Write callback for RSCAN0GAFLP10 register.
// The newValue has been already assigned to the RSCAN0GAFLP10 register.
void RH850E1_CAN_pv::cb_write_RSCAN0GAFLP10(unsigned int newValue) {
  cb_write_RSCAN0GAFLP1j(0);
}
 

// Write callback for RSCAN0GAFLID1 register.
// The newValue has been already assigned to the RSCAN0GAFLID1 register.
void RH850E1_CAN_pv::cb_write_RSCAN0GAFLID1(unsigned int newValue) {
  cb_write_RSCAN0GAFLIDj(1);
}
 

// Write callback for RSCAN0GAFLM1 register.
// The newValue has been already assigned to the RSCAN0GAFLM1 register.
void RH850E1_CAN_pv::cb_write_RSCAN0GAFLM1(unsigned int newValue) {
  cb_write_RSCAN0GAFLMj(1);
}
 

// Write callback for RSCAN0GAFLP01 register.
// The newValue has been already assigned to the RSCAN0GAFLP01 register.
void RH850E1_CAN_pv::cb_write_RSCAN0GAFLP01(unsigned int newValue) {
  cb_write_RSCAN0GAFLP0j(1);
}
 

// Write callback for RSCAN0GAFLP11 register.
// The newValue has been already assigned to the RSCAN0GAFLP11 register.
void RH850E1_CAN_pv::cb_write_RSCAN0GAFLP11(unsigned int newValue) {
  cb_write_RSCAN0GAFLP1j(1);
}
 

// Write callback for RSCAN0GAFLID2 register.
// The newValue has been already assigned to the RSCAN0GAFLID2 register.
void RH850E1_CAN_pv::cb_write_RSCAN0GAFLID2(unsigned int newValue) {
  cb_write_RSCAN0GAFLIDj(2);
}
 

// Write callback for RSCAN0GAFLM2 register.
// The newValue has been already assigned to the RSCAN0GAFLM2 register.
void RH850E1_CAN_pv::cb_write_RSCAN0GAFLM2(unsigned int newValue) {
  cb_write_RSCAN0GAFLMj(2);
}
 

// Write callback for RSCAN0GAFLP02 register.
// The newValue has been already assigned to the RSCAN0GAFLP02 register.
void RH850E1_CAN_pv::cb_write_RSCAN0GAFLP02(unsigned int newValue) {
  cb_write_RSCAN0GAFLP0j(2);
}
 

// Write callback for RSCAN0GAFLP12 register.
// The newValue has been already assigned to the RSCAN0GAFLP12 register.
void RH850E1_CAN_pv::cb_write_RSCAN0GAFLP12(unsigned int newValue) {
  cb_write_RSCAN0GAFLP1j(2);
}
 

// Write callback for RSCAN0GAFLID3 register.
// The newValue has been already assigned to the RSCAN0GAFLID3 register.
void RH850E1_CAN_pv::cb_write_RSCAN0GAFLID3(unsigned int newValue) {
  cb_write_RSCAN0GAFLIDj(3);
}
 

// Write callback for RSCAN0GAFLM3 register.
// The newValue has been already assigned to the RSCAN0GAFLM3 register.
void RH850E1_CAN_pv::cb_write_RSCAN0GAFLM3(unsigned int newValue) {
  cb_write_RSCAN0GAFLMj(3);
}
 

// Write callback for RSCAN0GAFLP03 register.
// The newValue has been already assigned to the RSCAN0GAFLP03 register.
void RH850E1_CAN_pv::cb_write_RSCAN0GAFLP03(unsigned int newValue) {
  cb_write_RSCAN0GAFLP0j(3);
}
 

// Write callback for RSCAN0GAFLP13 register.
// The newValue has been already assigned to the RSCAN0GAFLP13 register.
void RH850E1_CAN_pv::cb_write_RSCAN0GAFLP13(unsigned int newValue) {
  cb_write_RSCAN0GAFLP1j(3);
}
 

// Write callback for RSCAN0GAFLID4 register.
// The newValue has been already assigned to the RSCAN0GAFLID4 register.
void RH850E1_CAN_pv::cb_write_RSCAN0GAFLID4(unsigned int newValue) {
  cb_write_RSCAN0GAFLIDj(4);
}
 

// Write callback for RSCAN0GAFLM4 register.
// The newValue has been already assigned to the RSCAN0GAFLM4 register.
void RH850E1_CAN_pv::cb_write_RSCAN0GAFLM4(unsigned int newValue) {
  cb_write_RSCAN0GAFLMj(4);
}
 

// Write callback for RSCAN0GAFLP04 register.
// The newValue has been already assigned to the RSCAN0GAFLP04 register.
void RH850E1_CAN_pv::cb_write_RSCAN0GAFLP04(unsigned int newValue) {
  cb_write_RSCAN0GAFLP0j(4);
}
 

// Write callback for RSCAN0GAFLP14 register.
// The newValue has been already assigned to the RSCAN0GAFLP14 register.
void RH850E1_CAN_pv::cb_write_RSCAN0GAFLP14(unsigned int newValue) {
  cb_write_RSCAN0GAFLP1j(4);
}
 

// Write callback for RSCAN0GAFLID5 register.
// The newValue has been already assigned to the RSCAN0GAFLID5 register.
void RH850E1_CAN_pv::cb_write_RSCAN0GAFLID5(unsigned int newValue) {
  cb_write_RSCAN0GAFLIDj(5);
}
 

// Write callback for RSCAN0GAFLM5 register.
// The newValue has been already assigned to the RSCAN0GAFLM5 register.
void RH850E1_CAN_pv::cb_write_RSCAN0GAFLM5(unsigned int newValue) {
  cb_write_RSCAN0GAFLMj(5);
}
 

// Write callback for RSCAN0GAFLP05 register.
// The newValue has been already assigned to the RSCAN0GAFLP05 register.
void RH850E1_CAN_pv::cb_write_RSCAN0GAFLP05(unsigned int newValue) {
  cb_write_RSCAN0GAFLP0j(5);
}
 

// Write callback for RSCAN0GAFLP15 register.
// The newValue has been already assigned to the RSCAN0GAFLP15 register.
void RH850E1_CAN_pv::cb_write_RSCAN0GAFLP15(unsigned int newValue) {
  cb_write_RSCAN0GAFLP1j(5);
}
 

// Write callback for RSCAN0GAFLID6 register.
// The newValue has been already assigned to the RSCAN0GAFLID6 register.
void RH850E1_CAN_pv::cb_write_RSCAN0GAFLID6(unsigned int newValue) {
  cb_write_RSCAN0GAFLIDj(6);
}
 

// Write callback for RSCAN0GAFLM6 register.
// The newValue has been already assigned to the RSCAN0GAFLM6 register.
void RH850E1_CAN_pv::cb_write_RSCAN0GAFLM6(unsigned int newValue) {
  cb_write_RSCAN0GAFLMj(6);
}
 

// Write callback for RSCAN0GAFLP06 register.
// The newValue has been already assigned to the RSCAN0GAFLP06 register.
void RH850E1_CAN_pv::cb_write_RSCAN0GAFLP06(unsigned int newValue) {
  cb_write_RSCAN0GAFLP0j(6);
}
 

// Write callback for RSCAN0GAFLP16 register.
// The newValue has been already assigned to the RSCAN0GAFLP16 register.
void RH850E1_CAN_pv::cb_write_RSCAN0GAFLP16(unsigned int newValue) {
  cb_write_RSCAN0GAFLP1j(6);
}
 

// Write callback for RSCAN0GAFLID7 register.
// The newValue has been already assigned to the RSCAN0GAFLID7 register.
void RH850E1_CAN_pv::cb_write_RSCAN0GAFLID7(unsigned int newValue) {
  cb_write_RSCAN0GAFLIDj(7);
}
 

// Write callback for RSCAN0GAFLM7 register.
// The newValue has been already assigned to the RSCAN0GAFLM7 register.
void RH850E1_CAN_pv::cb_write_RSCAN0GAFLM7(unsigned int newValue) {
  cb_write_RSCAN0GAFLMj(7);
}
 

// Write callback for RSCAN0GAFLP07 register.
// The newValue has been already assigned to the RSCAN0GAFLP07 register.
void RH850E1_CAN_pv::cb_write_RSCAN0GAFLP07(unsigned int newValue) {
  cb_write_RSCAN0GAFLP0j(7);
}
 

// Write callback for RSCAN0GAFLP17 register.
// The newValue has been already assigned to the RSCAN0GAFLP17 register.
void RH850E1_CAN_pv::cb_write_RSCAN0GAFLP17(unsigned int newValue) {
  cb_write_RSCAN0GAFLP1j(7);
}
 

// Write callback for RSCAN0GAFLID8 register.
// The newValue has been already assigned to the RSCAN0GAFLID8 register.
void RH850E1_CAN_pv::cb_write_RSCAN0GAFLID8(unsigned int newValue) {
  cb_write_RSCAN0GAFLIDj(8);
}
 

// Write callback for RSCAN0GAFLM8 register.
// The newValue has been already assigned to the RSCAN0GAFLM8 register.
void RH850E1_CAN_pv::cb_write_RSCAN0GAFLM8(unsigned int newValue) {
  cb_write_RSCAN0GAFLMj(8);
}
 

// Write callback for RSCAN0GAFLP08 register.
// The newValue has been already assigned to the RSCAN0GAFLP08 register.
void RH850E1_CAN_pv::cb_write_RSCAN0GAFLP08(unsigned int newValue) {
  cb_write_RSCAN0GAFLP0j(8);
}
 

// Write callback for RSCAN0GAFLP18 register.
// The newValue has been already assigned to the RSCAN0GAFLP18 register.
void RH850E1_CAN_pv::cb_write_RSCAN0GAFLP18(unsigned int newValue) {
  cb_write_RSCAN0GAFLP1j(8);
}
 

// Write callback for RSCAN0GAFLID9 register.
// The newValue has been already assigned to the RSCAN0GAFLID9 register.
void RH850E1_CAN_pv::cb_write_RSCAN0GAFLID9(unsigned int newValue) {
  cb_write_RSCAN0GAFLIDj(9);
}
 

// Write callback for RSCAN0GAFLM9 register.
// The newValue has been already assigned to the RSCAN0GAFLM9 register.
void RH850E1_CAN_pv::cb_write_RSCAN0GAFLM9(unsigned int newValue) {
  cb_write_RSCAN0GAFLMj(9);
}
 

// Write callback for RSCAN0GAFLP09 register.
// The newValue has been already assigned to the RSCAN0GAFLP09 register.
void RH850E1_CAN_pv::cb_write_RSCAN0GAFLP09(unsigned int newValue) {
  cb_write_RSCAN0GAFLP0j(9);
}
 

// Write callback for RSCAN0GAFLP19 register.
// The newValue has been already assigned to the RSCAN0GAFLP19 register.
void RH850E1_CAN_pv::cb_write_RSCAN0GAFLP19(unsigned int newValue) {
  cb_write_RSCAN0GAFLP1j(9);
}
 

// Write callback for RSCAN0GAFLID10 register.
// The newValue has been already assigned to the RSCAN0GAFLID10 register.
void RH850E1_CAN_pv::cb_write_RSCAN0GAFLID10(unsigned int newValue) {
  cb_write_RSCAN0GAFLIDj(10);
}
 

// Write callback for RSCAN0GAFLM10 register.
// The newValue has been already assigned to the RSCAN0GAFLM10 register.
void RH850E1_CAN_pv::cb_write_RSCAN0GAFLM10(unsigned int newValue) {
  cb_write_RSCAN0GAFLMj(10);
}
 

// Write callback for RSCAN0GAFLP010 register.
// The newValue has been already assigned to the RSCAN0GAFLP010 register.
void RH850E1_CAN_pv::cb_write_RSCAN0GAFLP010(unsigned int newValue) {
  cb_write_RSCAN0GAFLP0j(10);
}
 

// Write callback for RSCAN0GAFLP110 register.
// The newValue has been already assigned to the RSCAN0GAFLP110 register.
void RH850E1_CAN_pv::cb_write_RSCAN0GAFLP110(unsigned int newValue) {
  cb_write_RSCAN0GAFLP1j(10);
}
 

// Write callback for RSCAN0GAFLID11 register.
// The newValue has been already assigned to the RSCAN0GAFLID11 register.
void RH850E1_CAN_pv::cb_write_RSCAN0GAFLID11(unsigned int newValue) {
  cb_write_RSCAN0GAFLIDj(11);
}
 

// Write callback for RSCAN0GAFLM11 register.
// The newValue has been already assigned to the RSCAN0GAFLM11 register.
void RH850E1_CAN_pv::cb_write_RSCAN0GAFLM11(unsigned int newValue) {
  cb_write_RSCAN0GAFLMj(11);
}
 

// Write callback for RSCAN0GAFLP011 register.
// The newValue has been already assigned to the RSCAN0GAFLP011 register.
void RH850E1_CAN_pv::cb_write_RSCAN0GAFLP011(unsigned int newValue) {
  cb_write_RSCAN0GAFLP0j(11);
}
 

// Write callback for RSCAN0GAFLP111 register.
// The newValue has been already assigned to the RSCAN0GAFLP111 register.
void RH850E1_CAN_pv::cb_write_RSCAN0GAFLP111(unsigned int newValue) {
  cb_write_RSCAN0GAFLP1j(11);
}
 

// Write callback for RSCAN0GAFLID12 register.
// The newValue has been already assigned to the RSCAN0GAFLID12 register.
void RH850E1_CAN_pv::cb_write_RSCAN0GAFLID12(unsigned int newValue) {
  cb_write_RSCAN0GAFLIDj(12);
}
 

// Write callback for RSCAN0GAFLM12 register.
// The newValue has been already assigned to the RSCAN0GAFLM12 register.
void RH850E1_CAN_pv::cb_write_RSCAN0GAFLM12(unsigned int newValue) {
  cb_write_RSCAN0GAFLMj(12);
}
 

// Write callback for RSCAN0GAFLP012 register.
// The newValue has been already assigned to the RSCAN0GAFLP012 register.
void RH850E1_CAN_pv::cb_write_RSCAN0GAFLP012(unsigned int newValue) {
  cb_write_RSCAN0GAFLP0j(12);
}
 

// Write callback for RSCAN0GAFLP112 register.
// The newValue has been already assigned to the RSCAN0GAFLP112 register.
void RH850E1_CAN_pv::cb_write_RSCAN0GAFLP112(unsigned int newValue) {
  cb_write_RSCAN0GAFLP1j(12);
}
 

// Write callback for RSCAN0GAFLID13 register.
// The newValue has been already assigned to the RSCAN0GAFLID13 register.
void RH850E1_CAN_pv::cb_write_RSCAN0GAFLID13(unsigned int newValue) {
  cb_write_RSCAN0GAFLIDj(13);
}
 

// Write callback for RSCAN0GAFLM13 register.
// The newValue has been already assigned to the RSCAN0GAFLM13 register.
void RH850E1_CAN_pv::cb_write_RSCAN0GAFLM13(unsigned int newValue) {
  cb_write_RSCAN0GAFLMj(13);
}
 

// Write callback for RSCAN0GAFLP013 register.
// The newValue has been already assigned to the RSCAN0GAFLP013 register.
void RH850E1_CAN_pv::cb_write_RSCAN0GAFLP013(unsigned int newValue) {
  cb_write_RSCAN0GAFLP0j(13);
}
 

// Write callback for RSCAN0GAFLP113 register.
// The newValue has been already assigned to the RSCAN0GAFLP113 register.
void RH850E1_CAN_pv::cb_write_RSCAN0GAFLP113(unsigned int newValue) {
  cb_write_RSCAN0GAFLP1j(13);
}
 

// Write callback for RSCAN0GAFLID14 register.
// The newValue has been already assigned to the RSCAN0GAFLID14 register.
void RH850E1_CAN_pv::cb_write_RSCAN0GAFLID14(unsigned int newValue) {
  cb_write_RSCAN0GAFLIDj(14);
}
 

// Write callback for RSCAN0GAFLM14 register.
// The newValue has been already assigned to the RSCAN0GAFLM14 register.
void RH850E1_CAN_pv::cb_write_RSCAN0GAFLM14(unsigned int newValue) {
  cb_write_RSCAN0GAFLMj(14);
}
 

// Write callback for RSCAN0GAFLP014 register.
// The newValue has been already assigned to the RSCAN0GAFLP014 register.
void RH850E1_CAN_pv::cb_write_RSCAN0GAFLP014(unsigned int newValue) {
  cb_write_RSCAN0GAFLP0j(14);
}
 

// Write callback for RSCAN0GAFLP114 register.
// The newValue has been already assigned to the RSCAN0GAFLP114 register.
void RH850E1_CAN_pv::cb_write_RSCAN0GAFLP114(unsigned int newValue) {
  cb_write_RSCAN0GAFLP1j(14);
}
 

// Write callback for RSCAN0GAFLID15 register.
// The newValue has been already assigned to the RSCAN0GAFLID15 register.
void RH850E1_CAN_pv::cb_write_RSCAN0GAFLID15(unsigned int newValue) {
  cb_write_RSCAN0GAFLIDj(15);
}
 

// Write callback for RSCAN0GAFLM15 register.
// The newValue has been already assigned to the RSCAN0GAFLM15 register.
void RH850E1_CAN_pv::cb_write_RSCAN0GAFLM15(unsigned int newValue) {
  cb_write_RSCAN0GAFLMj(15);
}
 

// Write callback for RSCAN0GAFLP015 register.
// The newValue has been already assigned to the RSCAN0GAFLP015 register.
void RH850E1_CAN_pv::cb_write_RSCAN0GAFLP015(unsigned int newValue) {
  cb_write_RSCAN0GAFLP0j(15);
}
 

// Write callback for RSCAN0GAFLP115 register.
// The newValue has been already assigned to the RSCAN0GAFLP115 register.
void RH850E1_CAN_pv::cb_write_RSCAN0GAFLP115(unsigned int newValue) {
  cb_write_RSCAN0GAFLP1j(15);
}
  


// Read callback for reg port.
// Returns true when successful.
bool RH850E1_CAN_pv::reg_callback_read(mb_address_type address, unsigned char* data, unsigned size) {
  
  return true;
}


// Read callback for RX0 port.
// Returns true when successful.
bool RH850E1_CAN_pv::RX0_callback_read(mb_address_type address, unsigned char* data, unsigned size) {
  
  return true;
}


// Read callback for RX1 port.
// Returns true when successful.
bool RH850E1_CAN_pv::RX1_callback_read(mb_address_type address, unsigned char* data, unsigned size) {
  
  return true;
}


// Read callback for RX2 port.
// Returns true when successful.
bool RH850E1_CAN_pv::RX2_callback_read(mb_address_type address, unsigned char* data, unsigned size) {
  
  return true;
}


// Read callback for RX3 port.
// Returns true when successful.
bool RH850E1_CAN_pv::RX3_callback_read(mb_address_type address, unsigned char* data, unsigned size) {
  
  return true;
}

// Write callback for reg port.
// Returns true when successful.
bool RH850E1_CAN_pv::reg_callback_write(mb_address_type address, unsigned char* data, unsigned size) {
  
  return true;
} 

// Write callback for RX0 port.
// Returns true when successful.
bool RH850E1_CAN_pv::RX0_callback_write(mb_address_type address, unsigned char* data, unsigned size) {
  RX_callback_write(0,data,size);
  return true;
} 

// Write callback for RX1 port.
// Returns true when successful.
bool RH850E1_CAN_pv::RX1_callback_write(mb_address_type address, unsigned char* data, unsigned size) {
  RX_callback_write(1,data,size);
  return true;
} 

// Write callback for RX2 port.
// Returns true when successful.
bool RH850E1_CAN_pv::RX2_callback_write(mb_address_type address, unsigned char* data, unsigned size) {
  RX_callback_write(2,data,size);
  return true;
} 

// Write callback for RX3 port.
// Returns true when successful.
bool RH850E1_CAN_pv::RX3_callback_write(mb_address_type address, unsigned char* data, unsigned size) {
  RX_callback_write(3,data,size);
  return true;
} 




unsigned RH850E1_CAN_pv::reg_callback_read_dbg(mb_address_type address, unsigned char* data, unsigned size) {
  return 0;
} 

unsigned RH850E1_CAN_pv::reg_callback_write_dbg(mb_address_type address, unsigned char* data, unsigned size) {
  return 0;
} 

bool RH850E1_CAN_pv::reg_get_direct_memory_ptr(mb_address_type address, tlm::tlm_dmi& dmiData) {
  return false;
}





unsigned RH850E1_CAN_pv::RX0_callback_read_dbg(mb_address_type address, unsigned char* data, unsigned size) {
  return 0;
} 

unsigned RH850E1_CAN_pv::RX0_callback_write_dbg(mb_address_type address, unsigned char* data, unsigned size) {
  return 0;
} 

bool RH850E1_CAN_pv::RX0_get_direct_memory_ptr(mb_address_type address, tlm::tlm_dmi& dmiData) {
  return false;
}





unsigned RH850E1_CAN_pv::RX1_callback_read_dbg(mb_address_type address, unsigned char* data, unsigned size) {
  return 0;
} 

unsigned RH850E1_CAN_pv::RX1_callback_write_dbg(mb_address_type address, unsigned char* data, unsigned size) {
  return 0;
} 

bool RH850E1_CAN_pv::RX1_get_direct_memory_ptr(mb_address_type address, tlm::tlm_dmi& dmiData) {
  return false;
}





unsigned RH850E1_CAN_pv::RX2_callback_read_dbg(mb_address_type address, unsigned char* data, unsigned size) {
  return 0;
} 

unsigned RH850E1_CAN_pv::RX2_callback_write_dbg(mb_address_type address, unsigned char* data, unsigned size) {
  return 0;
} 

bool RH850E1_CAN_pv::RX2_get_direct_memory_ptr(mb_address_type address, tlm::tlm_dmi& dmiData) {
  return false;
}





unsigned RH850E1_CAN_pv::RX3_callback_read_dbg(mb_address_type address, unsigned char* data, unsigned size) {
  return 0;
} 

unsigned RH850E1_CAN_pv::RX3_callback_write_dbg(mb_address_type address, unsigned char* data, unsigned size) {
  return 0;
} 

bool RH850E1_CAN_pv::RX3_get_direct_memory_ptr(mb_address_type address, tlm::tlm_dmi& dmiData) {
  return false;
}

 
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0C0CFG(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0C0CTR(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0C1CFG(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0C1CTR(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0C2CFG(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0C2CTR(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0C3CFG(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0C3CTR(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0GCFG(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0GCTR(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0GERFL(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0GTSC(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0RMND0(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0RMND1(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0RFCC0(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0RFCC1(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0RFCC2(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0RFCC3(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0RFCC4(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0RFCC5(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0RFCC6(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0RFCC7(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0RFSTS0(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0RFSTS1(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0RFSTS2(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0RFSTS3(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0RFSTS4(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0RFSTS5(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0RFSTS6(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0RFSTS7(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0RFPCTR0(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0RFPCTR1(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0RFPCTR2(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0RFPCTR3(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0RFPCTR4(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0RFPCTR5(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0RFPCTR6(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0RFPCTR7(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0CFCC0(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0CFCC1(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0CFCC2(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0CFCC3(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0CFCC4(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0CFCC5(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0CFCC6(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0CFCC7(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0CFCC8(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0CFCC9(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0CFCC10(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0CFCC11(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0CFSTS0(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0CFSTS1(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0CFSTS2(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0CFSTS3(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0CFSTS4(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0CFSTS5(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0CFSTS6(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0CFSTS7(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0CFSTS8(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0CFSTS9(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0CFSTS10(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0CFSTS11(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0CFPCTR0(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0CFPCTR1(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0CFPCTR2(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0CFPCTR3(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0CFPCTR4(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0CFPCTR5(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0CFPCTR6(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0CFPCTR7(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0CFPCTR8(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0CFPCTR9(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0CFPCTR10(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0CFPCTR11(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TMC0(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TMC1(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TMC2(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TMC3(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TMC4(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TMC5(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TMC6(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TMC7(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TMC8(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TMC9(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TMC10(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TMC11(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TMC12(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TMC13(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TMC14(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TMC15(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TMC16(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TMC17(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TMC18(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TMC19(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TMC20(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TMC21(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TMC22(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TMC23(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TMC24(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TMC25(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TMC26(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TMC27(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TMC28(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TMC29(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TMC30(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TMC31(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TMC32(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TMC33(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TMC34(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TMC35(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TMC36(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TMC37(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TMC38(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TMC39(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TMC40(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TMC41(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TMC42(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TMC43(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TMC44(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TMC45(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TMC46(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TMC47(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TMC48(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TMC49(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TMC50(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TMC51(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TMC52(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TMC53(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TMC54(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TMC55(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TMC56(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TMC57(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TMC58(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TMC59(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TMC60(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TMC61(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TMC62(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TMC63(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TMSTS0(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TMSTS1(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TMSTS2(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TMSTS3(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TMSTS4(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TMSTS5(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TMSTS6(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TMSTS7(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TMSTS8(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TMSTS9(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TMSTS10(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TMSTS11(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TMSTS12(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TMSTS13(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TMSTS14(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TMSTS15(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TMSTS16(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TMSTS17(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TMSTS18(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TMSTS19(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TMSTS20(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TMSTS21(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TMSTS22(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TMSTS23(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TMSTS24(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TMSTS25(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TMSTS26(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TMSTS27(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TMSTS28(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TMSTS29(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TMSTS30(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TMSTS31(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TMSTS32(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TMSTS33(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TMSTS34(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TMSTS35(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TMSTS36(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TMSTS37(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TMSTS38(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TMSTS39(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TMSTS40(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TMSTS41(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TMSTS42(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TMSTS43(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TMSTS44(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TMSTS45(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TMSTS46(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TMSTS47(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TMSTS48(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TMSTS49(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TMSTS50(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TMSTS51(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TMSTS52(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TMSTS53(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TMSTS54(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TMSTS55(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TMSTS56(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TMSTS57(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TMSTS58(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TMSTS59(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TMSTS60(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TMSTS61(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TMSTS62(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TMSTS63(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TXQCC0(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TXQCC1(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TXQCC2(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TXQCC3(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TXQSTS0(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TXQSTS1(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TXQSTS2(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TXQSTS3(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TXQPCTR0(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TXQPCTR1(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TXQPCTR2(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0TXQPCTR3(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0THLCC0(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0THLCC1(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0THLCC2(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0THLCC3(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0THLSTS0(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0THLSTS1(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0THLSTS2(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0THLSTS3(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0THLPCTR0(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0THLPCTR1(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0THLPCTR2(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0THLPCTR3(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0GAFLID0(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0GAFLM0(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0GAFLP00(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0GAFLP10(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0GAFLID1(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0GAFLM1(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0GAFLP01(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0GAFLP11(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0GAFLID2(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0GAFLM2(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0GAFLP02(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0GAFLP12(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0GAFLID3(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0GAFLM3(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0GAFLP03(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0GAFLP13(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0GAFLID4(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0GAFLM4(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0GAFLP04(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0GAFLP14(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0GAFLID5(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0GAFLM5(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0GAFLP05(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0GAFLP15(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0GAFLID6(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0GAFLM6(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0GAFLP06(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0GAFLP16(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0GAFLID7(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0GAFLM7(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0GAFLP07(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0GAFLP17(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0GAFLID8(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0GAFLM8(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0GAFLP08(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0GAFLP18(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0GAFLID9(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0GAFLM9(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0GAFLP09(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0GAFLP19(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0GAFLID10(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0GAFLM10(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0GAFLP010(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0GAFLP110(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0GAFLID11(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0GAFLM11(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0GAFLP011(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0GAFLP111(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0GAFLID12(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0GAFLM12(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0GAFLP012(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0GAFLP112(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0GAFLID13(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0GAFLM13(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0GAFLP013(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0GAFLP113(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0GAFLID14(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0GAFLM14(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0GAFLP014(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0GAFLP114(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0GAFLID15(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0GAFLM15(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0GAFLP015(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0GAFLP115(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0RFID0(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0RFPTR0(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0RFDF00(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0RFDF10(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0RFID1(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0RFPTR1(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0RFDF01(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0RFDF11(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0RFID2(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0RFPTR2(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0RFDF02(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0RFDF12(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0RFID3(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0RFPTR3(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0RFDF03(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0RFDF13(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0RFID4(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0RFPTR4(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0RFDF04(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0RFDF14(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0RFID5(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0RFPTR5(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0RFDF05(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0RFDF15(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0RFID6(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0RFPTR6(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0RFDF06(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0RFDF16(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0RFID7(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0RFPTR7(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0RFDF07(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0RFDF17(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0CFID0(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0CFPTR0(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0CFDF00(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0CFDF10(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0CFID1(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0CFPTR1(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0CFDF01(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0CFDF11(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0CFID2(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0CFPTR2(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0CFDF02(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0CFDF12(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0CFID3(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0CFPTR3(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0CFDF03(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0CFDF13(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0CFID4(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0CFPTR4(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0CFDF04(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0CFDF14(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0CFID5(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0CFPTR5(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0CFDF05(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0CFDF15(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0CFID6(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0CFPTR6(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0CFDF06(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0CFDF16(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0CFID7(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0CFPTR7(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0CFDF07(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0CFDF17(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0CFID8(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0CFPTR8(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0CFDF08(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0CFDF18(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0CFID9(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0CFPTR9(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0CFDF09(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0CFDF19(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0CFID10(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0CFPTR10(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0CFDF010(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0CFDF110(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0CFID11(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0CFPTR11(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0CFDF011(tlm::tlm_generic_payload& trans) {}
void RH850E1_CAN_pv::cb_transport_dbg_RSCAN0CFDF111(tlm::tlm_generic_payload& trans) {}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void RH850E1_CAN_pv::cb_write_RSCAN0CFCCk(unsigned cfnum) {

  unsigned changed = (*(m_RSCAN0CFCCk[cfnum])) ^ ((*(m_RSCAN0CFCCk[cfnum])).old_value());

  if(((changed >> 0) & 0x1)){
    gout(((get_CommonFIFOEnable(cfnum))? (" Enable ") : (" Disable "))<<"Common FIFO "<<dec<<cfnum);
    if(get_CommonFIFOEnable(cfnum) == 0x0){
      m_CFIFO_CFID[cfnum].clear();
      m_CFIFO_CFPTR[cfnum].clear();
      m_CFIFO_CFDF0[cfnum].clear();
      m_CFIFO_CFDF1[cfnum].clear();
      set_CommonFIFOMessageCounter(cfnum,0);
      update_CommonFIFOFullEmptyFlags(cfnum);
    }
  }

  if(((changed >> 2) & 0x1)){
    set_CommonFIFOTxInterruptRequestFlag(cfnum,get_CommonFIFOTxInterruptRequestFlag(cfnum));
  }

  if(((changed >> 1) & 0x1)){
    set_CommonFIFORxInterruptRequestFlag(cfnum,get_CommonFIFORxInterruptRequestFlag(cfnum));
  }

  if(((changed >> 8) & 0x7)){
    gout(" Change Common FIFO "<<dec<<cfnum<<" depth to be "<<dec<<get_CommonFIFOBufferDepth(cfnum));
    m_CFIFO_CFID[cfnum].setCapacity((get_CommonFIFOBufferDepth(cfnum))?(get_CommonFIFOBufferDepth(cfnum)):(1));
    m_CFIFO_CFPTR[cfnum].setCapacity((get_CommonFIFOBufferDepth(cfnum))?(get_CommonFIFOBufferDepth(cfnum)):(1));
    m_CFIFO_CFDF0[cfnum].setCapacity((get_CommonFIFOBufferDepth(cfnum))?(get_CommonFIFOBufferDepth(cfnum)):(1));
    m_CFIFO_CFDF1[cfnum].setCapacity((get_CommonFIFOBufferDepth(cfnum))?(get_CommonFIFOBufferDepth(cfnum)):(1));
  }

}
/////////////////////////////////////////////////////////////////////////////
void RH850E1_CAN_pv::cb_write_RSCAN0CFPCTRk(unsigned cfnum) {

  if(((*(m_RSCAN0CFPCTRk[cfnum])) & 0xFF) == 0xFF){
    if(get_CommonFIFOEnable(cfnum)){
      switch(get_CommonFIFOMode(cfnum)){

        case 0:{//Rx Mode
          if(m_CFIFO_CFID[cfnum].empty()){
            GSC_REPORT_WARNING(name(), " (RH850E1_CAN:1) Common FIFO "<<cfnum<<" is empty, Can not read from empty FIFO ");
            return ;
          }
          gout(" Read from Common FIFO "<<dec<<cfnum);
          unsigned readdummy = 0x0;
          m_CFIFO_CFID[cfnum].read(&readdummy,1);
          m_CFIFO_CFPTR[cfnum].read(&readdummy,1);
          m_CFIFO_CFDF0[cfnum].read(&readdummy,1);
          m_CFIFO_CFDF1[cfnum].read(&readdummy,1);
          set_CommonFIFOMessageCounter(cfnum,get_CommonFIFOMessageCounter(cfnum)-1);
          update_CommonFIFOFullEmptyFlags(cfnum);
          break;
        }
        case 1:{//Tx Mode
          if(m_CFIFO_CFID[cfnum].full()){
            GSC_REPORT_WARNING(name(), " (RH850E1_CAN:2) Common FIFO "<<cfnum<<" is full, Can not Write to Full FIFO ");
            return ;
          }
          gout(" Write to Common FIFO "<<dec<<cfnum);
          m_CFIFO_CFID[cfnum].write((unsigned*)&(*(m_RSCAN0CFIDk[cfnum])),1);
          m_CFIFO_CFPTR[cfnum].write((unsigned*)&(*(m_RSCAN0CFPTRk[cfnum])),1);
          m_CFIFO_CFDF0[cfnum].write((unsigned*)&(*(m_RSCAN0CFDF0k[cfnum])),1);
          m_CFIFO_CFDF1[cfnum].write((unsigned*)&(*(m_RSCAN0CFDF1k[cfnum])),1);
          set_CommonFIFOMessageCounter(cfnum,get_CommonFIFOMessageCounter(cfnum)+1);
          update_CommonFIFOFullEmptyFlags(cfnum);
          try_tx(cfnum/3);
          break;
        }
        default:
          break;
      }
    }else{
      GSC_REPORT_WARNING(name(), " (RH850E1_CAN:3) Common FIFO "<<cfnum<<" is disabled, Can not Write to / Read from disabled FIFO ");
    }
  }

}
/////////////////////////////////////////////////////////////////////////////
void RH850E1_CAN_pv::cb_write_RSCAN0TMCp(unsigned txbufnum) {

  unsigned changed = (*(m_RSCAN0TMCp[txbufnum])) ^ ((*(m_RSCAN0TMCp[txbufnum])).old_value());

  if(((changed >> 0) & 0x1)){
    if((((*(m_RSCAN0TMCp[txbufnum])) >> 0) & 0x1) == 0x1){
      gout(" Tx Buffer "<<dec<<txbufnum<<" is registered for transmission ");
      set_TxBufferTXRequestFlag(txbufnum,1);
      try_tx(txbufnum/16);
    }else{
      gout(" Can not un-register Tx Buffer "<<dec<<txbufnum);
      (*(m_RSCAN0TMCp[txbufnum])) = (*(m_RSCAN0TMCp[txbufnum])) | 0x1;
    }
  }

  if(((changed >> 1) & 0x1)){
    if((((*(m_RSCAN0TMCp[txbufnum])) >> 1) & 0x1) == 0x1){
      gout(" Tx Buffer "<<dec<<txbufnum<<" Abort is requested ");
      set_TxBufferAbortRequestFlag(txbufnum,1);
      try_abort(txbufnum);
    }else{
      gout(" Can not un-request Abort Tx Buffer "<<dec<<txbufnum);
      (*(m_RSCAN0TMCp[txbufnum])) = (*(m_RSCAN0TMCp[txbufnum])) | 0x2;
    }
  }

}
/////////////////////////////////////////////////////////////////////////////
void RH850E1_CAN_pv::cb_write_RSCAN0CmCTR(unsigned channel) {

  unsigned changed = (*(m_RSCAN0CmCTR[channel])) ^ ((*(m_RSCAN0CmCTR[channel])).old_value());

  if(((changed >> 0) & 0x7)){
    update_ChannelMode(channel);
  }

}
/////////////////////////////////////////////////////////////////////////////
void RH850E1_CAN_pv::cb_write_RSCAN0CFSTSk(unsigned cfnum) {

  unsigned changed = (*(m_RSCAN0CFSTSk[cfnum])) ^ ((*(m_RSCAN0CFSTSk[cfnum])).old_value());

  if(((changed >> 4) & 0x1)){
    set_CommonFIFOTxInterruptRequestFlag(cfnum,get_CommonFIFOTxInterruptRequestFlag(cfnum));
  }

  if(((changed >> 3) & 0x1)){
    set_CommonFIFORxInterruptRequestFlag(cfnum,get_CommonFIFORxInterruptRequestFlag(cfnum));
  }

  if(((changed >> 2) & 0x1)){
    set_CommonFIFOMessageLostFlag(cfnum,get_CommonFIFOMessageLostFlag(cfnum));
  }

}
/////////////////////////////////////////////////////////////////////////////
void RH850E1_CAN_pv::cb_write_RSCAN0TMSTSp(unsigned txbufnum) {

  unsigned changed = (*(m_RSCAN0TMSTSp[txbufnum])) ^ ((*(m_RSCAN0TMSTSp[txbufnum])).old_value());

  if(((changed >> 1) & 0x3)){
    set_TransmitBufferTxResultFlag(txbufnum,get_TransmitBufferTxResultFlag(txbufnum));
  }

}
/////////////////////////////////////////////////////////////////////////////
void RH850E1_CAN_pv::cb_write_RSCAN0THLCCm(unsigned channel) {

  unsigned changed = (*(m_RSCAN0THLCCm[channel])) ^ ((*(m_RSCAN0THLCCm[channel])).old_value());

  if(((changed >> 8) & 0x1)){
    set_TransmitHistoryInterruptFlag(channel,get_TransmitHistoryInterruptFlag(channel));
  }

}
/////////////////////////////////////////////////////////////////////////////
void RH850E1_CAN_pv::cb_write_RSCAN0THLSTSm(unsigned channel) {

  unsigned changed = (*(m_RSCAN0THLSTSm[channel])) ^ ((*(m_RSCAN0THLSTSm[channel])).old_value());

  if(((changed >> 3) & 0x1)){
    set_TransmitHistoryInterruptFlag(channel,get_TransmitHistoryInterruptFlag(channel));
  }

  if(((changed >> 2) & 0x1)){
    if(get_TransmitHistoryBufferOverflowFlag(channel) == 0x0){
      update_GlobalTransmitHistoryBufferOverflow();
    }
  }

}
/////////////////////////////////////////////////////////////////////////////
void RH850E1_CAN_pv::cb_write_RSCAN0THLPCTRm(unsigned channel) {

  if(((*(m_RSCAN0THLPCTRm[channel])) & 0xFF) == 0xFF){
    if(get_TransmitHistoryBufferEnable(channel) == 0x0){
      GSC_REPORT_WARNING(name(), " (RH850E1_CAN:4) Channel "<<channel<<" TX History List is disabled, Can not Read from disabled FIFO ");
      return;
    }
    if((get_TransmitHistoryUnReadDataCounter(channel) == 0)){
      GSC_REPORT_WARNING(name(), " (RH850E1_CAN:5) Channel "<<channel<<" TX History List is Empty, Can not Read from empty FIFO ");
      return;
    }

    unsigned readdata = 0;
    m_TXHistory[channel].read(&readdata,1);
    (*(m_RSCAN0THLACCm[channel])) = readdata;

    set_TransmitHistoryUnReadDataCounter(channel,get_TransmitHistoryUnReadDataCounter(channel)-1);
    update_TxBufferFullEmptyFlags(channel);
  }

}
/////////////////////////////////////////////////////////////////////////////
void RH850E1_CAN_pv::cb_write_RSCAN0GAFLIDj(unsigned idx) {

  if(get_ReceiveRuleTableWriteEnable() == 0x0){
    GSC_REPORT_WARNING(name(), " (RH850E1_CAN:6) Receive Rule Table Write is disabled ");
    return;
  }

  m_RRT_FLID[get_ReceiveRuleTablePageNumber() * 16 + idx] = (*(m_RSCAN0GAFLIDj[idx]));
  
}
/////////////////////////////////////////////////////////////////////////////
void RH850E1_CAN_pv::cb_write_RSCAN0GAFLMj(unsigned idx) {

  if(get_ReceiveRuleTableWriteEnable() == 0x0){
    GSC_REPORT_WARNING(name(), " (RH850E1_CAN:6) Receive Rule Table Write is disabled ");
    return;
  }

  m_RRT_FLM[get_ReceiveRuleTablePageNumber() * 16 + idx] = (*(m_RSCAN0GAFLMj[idx]));
  
}
/////////////////////////////////////////////////////////////////////////////
void RH850E1_CAN_pv::cb_write_RSCAN0GAFLP0j(unsigned idx) {

  if(get_ReceiveRuleTableWriteEnable() == 0x0){
    GSC_REPORT_WARNING(name(), " (RH850E1_CAN:6) Receive Rule Table Write is disabled ");
    return;
  }

  m_RRT_FLP0[get_ReceiveRuleTablePageNumber() * 16 + idx] = (*(m_RSCAN0GAFLP0j[idx]));
  
}
/////////////////////////////////////////////////////////////////////////////
void RH850E1_CAN_pv::cb_write_RSCAN0GAFLP1j(unsigned idx) {

  if(get_ReceiveRuleTableWriteEnable() == 0x0){
    GSC_REPORT_WARNING(name(), " (RH850E1_CAN:6) Receive Rule Table Write is disabled ");
    return;
  }

  m_RRT_FLP1[get_ReceiveRuleTablePageNumber() * 16 + idx] = (*(m_RSCAN0GAFLP1j[idx]));
  
}
/////////////////////////////////////////////////////////////////////////////
void RH850E1_CAN_pv::cb_write_RSCAN0RFCCx(unsigned rxfifonum) {

  unsigned changed = (*(m_RSCAN0RFCCx[rxfifonum])) ^ ((*(m_RSCAN0RFCCx[rxfifonum])).old_value());

  if(((changed >> 0) & 0x1)){
    gout(((get_RXFIFOEnable(rxfifonum))? (" Enable ") : (" Disable "))<<"Receive FIFO "<<dec<<rxfifonum);
    if(get_RXFIFOEnable(rxfifonum) == 0x0){
      m_RFIFO_RFID[rxfifonum].clear();
      m_RFIFO_RFPTR[rxfifonum].clear();
      m_RFIFO_RFDF0[rxfifonum].clear();
      m_RFIFO_RFDF1[rxfifonum].clear();
      set_RXFIFOMessageCounter(rxfifonum,0);
      update_RXFIFOFullEmptyFlags(rxfifonum);
    }
  }

  if(((changed >> 1) & 0x1)){
    set_RXFIFOInterruptRequestFlag(rxfifonum,get_RXFIFOInterruptRequestFlag(rxfifonum));
  }

  if(((changed >> 8) & 0x7)){
    gout(" Change Receive FIFO "<<dec<<rxfifonum<<" depth to be "<<dec<<get_RXFIFOBufferDepth(rxfifonum));
    m_RFIFO_RFID[rxfifonum].setCapacity((get_RXFIFOBufferDepth(rxfifonum))?(get_RXFIFOBufferDepth(rxfifonum)):(1));
    m_RFIFO_RFPTR[rxfifonum].setCapacity((get_RXFIFOBufferDepth(rxfifonum))?(get_RXFIFOBufferDepth(rxfifonum)):(1));
    m_RFIFO_RFDF0[rxfifonum].setCapacity((get_RXFIFOBufferDepth(rxfifonum))?(get_RXFIFOBufferDepth(rxfifonum)):(1));
    m_RFIFO_RFDF1[rxfifonum].setCapacity((get_RXFIFOBufferDepth(rxfifonum))?(get_RXFIFOBufferDepth(rxfifonum)):(1));
  }

}
/////////////////////////////////////////////////////////////////////////////
void RH850E1_CAN_pv::cb_write_RSCAN0RFSTSx(unsigned rxfifonum) {

  unsigned changed = (*(m_RSCAN0RFSTSx[rxfifonum])) ^ ((*(m_RSCAN0RFSTSx[rxfifonum])).old_value());

  if(((changed >> 1) & 0x1)){
    set_RXFIFOInterruptRequestFlag(rxfifonum,get_RXFIFOInterruptRequestFlag(rxfifonum));
  }

  if(((changed >> 2) & 0x1)){
    set_RXFIFOMessageLostFlag(rxfifonum,get_RXFIFOMessageLostFlag(rxfifonum));
  }

}
/////////////////////////////////////////////////////////////////////////////
void RH850E1_CAN_pv::cb_write_RSCAN0RFPCTRx(unsigned rxfifonum) {

  if(((*(m_RSCAN0RFPCTRx[rxfifonum])) & 0xFF) == 0xFF){
    if(get_RXFIFOEnable(rxfifonum)){
      if(m_RFIFO_RFID[rxfifonum].empty()){
        GSC_REPORT_WARNING(name(), " (RH850E1_CAN:7) Receive FIFO "<<rxfifonum<<" is empty, Can not Read from empty FIFO ");
        return ;
      }
      unsigned readdummy = 0x0;
      m_RFIFO_RFID[rxfifonum].read(&readdummy,1);
      m_RFIFO_RFPTR[rxfifonum].read(&readdummy,1);
      m_RFIFO_RFDF0[rxfifonum].read(&readdummy,1);
      m_RFIFO_RFDF1[rxfifonum].read(&readdummy,1);
      set_RXFIFOMessageCounter(rxfifonum,get_RXFIFOMessageCounter(rxfifonum)-1);
      update_RXFIFOFullEmptyFlags(rxfifonum);
    }else{
      GSC_REPORT_WARNING(name(), " (RH850E1_CAN:8) Receive FIFO "<<rxfifonum<<" is disabled, Can not Rerad from disabled FIFO ");
    }
  }

}
/////////////////////////////////////////////////////////////////////////////
void RH850E1_CAN_pv::cb_write_RSCAN0TXQPCTRm(unsigned channel) {

  if(((*(m_RSCAN0TXQPCTRm[channel])) & 0xFF) == 0xFF){
    if((get_TransmitQueueEnable(channel) == 0x0) || (get_TransmitQueueDepth(channel) == 0x0)){
      GSC_REPORT_WARNING(name(), " (RH850E1_CAN:9) Channel "<<channel<<" Transmit Queue is disabled, Can not Write to disabled Queue ");
      return;
    }

    if(get_TransmitQueueFullFlag(channel) == 0x1){
      GSC_REPORT_WARNING(name(), " (RH850E1_CAN:10) Channel "<<channel<<" Transmit Queue is full, Can not Write to Full Queue ");
      return;
    }

    m_TQID[channel]->push_back((*(m_RSCAN0TMIDp[channel*16+15])));
    m_TQPTR[channel]->push_back((*(m_RSCAN0TMPTRp[channel*16+15])));
    m_TQDF0[channel]->push_back((*(m_RSCAN0TMDF0p[channel*16+15])));
    m_TQDF1[channel]->push_back((*(m_RSCAN0TMDF1p[channel*16+15])));
    update_TransmitQueueEmptyFullFlags(channel);
    try_tx(channel);
  }

}
/////////////////////////////////////////////////////////////////////////////
void RH850E1_CAN_pv::cb_write_RSCAN0TXQCCm(unsigned channel) {

  unsigned changed = (*(m_RSCAN0TXQCCm[channel])) ^ ((*(m_RSCAN0TXQCCm[channel])).old_value());

  if(((changed >> 0) & 0x1)){
    gout(((get_TransmitQueueEnable(channel))? (" Enable ") : (" Disable "))<<"Transmit Queue "<<dec<<channel);
    if(get_TransmitQueueEnable(channel) == 0x0){
      m_TQID[channel]->clear();
      m_TQPTR[channel]->clear();
      m_TQDF0[channel]->clear();
      m_TQDF1[channel]->clear();
      update_TransmitQueueEmptyFullFlags(channel);
    }
  }

  if(((changed >> 12) & 0x1)){
    set_TransmitQueueInterruptFlag(channel,get_TransmitQueueInterruptFlag(channel));
  }

}
/////////////////////////////////////////////////////////////////////////////
void RH850E1_CAN_pv::cb_write_RSCAN0TXQSTSm(unsigned channel) {

  unsigned changed = (*(m_RSCAN0TXQSTSm[channel])) ^ ((*(m_RSCAN0TXQSTSm[channel])).old_value());

  if(((changed >> 2) & 0x1)){
    set_TransmitQueueInterruptFlag(channel,get_TransmitQueueInterruptFlag(channel));
  }

}
void RH850E1_CAN_pv::cb_write_RSCAN0CmCFG(unsigned channel) {

  unsigned changed = (*(m_RSCAN0CmCFG[channel])) ^ ((*(m_RSCAN0CmCFG[channel])).old_value());

  if(((changed >> 0) & 0x3FF)){
    update_counter();
  }

  if(((changed >> 16) & 0xF)){
    update_counter();
  }

  if(((changed >> 20) & 0x7)){
    update_counter();
  }

}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void RH850E1_CAN_pv::reset_CAN(){

  for(unsigned i=0;i<12;i++){
    m_CFIFO_CFID[i].setCapacity((get_CommonFIFOBufferDepth(i))?(get_CommonFIFOBufferDepth(i)):(1));
    m_CFIFO_CFPTR[i].setCapacity((get_CommonFIFOBufferDepth(i))?(get_CommonFIFOBufferDepth(i)):(1));
    m_CFIFO_CFDF0[i].setCapacity((get_CommonFIFOBufferDepth(i))?(get_CommonFIFOBufferDepth(i)):(1));
    m_CFIFO_CFDF1[i].setCapacity((get_CommonFIFOBufferDepth(i))?(get_CommonFIFOBufferDepth(i)):(1));
    m_CFIFO_CFID[i].setAutoExpand(false);
    m_CFIFO_CFPTR[i].setAutoExpand(false);
    m_CFIFO_CFDF0[i].setAutoExpand(false);
    m_CFIFO_CFDF1[i].setAutoExpand(false);
  }

  for(unsigned i=0;i<8;i++){
    m_RFIFO_RFID[i].setCapacity((get_RXFIFOBufferDepth(i))?(get_RXFIFOBufferDepth(i)):(1));
    m_RFIFO_RFPTR[i].setCapacity((get_RXFIFOBufferDepth(i))?(get_RXFIFOBufferDepth(i)):(1));
    m_RFIFO_RFDF0[i].setCapacity((get_RXFIFOBufferDepth(i))?(get_RXFIFOBufferDepth(i)):(1));
    m_RFIFO_RFDF1[i].setCapacity((get_RXFIFOBufferDepth(i))?(get_RXFIFOBufferDepth(i)):(1));
    m_RFIFO_RFID[i].setAutoExpand(false);
    m_RFIFO_RFPTR[i].setAutoExpand(false);
    m_RFIFO_RFDF0[i].setAutoExpand(false);
    m_RFIFO_RFDF1[i].setAutoExpand(false);
  }

  m_GOMode = G_stop_mode;
  m_COMode[0] = C_stop_mode;
  m_COMode[1] = C_stop_mode;
  m_COMode[2] = C_stop_mode;
  m_COMode[3] = C_stop_mode;

  for(unsigned i=0;i<4;i++){
    m_TXHistory[i].setCapacity(16);
    m_TXHistory[i].setAutoExpand(false);
    m_TQID[i] = new std::vector<unsigned>();
    m_TQPTR[i] = new std::vector<unsigned>();
    m_TQDF0[i] = new std::vector<unsigned>();
    m_TQDF1[i] = new std::vector<unsigned>();
  }

}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
unsigned RH850E1_CAN_pv::get_CommonFIFOBufferDepth(unsigned cfnum){
  unsigned fifodepth = (((*(m_RSCAN0CFCCk[cfnum])) >> 8) & 0x7);
  switch(fifodepth){
    case 0: return 0;
    case 1: return 4;
    case 2: return 8;
    case 3: return 16;
    case 4: return 32;
    case 5: return 48;
    case 6: return 64;
    case 7: return 128;
  }
  return 0;
}

unsigned RH850E1_CAN_pv::get_CommonFIFOMode(unsigned cfnum){
  return (((*(m_RSCAN0CFCCk[cfnum])) >> 16) & 0x3);
}

unsigned RH850E1_CAN_pv::get_CommonFIFOMessageCounter(unsigned cfnum){
  return (((*(m_RSCAN0CFSTSk[cfnum])) >> 8) & 0xFF);
}

void RH850E1_CAN_pv::set_CommonFIFOMessageCounter(unsigned cfnum,unsigned value){
  (*(m_RSCAN0CFSTSk[cfnum])) = ((*(m_RSCAN0CFSTSk[cfnum])) & (~(0xFF << 8)));
  (*(m_RSCAN0CFSTSk[cfnum])) = ((*(m_RSCAN0CFSTSk[cfnum])) | (value << 8));
}

unsigned RH850E1_CAN_pv::get_CommonFIFOEnable(unsigned cfnum){
  return (((*(m_RSCAN0CFCCk[cfnum])) >> 0) & 0x1);
}

void RH850E1_CAN_pv::set_CommonFIFOFullFlag(unsigned cfnum,unsigned value){
  (*(m_RSCAN0CFSTSk[cfnum])) = ((*(m_RSCAN0CFSTSk[cfnum])) & (~(0x1 << 1)));
  (*(m_RSCAN0CFSTSk[cfnum])) = ((*(m_RSCAN0CFSTSk[cfnum])) | (value << 1));
  RSCAN0FFSTS = (RSCAN0FFSTS & (~(0x1 << (cfnum + 8))));
  RSCAN0FFSTS = (RSCAN0FFSTS | (value << (cfnum + 8)));
}

void RH850E1_CAN_pv::set_CommonFIFOEmptyFlag(unsigned cfnum,unsigned value){
  (*(m_RSCAN0CFSTSk[cfnum])) = ((*(m_RSCAN0CFSTSk[cfnum])) & (~(0x1 << 0)));
  (*(m_RSCAN0CFSTSk[cfnum])) = ((*(m_RSCAN0CFSTSk[cfnum])) | (value << 0));
  RSCAN0FESTS = (RSCAN0FESTS & (~(0x1 << (cfnum + 8))));
  RSCAN0FESTS = (RSCAN0FESTS | (value << (cfnum + 8)));
}

void RH850E1_CAN_pv::set_TxBufferTXRequestFlag(unsigned txbufnum,unsigned value){
  (*(m_RSCAN0TMSTSp[txbufnum])) = ((*(m_RSCAN0TMSTSp[txbufnum])) & (~(0x1 << 3)));
  (*(m_RSCAN0TMSTSp[txbufnum])) = ((*(m_RSCAN0TMSTSp[txbufnum])) | (value << 3));
  if(txbufnum<32){
    RSCAN0TMTRSTS0 = (RSCAN0TMTRSTS0 & (~(0x1 << txbufnum)));
    RSCAN0TMTRSTS0 = (RSCAN0TMTRSTS0 | (value << txbufnum));
  }else{
    RSCAN0TMTRSTS1 = (RSCAN0TMTRSTS1 & (~(0x1 << (txbufnum - 32))));
    RSCAN0TMTRSTS1 = (RSCAN0TMTRSTS1 | (value << (txbufnum - 32)));
  }
}

void RH850E1_CAN_pv::set_TxBufferAbortRequestFlag(unsigned txbufnum,unsigned value){
  (*(m_RSCAN0TMSTSp[txbufnum])) = ((*(m_RSCAN0TMSTSp[txbufnum])) & (~(0x1 << 4)));
  (*(m_RSCAN0TMSTSp[txbufnum])) = ((*(m_RSCAN0TMSTSp[txbufnum])) | (value << 4));
  if(txbufnum<32){
    RSCAN0TMTARSTS0 = (RSCAN0TMTARSTS0 & (~(0x1 << txbufnum)));
    RSCAN0TMTARSTS0 = (RSCAN0TMTARSTS0 | (value << txbufnum));
  }else{
    RSCAN0TMTARSTS1 = (RSCAN0TMTARSTS1 & (~(0x1 << (txbufnum - 32))));
    RSCAN0TMTARSTS1 = (RSCAN0TMTARSTS1 | (value << (txbufnum - 32)));
  }
}

unsigned RH850E1_CAN_pv::get_GlobalModeSelectBits(){
  return ((RSCAN0GCTR >> 0) & 0x3);
}

void RH850E1_CAN_pv::set_GlobalModeSelectBits(unsigned value){
  RSCAN0GCTR = (RSCAN0GCTR & (~(0x3 << 0)));
  RSCAN0GCTR = (RSCAN0GCTR | (value << 0));
}

unsigned RH850E1_CAN_pv::get_GlobalStopModeBit(){
  return ((RSCAN0GCTR >> 2) & 0x1);
}

void RH850E1_CAN_pv::set_GlobalStopModeBit(unsigned value){
  RSCAN0GCTR = (RSCAN0GCTR & (~(0x1 << 2)));
  RSCAN0GCTR = (RSCAN0GCTR | (value << 2));
}

void RH850E1_CAN_pv::set_GlobalResetModeStatus(unsigned value){
  RSCAN0GSTS = (RSCAN0GSTS & (~(0x1 << 0)));
  RSCAN0GSTS = (RSCAN0GSTS | (value << 0));
}

void RH850E1_CAN_pv::set_GlobalTestModeStatus(unsigned value){
  RSCAN0GSTS = (RSCAN0GSTS & (~(0x1 << 1)));
  RSCAN0GSTS = (RSCAN0GSTS | (value << 1));
}

void RH850E1_CAN_pv::set_GlobalStopModeStatus(unsigned value){
  RSCAN0GSTS = (RSCAN0GSTS & (~(0x1 << 2)));
  RSCAN0GSTS = (RSCAN0GSTS | (value << 2));
}

unsigned RH850E1_CAN_pv::get_ChannelModeSelectBits(unsigned channel){
  return (((*(m_RSCAN0CmCTR[channel])) >> 0) & 0x3);
}

void RH850E1_CAN_pv::set_ChannelModeSelectBits(unsigned channel,unsigned value){
  (*(m_RSCAN0CmCTR[channel])) = ((*(m_RSCAN0CmCTR[channel])) & (~(0x3 << 0)));
  (*(m_RSCAN0CmCTR[channel])) = ((*(m_RSCAN0CmCTR[channel])) | (value << 0));
}

unsigned RH850E1_CAN_pv::get_ChannelStopModeBit(unsigned channel){
  return (((*(m_RSCAN0CmCTR[channel])) >> 2) & 0x1);
}

void RH850E1_CAN_pv::set_ChannelStopModeBit(unsigned channel,unsigned value){
  (*(m_RSCAN0CmCTR[channel])) = ((*(m_RSCAN0CmCTR[channel])) & (~(0x1 << 2)));
  (*(m_RSCAN0CmCTR[channel])) = ((*(m_RSCAN0CmCTR[channel])) | (value << 2));
}

void RH850E1_CAN_pv::set_ChannelResetModeStatus(unsigned channel,unsigned value){
  (*(m_RSCAN0CmSTS[channel])) = ((*(m_RSCAN0CmSTS[channel])) & (~(0x1 << 0)));
  (*(m_RSCAN0CmSTS[channel])) = ((*(m_RSCAN0CmSTS[channel])) | (value << 0));
}

void RH850E1_CAN_pv::set_ChannelHaltModeStatus(unsigned channel,unsigned value){
  (*(m_RSCAN0CmSTS[channel])) = ((*(m_RSCAN0CmSTS[channel])) & (~(0x1 << 1)));
  (*(m_RSCAN0CmSTS[channel])) = ((*(m_RSCAN0CmSTS[channel])) | (value << 1));
}

void RH850E1_CAN_pv::set_ChannelStopModeStatus(unsigned channel,unsigned value){
  (*(m_RSCAN0CmSTS[channel])) = ((*(m_RSCAN0CmSTS[channel])) & (~(0x1 << 2)));
  (*(m_RSCAN0CmSTS[channel])) = ((*(m_RSCAN0CmSTS[channel])) | (value << 2));
}

void RH850E1_CAN_pv::set_ChannelCommunicationModeStatus(unsigned channel,unsigned value){
  (*(m_RSCAN0CmSTS[channel])) = ((*(m_RSCAN0CmSTS[channel])) & (~(0x1 << 7)));
  (*(m_RSCAN0CmSTS[channel])) = ((*(m_RSCAN0CmSTS[channel])) | (value << 7));
}

void RH850E1_CAN_pv::set_ChannelBusoffStatus(unsigned channel,unsigned value){
  (*(m_RSCAN0CmSTS[channel])) = ((*(m_RSCAN0CmSTS[channel])) & (~(0x1 << 4)));
  (*(m_RSCAN0CmSTS[channel])) = ((*(m_RSCAN0CmSTS[channel])) | (value << 4));
}

void RH850E1_CAN_pv::set_ChannelTransmitStatus(unsigned channel,unsigned value){
  (*(m_RSCAN0CmSTS[channel])) = ((*(m_RSCAN0CmSTS[channel])) & (~(0x1 << 5)));
  (*(m_RSCAN0CmSTS[channel])) = ((*(m_RSCAN0CmSTS[channel])) | (value << 5));
}

void RH850E1_CAN_pv::set_ChannelReceiveStatus(unsigned channel,unsigned value){
  (*(m_RSCAN0CmSTS[channel])) = ((*(m_RSCAN0CmSTS[channel])) & (~(0x1 << 6)));
  (*(m_RSCAN0CmSTS[channel])) = ((*(m_RSCAN0CmSTS[channel])) | (value << 6));
}

unsigned RH850E1_CAN_pv::get_ChannelBusoffStatus(unsigned channel){
  return (((*(m_RSCAN0CmSTS[channel])) >> 4) & 0x1);
}

unsigned RH850E1_CAN_pv::get_ChannelTransmitStatus(unsigned channel){
  return (((*(m_RSCAN0CmSTS[channel])) >> 5) & 0x1);
}

unsigned RH850E1_CAN_pv::get_ChannelReceiveStatus(unsigned channel){
  return (((*(m_RSCAN0CmSTS[channel])) >> 6) & 0x1);
}

unsigned RH850E1_CAN_pv::get_TransmitPriority(){
  return ((RSCAN0GCFG >> 0) & 0x1);
}

unsigned RH850E1_CAN_pv::get_CommonFIFOBufferLink(unsigned cfnum){
  return (((*(m_RSCAN0CFCCk[cfnum])) >> 20) & 0x4);
}

unsigned RH850E1_CAN_pv::get_CommonFIFOID(unsigned cfnum){
  return ((m_CFIFO_CFID[cfnum].first() >> 0) & 0x1FFFFFFF);
}

unsigned RH850E1_CAN_pv::get_CommonFIFOIDE(unsigned cfnum){
  return ((m_CFIFO_CFID[cfnum].first() >> 31) & 0x1);
}

unsigned RH850E1_CAN_pv::get_CommonFIFORTR(unsigned cfnum){
  return ((m_CFIFO_CFID[cfnum].first() >> 30) & 0x1);
}

unsigned RH850E1_CAN_pv::get_CommonFIFODLC(unsigned cfnum){
  unsigned tmp = ((m_CFIFO_CFPTR[cfnum].first() >> 28) & 0xF);
  if(tmp > 8){
    tmp = 8;
  }
  return tmp;
}

unsigned RH850E1_CAN_pv::get_CommonFIFOData(unsigned cfnum,unsigned byte){
  if(byte < 4){
    return ((m_CFIFO_CFDF0[cfnum].first() >> (byte*8)) & 0xFF);
  }else{
    return ((m_CFIFO_CFDF1[cfnum].first() >> ((byte-4)*8)) & 0xFF);
  }
}

unsigned RH850E1_CAN_pv::get_TxBufferID(unsigned txbuf){
  return (((*(m_RSCAN0TMIDp[txbuf])) >> 0) & 0x1FFFFFFF);
}

unsigned RH850E1_CAN_pv::get_TxBufferRequest(unsigned txbuf){
  return (((*(m_RSCAN0TMCp[txbuf])) >> 0) & 0x1);
}

void RH850E1_CAN_pv::set_CommonFIFOTxInterruptRequestFlag(unsigned cfnum,unsigned value){
  (*(m_RSCAN0CFSTSk[cfnum])) = ((*(m_RSCAN0CFSTSk[cfnum])) & (~(0x1 << 4)));
  (*(m_RSCAN0CFSTSk[cfnum])) = ((*(m_RSCAN0CFSTSk[cfnum])) | (value << 4));
  RSCAN0CFTISTS = (RSCAN0CFTISTS & (~(0x1 << cfnum)));
  RSCAN0CFTISTS = (RSCAN0CFTISTS | (value << cfnum));
  if(get_CommonFIFOTxInterruptRequestEnable(cfnum)){
    set_GlobalTxInterruptStatusCommonFIFO(cfnum/3,value);
  }else{
    set_GlobalTxInterruptStatusCommonFIFO(cfnum/3,0);
  }
  update_CIRQ_TX_fromCF(cfnum);
}

unsigned RH850E1_CAN_pv::get_CommonFIFOTxInterruptRequestFlag(unsigned cfnum){
  return (((*(m_RSCAN0CFSTSk[cfnum])) >> 4) & 0x1);
}

unsigned RH850E1_CAN_pv::get_CommonFIFOTxInterruptRequestEnable(unsigned cfnum){
  return (((*(m_RSCAN0CFCCk[cfnum])) >> 2) & 0x1);
}

void RH850E1_CAN_pv::set_GlobalTxInterruptStatusCommonFIFO(unsigned channel,unsigned value){
  RSCAN0GTINTSTS0 = (RSCAN0GTINTSTS0 & (~(0x1 << (channel*8+3))));
  RSCAN0GTINTSTS0 = (RSCAN0GTINTSTS0 | (value << (channel*8+3)));
}

unsigned RH850E1_CAN_pv::get_TXBufferID(unsigned txbufnum){
  return (((*(m_RSCAN0TMIDp[txbufnum])) >> 0) & 0x1FFFFFFF);
}

unsigned RH850E1_CAN_pv::get_TXBufferIDE(unsigned txbufnum){
  return (((*(m_RSCAN0TMIDp[txbufnum])) >> 31) & 0x1);
}

unsigned RH850E1_CAN_pv::get_TXBufferRTR(unsigned txbufnum){
  return (((*(m_RSCAN0TMIDp[txbufnum])) >> 30) & 0x1);
}

unsigned RH850E1_CAN_pv::get_TXBufferDLC(unsigned txbufnum){
  unsigned tmp = (((*(m_RSCAN0TMPTRp[txbufnum])) >> 28) & 0xF);
  if(tmp > 8){
    tmp = 8;
  }
  return tmp;
}

unsigned RH850E1_CAN_pv::get_TXBufferData(unsigned txbufnum,unsigned byte){
  if(byte < 4){
    return (((*(m_RSCAN0TMDF0p[txbufnum])) >> (byte*8)) & 0xFF);
  }else{
    return (((*(m_RSCAN0TMDF1p[txbufnum])) >> ((byte-4)*8)) & 0xFF);
  }
}

void RH850E1_CAN_pv::set_TransmitBufferTxStatusFlag(unsigned txbufnum,unsigned value){
  (*(m_RSCAN0TMSTSp[txbufnum])) = ((*(m_RSCAN0TMSTSp[txbufnum])) & (~(0x1 << 0)));
  (*(m_RSCAN0TMSTSp[txbufnum])) = ((*(m_RSCAN0TMSTSp[txbufnum])) | (value << 0));
}

void RH850E1_CAN_pv::set_TransmitBufferTxResultFlag(unsigned txbufnum,unsigned value){
  (*(m_RSCAN0TMSTSp[txbufnum])) = ((*(m_RSCAN0TMSTSp[txbufnum])) & (~(0x3 << 1)));
  (*(m_RSCAN0TMSTSp[txbufnum])) = ((*(m_RSCAN0TMSTSp[txbufnum])) | (value << 1));
  unsigned result_TC = (((value == 0x2) || (value == 0x3)) ? (1) : (0));
  if(txbufnum<32){
    RSCAN0TMTCSTS0 = (RSCAN0TMTCSTS0 & (~(0x1 << txbufnum)));
    RSCAN0TMTCSTS0 = (RSCAN0TMTCSTS0 | (result_TC << txbufnum));
  }else{
    RSCAN0TMTCSTS1 = (RSCAN0TMTCSTS1 & (~(0x1 << (txbufnum - 32))));
    RSCAN0TMTCSTS1 = (RSCAN0TMTCSTS1 | (result_TC << (txbufnum - 32)));
  }
  unsigned result_TA = ((value == 0x1) ? (1) : (0));
  if(txbufnum<32){
    RSCAN0TMTASTS0 = (RSCAN0TMTASTS0 & (~(0x1 << txbufnum)));
    RSCAN0TMTASTS0 = (RSCAN0TMTASTS0 | (result_TA << txbufnum));
  }else{
    RSCAN0TMTASTS1 = (RSCAN0TMTASTS1 & (~(0x1 << (txbufnum - 32))));
    RSCAN0TMTASTS1 = (RSCAN0TMTASTS1 | (result_TA << (txbufnum - 32)));
  }
  if(txbufnum < 16){
    set_GlobalTxInterruptStatusTXSuccess(0,(((RSCAN0TMTCSTS0 & 0x0000FFFF) & (RSCAN0TMIEC0 & 0x0000FFFF)) ? (1) : (0)));
    set_GlobalTxInterruptStatusTXAbort(0,(((RSCAN0TMTASTS0 & 0x0000FFFF) && get_TransmitAbortInterruptEnable(0)) ? (1) : (0)));
  }else if(txbufnum < 32){
    set_GlobalTxInterruptStatusTXSuccess(1,(((RSCAN0TMTCSTS0 & 0xFFFF0000) & (RSCAN0TMIEC0 & 0xFFFF0000)) ? (1) : (0)));
    set_GlobalTxInterruptStatusTXAbort(1,(((RSCAN0TMTASTS0 & 0xFFFF0000) && get_TransmitAbortInterruptEnable(1)) ? (1) : (0)));
  }else if(txbufnum < 48){
    set_GlobalTxInterruptStatusTXSuccess(2,(((RSCAN0TMTCSTS1 & 0x0000FFFF) & (RSCAN0TMIEC1 & 0x0000FFFF)) ? (1) : (0)));
    set_GlobalTxInterruptStatusTXAbort(2,(((RSCAN0TMTASTS1 & 0x0000FFFF) && get_TransmitAbortInterruptEnable(2)) ? (1) : (0)));
  }else{
    set_GlobalTxInterruptStatusTXSuccess(3,(((RSCAN0TMTCSTS1 & 0xFFFF0000) & (RSCAN0TMIEC1 & 0xFFFF0000)) ? (1) : (0)));
    set_GlobalTxInterruptStatusTXAbort(3,(((RSCAN0TMTASTS1 & 0xFFFF0000) && get_TransmitAbortInterruptEnable(3)) ? (1) : (0)));
  }
  update_CIRQ_TX_fromTB(txbufnum);
}

unsigned RH850E1_CAN_pv::get_TransmitBufferTxResultFlag(unsigned txbufnum){
  return (((*(m_RSCAN0TMSTSp[txbufnum])) >> 1) & 0x3);
}

void RH850E1_CAN_pv::set_GlobalTxInterruptStatusTXSuccess(unsigned channel,unsigned value){
  RSCAN0GTINTSTS0 = (RSCAN0GTINTSTS0 & (~(0x1 << (channel*8+0))));
  RSCAN0GTINTSTS0 = (RSCAN0GTINTSTS0 | (value << (channel*8+0)));
}

void RH850E1_CAN_pv::set_TxBufferTXRequestBit(unsigned txbufnum,unsigned value){
  (*(m_RSCAN0TMCp[txbufnum])) = ((*(m_RSCAN0TMCp[txbufnum])) & (~(0x1 << 0)));
  (*(m_RSCAN0TMCp[txbufnum])) = ((*(m_RSCAN0TMCp[txbufnum])) | (value << 0));
}

void RH850E1_CAN_pv::set_TxBufferAbortRequestBit(unsigned txbufnum,unsigned value){
  (*(m_RSCAN0TMCp[txbufnum])) = ((*(m_RSCAN0TMCp[txbufnum])) & (~(0x1 << 1)));
  (*(m_RSCAN0TMCp[txbufnum])) = ((*(m_RSCAN0TMCp[txbufnum])) | (value << 1));
}

unsigned RH850E1_CAN_pv::get_TxBufferAbortRequestFlag(unsigned txbufnum){
  return (((*(m_RSCAN0TMSTSp[txbufnum])) >> 4) & 0x1);
}

void RH850E1_CAN_pv::set_GlobalTxInterruptStatusTXAbort(unsigned channel,unsigned value){
  RSCAN0GTINTSTS0 = (RSCAN0GTINTSTS0 & (~(0x1 << (channel*8+1))));
  RSCAN0GTINTSTS0 = (RSCAN0GTINTSTS0 | (value << (channel*8+1)));
}

unsigned RH850E1_CAN_pv::get_TransmitAbortInterruptEnable(unsigned channel){
  return (((*(m_RSCAN0CmCTR[channel])) >> 16) & 0x1);
}

unsigned RH850E1_CAN_pv::get_CommonFIFOTransmitHistoryDataStoreEnable(unsigned cfnum){
  return ((m_CFIFO_CFID[cfnum].first() >> 29) & 0x1);
}

unsigned RH850E1_CAN_pv::get_CommonFIFOLabelData(unsigned cfnum){
  return ((m_CFIFO_CFPTR[cfnum].first() >> 16) & 0xFFF);
}

unsigned RH850E1_CAN_pv::get_TxBufferTransmitHistoryDataStoreEnable(unsigned txbufnum){
  return (((*(m_RSCAN0TMIDp[txbufnum])) >> 29) & 0x1);
}

unsigned RH850E1_CAN_pv::get_TxBufferLabelData(unsigned txbufnum){
  return (((*(m_RSCAN0TMPTRp[txbufnum])) >> 16) & 0xFF);
}

unsigned RH850E1_CAN_pv::get_TransmitHistoryBufferEnable(unsigned channel){
  return (((*(m_RSCAN0THLCCm[channel])) >> 0) & 0x1);
}

unsigned RH850E1_CAN_pv::get_TransmitHistoryTargetBufferSelect(unsigned channel){
  return (((*(m_RSCAN0THLCCm[channel])) >> 10) & 0x1);
}

unsigned RH850E1_CAN_pv::get_TransmitHistoryUnReadDataCounter(unsigned channel){
  return (((*(m_RSCAN0THLSTSm[channel])) >> 8) & 0x1F);
}

void RH850E1_CAN_pv::set_TransmitHistoryUnReadDataCounter(unsigned channel,unsigned value){
  (*(m_RSCAN0THLSTSm[channel])) = ((*(m_RSCAN0THLSTSm[channel])) & (~(0x1F << 8)));
  (*(m_RSCAN0THLSTSm[channel])) = ((*(m_RSCAN0THLSTSm[channel])) | (value << 8));
}

void RH850E1_CAN_pv::set_TransmitHistoryInterruptFlag(unsigned channel,unsigned value){
  (*(m_RSCAN0THLSTSm[channel])) = ((*(m_RSCAN0THLSTSm[channel])) & (~(0x1 << 3)));
  (*(m_RSCAN0THLSTSm[channel])) = ((*(m_RSCAN0THLSTSm[channel])) | (value << 3));
  set_GlobalTxHistoryListInterrupt(channel,((get_TransmitHistoryInterruptFlag(channel) && get_TransmitHistoryInterruptFlagEnable(channel)) ? (1) : (0)));
  update_CIRQ_TX_fromTH(channel);
}

void RH850E1_CAN_pv::set_TxHistoryFullFlag(unsigned channel,unsigned value){
  (*(m_RSCAN0THLSTSm[channel])) = ((*(m_RSCAN0THLSTSm[channel])) & (~(0x1 << 1)));
  (*(m_RSCAN0THLSTSm[channel])) = ((*(m_RSCAN0THLSTSm[channel])) | (value << 1));
}

void RH850E1_CAN_pv::set_TxHistoryEmptyFlag(unsigned channel,unsigned value){
  (*(m_RSCAN0THLSTSm[channel])) = ((*(m_RSCAN0THLSTSm[channel])) & (~(0x1 << 0)));
  (*(m_RSCAN0THLSTSm[channel])) = ((*(m_RSCAN0THLSTSm[channel])) | (value << 0));
}

void RH850E1_CAN_pv::set_TransmitHistoryBufferOverflowFlag(unsigned channel,unsigned value){
  (*(m_RSCAN0THLSTSm[channel])) = ((*(m_RSCAN0THLSTSm[channel])) & (~(0x1 << 2)));
  (*(m_RSCAN0THLSTSm[channel])) = ((*(m_RSCAN0THLSTSm[channel])) | (value << 2));
}

unsigned RH850E1_CAN_pv::get_TransmitHistoryBufferOverflowFlag(unsigned channel){
  return (((*(m_RSCAN0THLSTSm[channel])) >> 2) & 0x1);
}

void RH850E1_CAN_pv::set_GlobalTransmitHistoryBufferOverflow(unsigned value){
  RSCAN0GERFL = RSCAN0GERFL & ((~(0x1 << 2)));
  RSCAN0GERFL = RSCAN0GERFL | ((value << 2));
}

unsigned RH850E1_CAN_pv::get_GlobalTransmitHistoryBufferOverflow(){
  return ((RSCAN0GERFL >> 2) & 0x1);
}

unsigned RH850E1_CAN_pv::get_GlobalTransmitHistoryBufferOverflowEnable(){
  return ((RSCAN0GERFL >> 10) & 0x1);
}

unsigned RH850E1_CAN_pv::get_TransmitHistoryInterruptFlag(unsigned channel){
  return (((*(m_RSCAN0THLSTSm[channel])) >> 3) & 0x1);
}

unsigned RH850E1_CAN_pv::get_TransmitHistoryInterruptFlagEnable(unsigned channel){
  return (((*(m_RSCAN0THLCCm[channel])) >> 8) & 0x1);
}

unsigned RH850E1_CAN_pv::get_CommonFIFOMessageTxInterval(unsigned cfnum){
  return (((*(m_RSCAN0CFCCk[cfnum])) >> 24) & 0xFF);
}

unsigned RH850E1_CAN_pv::get_TransmitHistoryInterruptSourceSelect(unsigned channel){
  return (((*(m_RSCAN0THLCCm[channel])) >> 9) & 0x1);
}

unsigned RH850E1_CAN_pv::get_CommonFIFOInterruptSourceSelect(unsigned cfnum){
  return (((*(m_RSCAN0CFCCk[cfnum])) >> 12) & 0x1);
}

void RH850E1_CAN_pv::set_GlobalTxHistoryListInterrupt(unsigned channel,unsigned value){
  RSCAN0GTINTSTS0 = (RSCAN0GTINTSTS0 & (~(0x1 << (channel*8+4))));
  RSCAN0GTINTSTS0 = (RSCAN0GTINTSTS0 | (value << (channel*8+4)));
}

unsigned RH850E1_CAN_pv::get_ReceiveRuleTableWriteEnable(){
  return ((RSCAN0GAFLECTR >> 8) & 0x1);
}

unsigned RH850E1_CAN_pv::get_ReceiveRuleTablePageNumber(){
  return ((RSCAN0GAFLECTR >> 0) & 0x1F);
}

unsigned RH850E1_CAN_pv::get_GlobalAcceptanceFilterIDE(unsigned idx){
  return ((m_RRT_FLID[idx] >> 31) & 0x1);
}

unsigned RH850E1_CAN_pv::get_GlobalAcceptanceFilterRTR(unsigned idx){
  return ((m_RRT_FLID[idx] >> 30) & 0x1);
}

unsigned RH850E1_CAN_pv::get_GlobalAcceptanceFilterReceiveRuleTargeMessageSelect(unsigned idx){
  return ((m_RRT_FLID[idx] >> 29) & 0x1);
}

unsigned RH850E1_CAN_pv::get_GlobalAcceptanceFilterID(unsigned idx){
  return ((m_RRT_FLID[idx] >> 0) & 0x1FFFFFFF);
}

unsigned RH850E1_CAN_pv::get_GlobalAcceptanceFilterIDEMask(unsigned idx){
  return ((m_RRT_FLM[idx] >> 31) & 0x1);
}

unsigned RH850E1_CAN_pv::get_GlobalAcceptanceFilterRTRMask(unsigned idx){
  return ((m_RRT_FLM[idx] >> 30) & 0x1);
}

unsigned RH850E1_CAN_pv::get_GlobalAcceptanceFilterIDMask(unsigned idx){
  return ((m_RRT_FLM[idx] >> 0) & 0x1FFFFFFF);
}

unsigned RH850E1_CAN_pv::get_GlobalAcceptanceFilterDLC(unsigned idx){
  unsigned tmp = ((m_RRT_FLP0[idx] >> 28) & 0xF);
  if(tmp > 8){
    tmp = 8;
  }
  return tmp;
}

unsigned RH850E1_CAN_pv::get_GlobalAcceptanceFilterReceiveRuleLabel(unsigned idx){
  return ((m_RRT_FLP0[idx] >> 16) & 0xFFF);
}

unsigned RH850E1_CAN_pv::get_GlobalAcceptanceFilterReceiveBufferEnable(unsigned idx){
  return ((m_RRT_FLP0[idx] >> 15) & 0x1);
}

unsigned RH850E1_CAN_pv::get_GlobalAcceptanceFilterReceiveBufferNumber(unsigned idx){
  return ((m_RRT_FLP0[idx] >> 8) & 0x7F);
}

unsigned RH850E1_CAN_pv::get_NumberOfChannelRules(unsigned channel){
  return ((RSCAN0GAFLCFG0 >> (channel * 8)) & 0xFF);
}

unsigned RH850E1_CAN_pv::get_ReceivedMessageIDE(unsigned channel){
  return ((m_rxmsg[channel][0] >> 0) & 0x1);
}

unsigned RH850E1_CAN_pv::get_ReceivedMessageRTR(unsigned channel){
  return ((m_rxmsg[channel][0] >> 1) & 0x1);
}

unsigned RH850E1_CAN_pv::get_ReceivedMessageID(unsigned channel){
  if(get_ReceivedMessageIDE(channel) == 0x1){
    return (((unsigned)(m_rxmsg[channel][1] & 0xFF) << 0) | ((unsigned)(m_rxmsg[channel][2] & 0xFF) << 8) | ((unsigned)(m_rxmsg[channel][3] & 0xFF) << 16) | ((unsigned)(m_rxmsg[channel][4] & 0x1F) << 24));
  }else{
    return (((unsigned)(m_rxmsg[channel][1] & 0xFF) << 0) | ((unsigned)(m_rxmsg[channel][2] & 0x7) << 8));
  }
}

unsigned RH850E1_CAN_pv::get_ReceivedMessageDLC(unsigned channel){
  if(get_ReceivedMessageIDE(channel) == 0x1){
    return m_rxmsg[channel][5];
  }else{
    return m_rxmsg[channel][3];
  }
}

unsigned RH850E1_CAN_pv::get_ReceivedMessageData(unsigned channel,unsigned byte){
  if(get_ReceivedMessageIDE(channel) == 0x1){
    return m_rxmsg[channel][6+byte];
  }else{
    return m_rxmsg[channel][4+byte];
  }
}

unsigned RH850E1_CAN_pv::get_MirrorFunctionEnable(){
  return ((RSCAN0GCFG >> 3) & 0x1);
}

unsigned RH850E1_CAN_pv::get_DLCReplacmentEnable(){
  return ((RSCAN0GCFG >> 2) & 0x1);
}

unsigned RH850E1_CAN_pv::get_DLCCheckEnable(){
  return ((RSCAN0GCFG >> 1) & 0x1);
}

void RH850E1_CAN_pv::set_DLCErrorFlag(unsigned value){
  RSCAN0GERFL = (RSCAN0GERFL & (~(0x1 << 0)));
  RSCAN0GERFL = (RSCAN0GERFL | (value << 0));
  GI_err.write(get_DLCErrorFlag() & get_DLCErrorInterruptEnable());
}

unsigned RH850E1_CAN_pv::get_DLCErrorFlag(){
  return ((RSCAN0GERFL >> 0) & 0x1);
}

unsigned RH850E1_CAN_pv::get_DLCErrorInterruptEnable(){
  return ((RSCAN0GCTR >> 8) & 0x1);
}

void RH850E1_CAN_pv::set_RXBufferNewData(unsigned rxbufnum,unsigned value){
  if(rxbufnum<32){
    RSCAN0RMND0 = (RSCAN0RMND0 & (~(0x1 << rxbufnum)));
    RSCAN0RMND0 = (RSCAN0RMND0 | (value << rxbufnum));
  }else{
    RSCAN0RMND1 = (RSCAN0RMND1 & (~(0x1 << (rxbufnum - 32))));
    RSCAN0RMND1 = (RSCAN0RMND1 | (value << (rxbufnum - 32)));
  }
}

void RH850E1_CAN_pv::set_RXBufferIDE(unsigned rxbufnum,unsigned value){
  (*(m_RSCAN0RMIDq[rxbufnum])) = ((*(m_RSCAN0RMIDq[rxbufnum])) & (~(0x1 << 31)));
  (*(m_RSCAN0RMIDq[rxbufnum])) = ((*(m_RSCAN0RMIDq[rxbufnum])) | (value << 31));
}

void RH850E1_CAN_pv::set_RXBufferRTR(unsigned rxbufnum,unsigned value){
  (*(m_RSCAN0RMIDq[rxbufnum])) = ((*(m_RSCAN0RMIDq[rxbufnum])) & (~(0x1 << 30)));
  (*(m_RSCAN0RMIDq[rxbufnum])) = ((*(m_RSCAN0RMIDq[rxbufnum])) | (value << 30));
}

void RH850E1_CAN_pv::set_RXBufferID(unsigned rxbufnum,unsigned value){
  (*(m_RSCAN0RMIDq[rxbufnum])) = ((*(m_RSCAN0RMIDq[rxbufnum])) & (~(0x1FFFFFFF << 0)));
  (*(m_RSCAN0RMIDq[rxbufnum])) = ((*(m_RSCAN0RMIDq[rxbufnum])) | (value << 0));
}

void RH850E1_CAN_pv::set_RXBufferDLC(unsigned rxbufnum,unsigned value){
  (*(m_RSCAN0RMPTRq[rxbufnum])) = ((*(m_RSCAN0RMPTRq[rxbufnum])) & (~(0xF << 28)));
  (*(m_RSCAN0RMPTRq[rxbufnum])) = ((*(m_RSCAN0RMPTRq[rxbufnum])) | (value << 28));
}

void RH850E1_CAN_pv::set_RXBufferLabelData(unsigned rxbufnum,unsigned value){
  (*(m_RSCAN0RMPTRq[rxbufnum])) = ((*(m_RSCAN0RMPTRq[rxbufnum])) & (~(0xFFF << 16)));
  (*(m_RSCAN0RMPTRq[rxbufnum])) = ((*(m_RSCAN0RMPTRq[rxbufnum])) | (value << 16));
}

void RH850E1_CAN_pv::set_RXBufferData(unsigned rxbufnum,unsigned byte,unsigned value){
  if(byte < 4){
    (*(m_RSCAN0RMDF0q[rxbufnum])) = ((*(m_RSCAN0RMDF0q[rxbufnum])) & (~(0xFF << (byte*8))));
    (*(m_RSCAN0RMDF0q[rxbufnum])) = ((*(m_RSCAN0RMDF0q[rxbufnum])) | (value << (byte*8)));
  }else{
    (*(m_RSCAN0RMDF1q[rxbufnum])) = ((*(m_RSCAN0RMDF1q[rxbufnum])) & (~(0xFF << ((byte-4)*8))));
    (*(m_RSCAN0RMDF1q[rxbufnum])) = ((*(m_RSCAN0RMDF1q[rxbufnum])) | (value << ((byte-4)*8)));
  }
}

unsigned RH850E1_CAN_pv::get_RXFIFOEnable(unsigned fifonum){
  return (((*(m_RSCAN0RFCCx[fifonum])) >> 0) & 0x1);
}

unsigned RH850E1_CAN_pv::get_RXFIFOInterruptEnable(unsigned fifonum){
  return (((*(m_RSCAN0RFCCx[fifonum])) >> 1) & 0x1);
}

unsigned RH850E1_CAN_pv::get_RXFIFOBufferDepth(unsigned fifonum){
  unsigned fifodepth = (((*(m_RSCAN0RFCCx[fifonum])) >> 8) & 0x7);
  switch(fifodepth){
    case 0: return 0;
    case 1: return 4;
    case 2: return 8;
    case 3: return 16;
    case 4: return 32;
    case 5: return 48;
    case 6: return 64;
    case 7: return 128;
  }
  return 0;
}

unsigned RH850E1_CAN_pv::get_RXFIFOInterruptSourceSelect(unsigned fifonum){
  return (((*(m_RSCAN0RFCCx[fifonum])) >> 12) & 0x1);
}

unsigned RH850E1_CAN_pv::get_RXFIFOInterruptRequestTimingSelect(unsigned fifonum){
  unsigned fifotimingselect = (((*(m_RSCAN0RFCCx[fifonum])) >> 13) & 0x7);
  if(get_RXFIFOBufferDepth(fifonum) == 4){
    return ((fifotimingselect + 1) / 2);
  }else{
    return ((get_RXFIFOBufferDepth(fifonum) / 8) * (fifotimingselect + 1));
  }
}

void RH850E1_CAN_pv::set_RXFIFOEmptyFlag(unsigned fifonum,unsigned value){
  (*(m_RSCAN0RFSTSx[fifonum])) = ((*(m_RSCAN0RFSTSx[fifonum])) & (~(0x1 << 0)));
  (*(m_RSCAN0RFSTSx[fifonum])) = ((*(m_RSCAN0RFSTSx[fifonum])) | (value << 0));
  RSCAN0FESTS = (RSCAN0FESTS & (~(0x1 << fifonum)));
  RSCAN0FESTS = (RSCAN0FESTS | (value << fifonum));
}

void RH850E1_CAN_pv::set_RXFIFOFullFlag(unsigned fifonum,unsigned value){
  (*(m_RSCAN0RFSTSx[fifonum])) = ((*(m_RSCAN0RFSTSx[fifonum])) & (~(0x1 << 1)));
  (*(m_RSCAN0RFSTSx[fifonum])) = ((*(m_RSCAN0RFSTSx[fifonum])) | (value << 1));
  RSCAN0FFSTS = (RSCAN0FFSTS & (~(0x1 << fifonum)));
  RSCAN0FFSTS = (RSCAN0FFSTS | (value << fifonum));
}

void RH850E1_CAN_pv::set_RXFIFOMessageLostFlag(unsigned fifonum,unsigned value){
  (*(m_RSCAN0RFSTSx[fifonum])) = ((*(m_RSCAN0RFSTSx[fifonum])) & (~(0x1 << 2)));
  (*(m_RSCAN0RFSTSx[fifonum])) = ((*(m_RSCAN0RFSTSx[fifonum])) | (value << 2));
  RSCAN0FMSTS = (RSCAN0FMSTS & (~(0x1 << fifonum)));
  RSCAN0FMSTS = (RSCAN0FMSTS | (value << fifonum));
  set_GlobalMessageLostFlag(((RSCAN0FMSTS)?(1):(0)));
}

void RH850E1_CAN_pv::set_RXFIFOInterruptRequestFlag(unsigned fifonum,unsigned value){
  (*(m_RSCAN0RFSTSx[fifonum])) = ((*(m_RSCAN0RFSTSx[fifonum])) & (~(0x1 << 3)));
  (*(m_RSCAN0RFSTSx[fifonum])) = ((*(m_RSCAN0RFSTSx[fifonum])) | (value << 3));
  RSCAN0RFISTS = (RSCAN0RFISTS & (~(0x1 << fifonum)));
  RSCAN0RFISTS = (RSCAN0RFISTS | (value << fifonum));
  GI_Rx.write(get_RXFIFOInterruptRequestFlag(fifonum) && get_RXFIFOInterruptEnable(fifonum));
}

void RH850E1_CAN_pv::set_RXFIFOMessageCounter(unsigned fifonum,unsigned value){
  (*(m_RSCAN0RFSTSx[fifonum])) = ((*(m_RSCAN0RFSTSx[fifonum])) & (~(0xFF << 8)));
  (*(m_RSCAN0RFSTSx[fifonum])) = ((*(m_RSCAN0RFSTSx[fifonum])) | (value << 8));
}

unsigned RH850E1_CAN_pv::get_RXFIFOMessageCounter(unsigned fifonum){
  return (((*(m_RSCAN0RFSTSx[fifonum])) >> 8) & 0xFF);
}

unsigned RH850E1_CAN_pv::get_RXFIFOInterruptRequestFlag(unsigned fifonum){
  return (((*(m_RSCAN0RFSTSx[fifonum])) >> 3) & 0x1);
}

void RH850E1_CAN_pv::set_GlobalMessageLostFlag(unsigned value){
  RSCAN0GERFL = (RSCAN0GERFL & (~(0x1 << 1)));
  RSCAN0GERFL = (RSCAN0GERFL | (value << 1));
  GI_err.write(get_GlobalMessageLostFlag() & get_GlobalMessageLostInterruptEnable());
}

unsigned RH850E1_CAN_pv::get_GlobalMessageLostFlag(){
  return ((RSCAN0GERFL >> 1) & 0x1);
}

unsigned RH850E1_CAN_pv::get_GlobalMessageLostInterruptEnable(){
  return ((RSCAN0GCTR >> 9) & 0x1);
}

unsigned RH850E1_CAN_pv::get_RXFIFOMessageLostFlag(unsigned fifonum){
  return (((*(m_RSCAN0RFSTSx[fifonum])) >> 2) & 0x1);
}

void RH850E1_CAN_pv::set_CommonFIFOMessageLostFlag(unsigned fifonum,unsigned value){
  (*(m_RSCAN0CFSTSk[fifonum])) = ((*(m_RSCAN0CFSTSk[fifonum])) & (~(0x1 << 2)));
  (*(m_RSCAN0CFSTSk[fifonum])) = ((*(m_RSCAN0CFSTSk[fifonum])) | (value << 2));
  RSCAN0FMSTS = (RSCAN0FMSTS & (~(0x1 << (fifonum+8))));
  RSCAN0FMSTS = (RSCAN0FMSTS | (value << (fifonum+8)));
  set_GlobalMessageLostFlag(((RSCAN0FMSTS)?(1):(0)));
}

unsigned RH850E1_CAN_pv::get_CommonFIFOMessageLostFlag(unsigned fifonum){
  return (((*(m_RSCAN0CFSTSk[fifonum])) >> 2) & 0x1);
}

unsigned RH850E1_CAN_pv::get_CommonFIFOInterruptRequestTimingSelect(unsigned fifonum){
  unsigned fifotimingselect = (((*(m_RSCAN0CFCCk[fifonum])) >> 13) & 0x7);
  if(get_CommonFIFOBufferDepth(fifonum) == 4){
    return ((fifotimingselect + 1) / 2);
  }else{
    return ((get_CommonFIFOBufferDepth(fifonum) / 8) * (fifotimingselect + 1));
  }
}

void RH850E1_CAN_pv::set_CommonFIFORxInterruptRequestFlag(unsigned fifonum,unsigned value){
  (*(m_RSCAN0RFSTSx[fifonum])) = ((*(m_RSCAN0RFSTSx[fifonum])) & (~(0x1 << 3)));
  (*(m_RSCAN0RFSTSx[fifonum])) = ((*(m_RSCAN0RFSTSx[fifonum])) | (value << 3));
  RSCAN0CFRISTS = (RSCAN0CFRISTS & (~(0x1 << fifonum)));
  RSCAN0CFRISTS = (RSCAN0CFRISTS | (value << fifonum));
  update_CIRQ_RX_fromCF(fifonum);
}

unsigned RH850E1_CAN_pv::get_CommonFIFORxInterruptRequestEnable(unsigned cfnum){
  return (((*(m_RSCAN0CFCCk[cfnum])) >> 1) & 0x1);
}

unsigned RH850E1_CAN_pv::get_CommonFIFORxInterruptRequestFlag(unsigned cfnum){
  return (((*(m_RSCAN0CFSTSk[cfnum])) >> 3) & 0x1);
}

unsigned RH850E1_CAN_pv::get_CommunicationTestModeEnable(unsigned channel){
  return (((*(m_RSCAN0CmCTR[channel])) >> 24) & 0x1);
}

unsigned RH850E1_CAN_pv::get_CommunicationTestModeSelect(unsigned channel){
  return (((*(m_RSCAN0CmCTR[channel])) >> 25) & 0x3);
}

unsigned RH850E1_CAN_pv::get_InterChannelCommunicationTestEnable(){
  return ((RSCAN0GTSTCTR >> 0) & 0x1);
}

unsigned RH850E1_CAN_pv::get_InterChannelCommunicationTestChannelEnable(unsigned channel){
  return ((RSCAN0GTSTCFG >> channel) & 0x1);
}

unsigned RH850E1_CAN_pv::get_TransmitQueueEnable(unsigned channel){
  return (((*(m_RSCAN0TXQCCm[channel])) >> 0) & 0x1);
}

unsigned RH850E1_CAN_pv::get_TransmitQueueDepth(unsigned channel){
  return (((*(m_RSCAN0TXQCCm[channel])) >> 8) & 0x4);
}

unsigned RH850E1_CAN_pv::get_TransmitQueueInterruptEnable(unsigned channel){
  return (((*(m_RSCAN0TXQCCm[channel])) >> 12) & 0x1);
}

unsigned RH850E1_CAN_pv::get_TransmitQueueInterruptSourceSelect(unsigned channel){
  return (((*(m_RSCAN0TXQCCm[channel])) >> 13) & 0x1);
}

unsigned RH850E1_CAN_pv::get_TransmitQueueInterruptFlag(unsigned channel){
  return (((*(m_RSCAN0TXQSTSm[channel])) >> 2) & 0x1);
}

void RH850E1_CAN_pv::set_TransmitQueueEmptyFlag(unsigned channel,unsigned value){
  (*(m_RSCAN0TXQSTSm[channel])) = ((*(m_RSCAN0TXQSTSm[channel])) & (~(0x1 << 0)));
  (*(m_RSCAN0TXQSTSm[channel])) = ((*(m_RSCAN0TXQSTSm[channel])) | (value << 0));
}

void RH850E1_CAN_pv::set_TransmitQueueFullFlag(unsigned channel,unsigned value){
  (*(m_RSCAN0TXQSTSm[channel])) = ((*(m_RSCAN0TXQSTSm[channel])) & (~(0x1 << 1)));
  (*(m_RSCAN0TXQSTSm[channel])) = ((*(m_RSCAN0TXQSTSm[channel])) | (value << 1));
}

void RH850E1_CAN_pv::set_TransmitQueueInterruptFlag(unsigned channel,unsigned value){
  (*(m_RSCAN0TXQSTSm[channel])) = ((*(m_RSCAN0TXQSTSm[channel])) & (~(0x1 << 2)));
  (*(m_RSCAN0TXQSTSm[channel])) = ((*(m_RSCAN0TXQSTSm[channel])) | (value << 2));
  set_GlobalTxInterruptStatusTXQueue(channel,((get_TransmitQueueInterruptFlag(channel) && get_TransmitQueueInterruptEnable(channel)) ? (1) : (0)));
  update_CIRQ_TX_fromTQ(channel);
}

unsigned RH850E1_CAN_pv::get_TransmitQueueFullFlag(unsigned channel){
  return (((*(m_RSCAN0TXQSTSm[channel])) >> 1) & 0x1);
}

unsigned RH850E1_CAN_pv::get_TxQueueIDE(unsigned channel,unsigned queueentry){
  return (((*(m_TQID[channel]))[queueentry] >> 31) & 0x1);
}

unsigned RH850E1_CAN_pv::get_TxQueueRTR(unsigned channel,unsigned queueentry){
  return (((*(m_TQID[channel]))[queueentry] >> 30) & 0x1);
}

unsigned RH850E1_CAN_pv::get_TxQueueTransmitHistoryDataStoreEnable(unsigned channel,unsigned queueentry){
  return (((*(m_TQID[channel]))[queueentry] >> 29) & 0x1);
}

unsigned RH850E1_CAN_pv::get_TxQueueID(unsigned channel,unsigned queueentry){
  return (((*(m_TQID[channel]))[queueentry] >> 0) & 0x1FFFFFFF);
}

unsigned RH850E1_CAN_pv::get_TxQueueLabelData(unsigned channel,unsigned queueentry){
  return (((*(m_TQPTR[channel]))[queueentry] >> 16) & 0xFFF);
}

unsigned RH850E1_CAN_pv::get_TxQueueDLC(unsigned channel,unsigned queueentry){
  unsigned tmp = (((*(m_TQPTR[channel]))[queueentry] >> 28) & 0xF);
  if(tmp > 8){
    tmp = 8;
  }
  return tmp;
}

unsigned RH850E1_CAN_pv::get_TxQueueData(unsigned channel,unsigned queueentry,unsigned byte){
  if(byte < 4){
    return (((*(m_TQDF0[channel]))[queueentry] >> (byte*8)) & 0xFF);
  }else{
    return (((*(m_TQDF1[channel]))[queueentry] >> ((byte-4)*8)) & 0xFF);
  }
}

void RH850E1_CAN_pv::set_GlobalTxInterruptStatusTXQueue(unsigned channel,unsigned value){
  RSCAN0GTINTSTS0 = (RSCAN0GTINTSTS0 & (~(0x1 << (channel*8+2))));
  RSCAN0GTINTSTS0 = (RSCAN0GTINTSTS0 | (value << (channel*8+2)));
}

unsigned RH850E1_CAN_pv::get_TimeStampSourceSelect(){
  return ((RSCAN0GCFG >> 12) & 0x1);
}

unsigned RH850E1_CAN_pv::get_CANClockSourceSelect(){
  return ((RSCAN0GCFG >> 4) & 0x1);
}

unsigned RH850E1_CAN_pv::get_TimeStampClockSourceSelect(){
  return ((RSCAN0GCFG >> 13) & 0x7);
}

unsigned RH850E1_CAN_pv::get_TimeStampClockSourceDivision(){
  return ((RSCAN0GCFG >> 8) & 0xF);
}

unsigned RH850E1_CAN_pv::get_PreScalerDivisionRatio(unsigned channel){
  return (((*(m_RSCAN0CmCFG[channel])) >> 0) & 0x3FF);
}

unsigned RH850E1_CAN_pv::get_TimeSegment1(unsigned channel){
  return (((*(m_RSCAN0CmCFG[channel])) >> 16) & 0xF);
}

unsigned RH850E1_CAN_pv::get_TimeSegment2(unsigned channel){
  return (((*(m_RSCAN0CmCFG[channel])) >> 20) & 0x7);
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void RH850E1_CAN_pv::update_CIRQ_TX_fromCF(unsigned cfnum){
  switch(cfnum){
    case 0:
    case 1:
    case 2:
      C0I_Tx.write(get_CommonFIFOTxInterruptRequestFlag(cfnum) && get_CommonFIFOTxInterruptRequestEnable(cfnum));
      break;
    case 3:
    case 4:
    case 5:
      C1I_Tx.write(get_CommonFIFOTxInterruptRequestFlag(cfnum) && get_CommonFIFOTxInterruptRequestEnable(cfnum));
      break;
    case 6:
    case 7:
    case 8:
      C2I_Tx.write(get_CommonFIFOTxInterruptRequestFlag(cfnum) && get_CommonFIFOTxInterruptRequestEnable(cfnum));
      break;
    case 9:
    case 10:
    case 11:
      C3I_Tx.write(get_CommonFIFOTxInterruptRequestFlag(cfnum) && get_CommonFIFOTxInterruptRequestEnable(cfnum));
      break;
  }
}
void RH850E1_CAN_pv::update_CIRQ_TX_fromTB(unsigned txbufnum){
  if(txbufnum < 16){
    C0I_Tx.write(((RSCAN0TMTCSTS0 & 0x0000FFFF) & (RSCAN0TMIEC0 & 0x0000FFFF)) || ((RSCAN0TMTASTS0 & 0x0000FFFF) && get_TransmitAbortInterruptEnable(0)));
  }else if(txbufnum < 32){
    C1I_Tx.write(((RSCAN0TMTCSTS0 & 0xFFFF0000) & (RSCAN0TMIEC0 & 0xFFFF0000)) || ((RSCAN0TMTASTS0 & 0xFFFF0000) && get_TransmitAbortInterruptEnable(1)));
  }else if(txbufnum < 48){
    C2I_Tx.write(((RSCAN0TMTCSTS1 & 0x0000FFFF) & (RSCAN0TMIEC1 & 0x0000FFFF)) || ((RSCAN0TMTASTS1 & 0x0000FFFF) && get_TransmitAbortInterruptEnable(2)));
  }else{
    C3I_Tx.write(((RSCAN0TMTCSTS1 & 0xFFFF0000) & (RSCAN0TMIEC1 & 0xFFFF0000)) || ((RSCAN0TMTASTS1 & 0xFFFF0000) && get_TransmitAbortInterruptEnable(3)));
  }
}
void RH850E1_CAN_pv::update_CIRQ_TX_fromTH(unsigned channel){
  switch(channel){
    case 0:
      C0I_Tx.write(get_TransmitHistoryInterruptFlag(channel) && get_TransmitHistoryInterruptFlagEnable(channel));
      break;
    case 1:
      C1I_Tx.write(get_TransmitHistoryInterruptFlag(channel) && get_TransmitHistoryInterruptFlagEnable(channel));
      break;
    case 2:
      C2I_Tx.write(get_TransmitHistoryInterruptFlag(channel) && get_TransmitHistoryInterruptFlagEnable(channel));
      break;
    case 3:
      C3I_Tx.write(get_TransmitHistoryInterruptFlag(channel) && get_TransmitHistoryInterruptFlagEnable(channel));
      break;
  }
}
void RH850E1_CAN_pv::update_CIRQ_TX_fromTQ(unsigned channel){
  switch(channel){
    case 0:
      C0I_Tx.write(get_TransmitQueueInterruptFlag(channel) && get_TransmitQueueInterruptEnable(channel));
      break;
    case 1:
      C1I_Tx.write(get_TransmitQueueInterruptFlag(channel) && get_TransmitQueueInterruptEnable(channel));
      break;
    case 2:
      C2I_Tx.write(get_TransmitQueueInterruptFlag(channel) && get_TransmitQueueInterruptEnable(channel));
      break;
    case 3:
      C3I_Tx.write(get_TransmitQueueInterruptFlag(channel) && get_TransmitQueueInterruptEnable(channel));
      break;
  }
}
void RH850E1_CAN_pv::update_CIRQ_RX_fromCF(unsigned cfnum){
  switch(cfnum){
    case 0:
    case 1:
    case 2:
      C0I_Rx.write(get_CommonFIFORxInterruptRequestFlag(cfnum) && get_CommonFIFORxInterruptRequestEnable(cfnum));
      break;
    case 3:
    case 4:
    case 5:
      C1I_Rx.write(get_CommonFIFORxInterruptRequestFlag(cfnum) && get_CommonFIFORxInterruptRequestEnable(cfnum));
      break;
    case 6:
    case 7:
    case 8:
      C2I_Rx.write(get_CommonFIFORxInterruptRequestFlag(cfnum) && get_CommonFIFORxInterruptRequestEnable(cfnum));
      break;
    case 9:
    case 10:
    case 11:
      C3I_Rx.write(get_CommonFIFORxInterruptRequestFlag(cfnum) && get_CommonFIFORxInterruptRequestEnable(cfnum));
      break;
  }
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
char* RH850E1_CAN_pv::get_GlobalModeName(GOperatingMode_t value){
  switch(value){
    case G_stop_mode:      return (char*)"Global Stop Mode";
    case G_reset_mode:     return (char*)"Global Reset Mode";
    case G_test_mode:      return (char*)"Global Test Mode";
    case G_operation_mode: return (char*)"Global Operation Mode";
    default:               return (char*)"Global UNKNOWN Mode";
  }
}
char* RH850E1_CAN_pv::get_ChannelModeName(COperatingMode_t value){
  switch(value){
    case C_stop_mode:      return (char*)"Channel Stop Mode";
    case C_reset_mode:     return (char*)"Channel Reset Mode";
    case C_halt_mode:      return (char*)"Channel Halt Mode";
    case C_operation_mode: return (char*)"Channel Operation Mode";
    default:               return (char*)"Channel UNKNOWN Mode";
  }
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void RH850E1_CAN_pv::update_CommonFIFOFullEmptyFlags(unsigned cfnum){
  if(m_CFIFO_CFID[cfnum].full()){
    gout(" Common FIFO "<<dec<<cfnum<<" becomes Full ");
    set_CommonFIFOFullFlag(cfnum,1);
  }else{
    set_CommonFIFOFullFlag(cfnum,0);
  }
  if(m_CFIFO_CFID[cfnum].empty()){
    gout(" Common FIFO "<<dec<<cfnum<<" becomes Empty ");
    set_CommonFIFOEmptyFlag(cfnum,1);
  }else{
    set_CommonFIFOEmptyFlag(cfnum,0);
  }
}
/////////////////////////////////////////////////////////////////////////////
void RH850E1_CAN_pv::update_GlobalMode(){

  unsigned gmdc = get_GlobalModeSelectBits();
  unsigned gslpr = get_GlobalStopModeBit();

  gout(" Current Global Mode is "<<get_GlobalModeName(m_GOMode));

  switch(m_GOMode){

    case G_stop_mode:
      if(gslpr == 0x0){
        m_GOMode = G_reset_mode;
        set_GlobalStopModeStatus(0);
        set_GlobalResetModeStatus(1);
      }
      break;

    case G_reset_mode:
      if(gslpr == 0x1){
        m_GOMode = G_stop_mode;
        set_GlobalResetModeStatus(0);
        set_GlobalStopModeStatus(1);
        for(unsigned i=0;i<4;i++){
          if(m_COMode[i] != C_stop_mode){
            gout(" adjust Channel "<<i<<" Mode from "<<get_ChannelModeName(m_COMode[i])<<" to be Channel Stop Mode ");
            m_COMode[i] = C_stop_mode;
            set_ChannelStopModeStatus(i,1);
            set_ChannelResetModeStatus(i,0);
            set_ChannelHaltModeStatus(i,0);
            set_ChannelCommunicationModeStatus(i,0);
            set_ChannelStopModeBit(i,1);
          }
        }
      }else{
        switch(gmdc){
          case 0:
            m_GOMode = G_operation_mode;
            set_GlobalResetModeStatus(0);
            resume_counter();
            break;
          case 2:
            m_GOMode = G_test_mode;
            set_GlobalResetModeStatus(0);
            set_GlobalTestModeStatus(1);
            break;
          default:
            break;
        }
      }
      break;

    case G_test_mode:
      switch(gmdc){
        case 0:
          m_GOMode = G_operation_mode;
          set_GlobalTestModeStatus(0);
          resume_counter();
          break;
        case 1:
          m_GOMode = G_reset_mode;
          set_GlobalTestModeStatus(0);
          set_GlobalResetModeStatus(1);
          for(unsigned i=0;i<4;i++){
            if(m_COMode[i] == C_halt_mode){
              gout(" adjust Channel "<<i<<" Mode from Channel Halt Mode to be Channel Reset Mode ");
              m_COMode[i] = C_reset_mode;
              set_ChannelResetModeStatus(i,1);
              set_ChannelHaltModeStatus(i,0);
              set_ChannelModeSelectBits(i,0x1);
            }
          }
          break;
        default:
          break;
      }
      break;

    case G_operation_mode:
      switch(gmdc){
        case 1:
          m_GOMode = G_reset_mode;
          set_GlobalResetModeStatus(1);
          for(unsigned i=0;i<4;i++){
            if((m_COMode[i] == C_operation_mode) || (m_COMode[i] == C_halt_mode)){
              gout(" adjust Channel "<<i<<" Mode from "<<get_ChannelModeName(m_COMode[i])<<" to be Channel Reset Mode ");
              m_COMode[i] = C_reset_mode;
              set_ChannelResetModeStatus(i,1);
              set_ChannelHaltModeStatus(i,0);
              set_ChannelCommunicationModeStatus(i,0);
              set_ChannelModeSelectBits(i,0x1);
            }
          }
          pause_counter();
          break;
        case 2:
          m_GOMode = G_test_mode;
          set_GlobalTestModeStatus(1);
          for(unsigned i=0;i<4;i++){
            if(m_COMode[i] == C_operation_mode){
              gout(" adjust Channel "<<i<<" Mode from Channel Operation Mode to be Channel Halt Mode ");
              set_ChannelHaltModeStatus(i,1);
              set_ChannelCommunicationModeStatus(i,0);
              m_COMode[i] = C_reset_mode;
              set_ChannelModeSelectBits(i,0x2);
            }
          }
          pause_counter();
          break;
        default:
          break;
      }
      break;
  }

  gout(" Updated Global Mode is "<<get_GlobalModeName(m_GOMode));
  reset_registers();

}
/////////////////////////////////////////////////////////////////////////////
void RH850E1_CAN_pv::update_ChannelMode(unsigned channel){

  unsigned chmdc = get_ChannelModeSelectBits(channel);
  unsigned cslpr = get_ChannelStopModeBit(channel);

  gout(" Current Channel "<<channel<<" Mode is "<<get_ChannelModeName(m_COMode[channel]));

  switch(m_COMode[channel]){

    case C_stop_mode:
      if(cslpr == 0x0){
        if(m_GOMode != G_stop_mode){
          m_COMode[channel] = C_reset_mode;
          set_ChannelStopModeStatus(channel,0);
          set_ChannelResetModeStatus(channel,1);
        }else{
          gout(" Can not switch from Channel Stop to Channel Reset while Global Mode is Stop ");
        }
      }
      break;

    case C_reset_mode:
      if(cslpr == 0x1){
        m_COMode[channel] = C_stop_mode;
        set_ChannelResetModeStatus(channel,0);
        set_ChannelStopModeStatus(channel,1);
      }else{
        switch(chmdc){
          case 0:
            if(m_GOMode == G_operation_mode){
              m_COMode[channel] = C_operation_mode;
              set_ChannelResetModeStatus(channel,0);
              set_ChannelCommunicationModeStatus(channel,1);
            }else{
              gout(" Can not switch from Channel Reset to Channel Operation while Global Mode is not Operation ");
            }
            break;
          case 2:
            if((m_GOMode == G_operation_mode) || (m_GOMode == G_test_mode)){
              m_COMode[channel] = C_halt_mode;
              set_ChannelResetModeStatus(channel,0);
              set_ChannelHaltModeStatus(channel,1);
            }else{
              gout(" Can not switch from Channel Reset to Channel Halt while Global Mode is not Operation or not Test ");
            }
            break;
          default:
            break;
        }
      }
      break;

    case C_halt_mode:
      switch(chmdc){
        case 0:
          if(m_GOMode == G_operation_mode){
            m_COMode[channel] = C_operation_mode;
            set_ChannelHaltModeStatus(channel,0);
            set_ChannelCommunicationModeStatus(channel,1);
          }else{
            gout(" Can not switch from Channel Halt to Channel Operation while Global Mode is not Operation ");
          }
          break;
        case 1:
          m_COMode[channel] = C_reset_mode;
          set_ChannelHaltModeStatus(channel,0);
          set_ChannelResetModeStatus(channel,1);
          break;
        default:
          break;
      }
      break;

    case C_operation_mode:
      switch(chmdc){
        case 1:
          m_COMode[channel] = C_reset_mode;
          set_ChannelCommunicationModeStatus(channel,0);
          set_ChannelResetModeStatus(channel,1);
          break;
        case 2:
          m_COMode[channel] = C_halt_mode;
          set_ChannelCommunicationModeStatus(channel,0);
          set_ChannelHaltModeStatus(channel,1);
          break;
        default:
          break;
      }
      break;
  }

  gout(" Updated Channel "<<channel<<" Mode is "<<get_ChannelModeName(m_COMode[channel]));
  reset_registers();

}
/////////////////////////////////////////////////////////////////////////////
void RH850E1_CAN_pv::reset_registers(){

  if(m_GOMode == G_reset_mode){
    RSCAN0GSTS = RSCAN0GSTS & 0xFFFFFFFD;
    RSCAN0GERFL = RSCAN0GERFL & 0xFFFFFFF8;
    RSCAN0GTSC = RSCAN0GTSC & 0xFFFF0000;
    RSCAN0RMND0 = 0x0;
    RSCAN0RMND1 = 0x0;
    for(unsigned i=0;i<8;i++){
      (*(m_RSCAN0RFCCx[i])) = (*(m_RSCAN0RFCCx[i])) & 0xFFFFFFFE;
      (*(m_RSCAN0RFSTSx[i])) = 0x1;
    }
    for(unsigned i=0;i<12;i++){
      (*(m_RSCAN0CFCCk[i])) = ((get_CommonFIFOMode(i) == 0x0) ? ((*(m_RSCAN0CFCCk[i])) & 0xFFFFFFFE) : ((*(m_RSCAN0CFCCk[i]))));
      (*(m_RSCAN0CFSTSk[i])) = ((get_CommonFIFOMode(i) == 0x0) ? (0x1) : ((*(m_RSCAN0CFSTSk[i]))));
    }
    RSCAN0FESTS = 0xFFFFF;
    RSCAN0FFSTS = 0x0;
    RSCAN0FMSTS = 0x0;
    RSCAN0RFISTS = 0x0;
    RSCAN0CFRISTS = 0x0;
    RSCAN0GTSTCFG = 0x0;
    RSCAN0GTSTCTR = 0x0;
  }

  for(unsigned channel=0;channel<4;channel++){
    if(m_COMode[channel] == C_reset_mode){
      (*(m_RSCAN0CmCTR[channel])) = ((*(m_RSCAN0CmCTR[channel])) & 0xF8FFFFFC) | 0x00000001;
      (*(m_RSCAN0CmSTS[channel])) = (*(m_RSCAN0CmSTS[channel])) & 0x0000FF0A;
      (*(m_RSCAN0CmERFL[channel])) = 0x0;
      for(unsigned i=(channel*3);i<(channel*3+3);i++){
        (*(m_RSCAN0CFCCk[i])) = ((get_CommonFIFOMode(i) == 0x0) ? ((*(m_RSCAN0CFCCk[i]))) : ((*(m_RSCAN0CFCCk[i])) & 0xFFFFFFFE));
        (*(m_RSCAN0CFSTSk[i])) = ((get_CommonFIFOMode(i) == 0x0) ? ((*(m_RSCAN0CFSTSk[i]))) : (((*(m_RSCAN0CFSTSk[i])) & 0xFFFF00FC) | 0x00000001));
      }
      RSCAN0CFTISTS = 0x0;
      for(unsigned i=(channel*16);i<(channel*16+16);i++){
        (*(m_RSCAN0TMCp[i])) = 0x0;
        (*(m_RSCAN0TMSTSp[i])) = 0x0;
      }
      switch(channel){
        case 0:
          RSCAN0TMTRSTS0 = RSCAN0TMTRSTS0 & 0xFFFF0000;
          RSCAN0TMTARSTS0 = RSCAN0TMTARSTS0 & 0xFFFF0000;
          RSCAN0TMTCSTS0 = RSCAN0TMTCSTS0 & 0xFFFF0000;
          RSCAN0TMTASTS0 = RSCAN0TMTASTS0 & 0xFFFF0000;
          RSCAN0GTINTSTS0 = RSCAN0GTINTSTS0 & 0xFFFFFF00;
          break;
        case 1:
          RSCAN0TMTRSTS0 = RSCAN0TMTRSTS0 & 0x0000FFFF;
          RSCAN0TMTARSTS0 = RSCAN0TMTARSTS0 & 0x0000FFFF;
          RSCAN0TMTCSTS0 = RSCAN0TMTCSTS0 & 0x0000FFFF;
          RSCAN0TMTASTS0 = RSCAN0TMTASTS0 & 0x0000FFFF;
          RSCAN0GTINTSTS0 = RSCAN0GTINTSTS0 & 0xFFFF00FF;
          break;
        case 2:
          RSCAN0TMTRSTS1 = RSCAN0TMTRSTS1 & 0xFFFF0000;
          RSCAN0TMTARSTS1 = RSCAN0TMTARSTS1 & 0xFFFF0000;
          RSCAN0TMTCSTS1 = RSCAN0TMTCSTS1 & 0xFFFF0000;
          RSCAN0TMTASTS1 = RSCAN0TMTASTS1 & 0xFFFF0000;
          RSCAN0GTINTSTS0 = RSCAN0GTINTSTS0 & 0xFF00FFFF;
          break;
        case 3:
          RSCAN0TMTRSTS1 = RSCAN0TMTRSTS1 & 0x0000FFFF;
          RSCAN0TMTARSTS1 = RSCAN0TMTARSTS1 & 0x0000FFFF;
          RSCAN0TMTCSTS1 = RSCAN0TMTCSTS1 & 0x0000FFFF;
          RSCAN0TMTASTS1 = RSCAN0TMTASTS1 & 0x0000FFFF;
          RSCAN0GTINTSTS0 = RSCAN0GTINTSTS0 & 0x00FFFFFF;
          break;
      }
      (*(m_RSCAN0TXQCCm[channel])) = (*(m_RSCAN0TXQCCm[channel])) & 0xFFFFFFFE;
      (*(m_RSCAN0TXQSTSm[channel])) = 0x1;
      (*(m_RSCAN0THLCCm[channel])) = (*(m_RSCAN0THLCCm[channel])) & 0xFFFFFFFE;
      (*(m_RSCAN0THLSTSm[channel])) = 0x1;
    }
  }

}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void RH850E1_CAN_pv::try_tx(unsigned channel){

  if(m_COMode[channel] != C_operation_mode){
    gout(" Channel "<<channel<<" Can not Transmit in "<<get_ChannelModeName(m_COMode[channel]));
    return;
  }

  if(get_InterChannelCommunicationTestEnable() == 0x1){
    gout(" Model is in Inter Channel Communication Test ");
  }else if(get_CommunicationTestModeEnable(channel) == 0x1){
    unsigned test_mode = get_CommunicationTestModeSelect(channel);
    switch(test_mode){
      case 0:
        gout(" Channel "<<channel<<" is in Test Mode (CRC Test) ");
        return;
        break;
      case 1:
        gout(" Channel "<<channel<<" is in Test Mode (Listen Only), Cannot Transmit ");
      return;
        break;
      case 2:
        gout(" Channel "<<channel<<" is in Test Mode (External Loop back) ");
        break;
      case 3:
        gout(" Channel "<<channel<<" is in Test Mode (Internal Loop back) ");
        break;
    }
  }

  if((get_ChannelReceiveStatus(channel) == 0x1)){
    gout(" Channel "<<channel<<" RX is in progress, Request will be pending. ");
    return;
  }else if((get_ChannelTransmitStatus(channel) == 0x1) && (get_ChannelBusoffStatus(channel) == 0x0)){
    gout(" Channel "<<channel<<" TX is in progress, Request will be pending. ");
    return;
  }else if((get_ChannelTransmitStatus(channel) == 0x1) && (get_ChannelBusoffStatus(channel) == 0x1)){
    gout(" Channel "<<channel<<" In busoff state, Request will be pending. ");
    return;
  }else{
    gout(" Channel "<<channel<<" Start TX ... ");
  }

  while(m_COMode[channel] == C_operation_mode){
    unsigned mailbox2send = get_BufferToTransmit(channel);

    if(mailbox2send & 0xFFFF0000){
      gout(" Channel "<<channel<<" Can not found any Buffer to send, Go IDLE ... ");
      return;
    }

    send_mailbox(channel,mailbox2send);
  }

}
/////////////////////////////////////////////////////////////////////////////
unsigned RH850E1_CAN_pv::get_BufferToTransmit(unsigned channel){

  unsigned mailbox = 0xFFFFFFFF;
  unsigned minID = 0xFFFFFFFF;

  unsigned end = ((get_TransmitQueueEnable(channel)) ? (15-get_TransmitQueueDepth(channel)) : (16));
  for(unsigned i=0;i<end;i++){
    if(is_TransmitBufferLinkedToCommonFIFO(channel,i)){
      unsigned linkedcommonfifo = get_CommonFIFOLinkedToTransmitBuffer(channel,i);
      if(get_TransmitPriority() == 0x1){
        return i;
      }else{
        if(get_CommonFIFOID(channel*3+linkedcommonfifo) < minID){
          minID = get_CommonFIFOID(channel*3+linkedcommonfifo);
          mailbox = i;
        }
      }
    }else{
      if(get_TxBufferRequest(channel*16+i) == 0x1){
        if(get_TransmitPriority() == 0x1){
          return i;
        }else{
          if(get_TxBufferID(channel*16+i) < minID){
            minID = get_TxBufferID(channel*16+i);
            mailbox = i;
          }
        }
      }
    }
  }

  if((get_TransmitQueueEnable(channel) == 0x1) && (get_TransmitQueueDepth(channel) != 0x0)){
    for(unsigned j=0;j<m_TQID[channel]->size();j++){
      if(get_TransmitPriority() == 0x1){
        return 0xFF00 | j;
      }else{
        if(get_TxQueueID(channel,j) < minID){
          minID = get_TxQueueID(channel,j);
          mailbox = 0xFF00 | j;
        }
      }
    }
  }

  return mailbox;

}
/////////////////////////////////////////////////////////////////////////////
unsigned RH850E1_CAN_pv::is_CommonFIFOSetForTransmit(unsigned channel,unsigned cfnum){
  return (get_CommonFIFOEnable(channel*3+cfnum) && ((get_CommonFIFOMode(channel*3+cfnum) == 0x1) || (get_CommonFIFOMode(channel*3+cfnum) == 0x2)) && (get_CommonFIFOBufferDepth(channel*3+cfnum) != 0x0));
}
/////////////////////////////////////////////////////////////////////////////
unsigned RH850E1_CAN_pv::is_TransmitBufferLinkedToCommonFIFO(unsigned channel,unsigned txbuf){
  unsigned linked = 0;
  for(unsigned i=0;i<3;i++){
    if(is_CommonFIFOSetForTransmit(channel,i)){
      linked = linked || (get_CommonFIFOBufferLink(channel*3+i) == (channel*16+txbuf));
    }
  }
  return linked;
}
/////////////////////////////////////////////////////////////////////////////
unsigned RH850E1_CAN_pv::get_CommonFIFOLinkedToTransmitBuffer(unsigned channel,unsigned txbuf){
  for(unsigned i=0;i<3;i++){
    if(is_CommonFIFOSetForTransmit(channel,i)){
      if(get_CommonFIFOBufferLink(channel*3+i) == (channel*16+txbuf)){
        return i;
      }
    }
  }
  return 0xFFFFFFFF;
}
/////////////////////////////////////////////////////////////////////////////
void RH850E1_CAN_pv::send_mailbox(unsigned channel,unsigned txbuf){

  unsigned char msg[14];
  unsigned num = 0;

  set_ChannelTransmitStatus(channel,1);

  if(txbuf & 0xFF00){

    if(m_TQID[channel]->empty()){
      gout(" Transmit Queue "<<channel<<" is empty, no data to send ");
      set_ChannelTransmitStatus(channel,0);
      return;
    }

    msg[num++] = (((get_TxQueueIDE(channel,txbuf&0xFF) << 0) & 0x1) | ((get_TxQueueRTR(channel,txbuf&0xFF) << 1) & 0x1));
    if(get_TxQueueIDE(channel,txbuf&0xFF)){
      msg[num++] = ((get_TxQueueID(channel,txbuf&0xFF) >> 0) & 0xFF);
      msg[num++] = ((get_TxQueueID(channel,txbuf&0xFF) >> 8) & 0xFF);
      msg[num++] = ((get_TxQueueID(channel,txbuf&0xFF) >> 16) & 0xFF);
      msg[num++] = ((get_TxQueueID(channel,txbuf&0xFF) >> 24) & 0x1F);
    }else{
      msg[num++] = ((get_TxQueueID(channel,txbuf&0xFF) >> 0) & 0xFF);
      msg[num++] = ((get_TxQueueID(channel,txbuf&0xFF) >> 8) & 0x7);
    }
    msg[num++] = get_TxQueueDLC(channel,txbuf&0xFF);
    if(get_TxQueueRTR(channel,txbuf&0xFF) == 0x0){
      for(unsigned j=0;j<get_TxQueueDLC(channel,txbuf&0xFF);j++){
        msg[num++] = get_TxQueueData(channel,txbuf&0xFF,j);
      }
    }

    if(get_TxQueueTransmitHistoryDataStoreEnable(channel,txbuf&0xFF)){
      Store_TXList(channel,0x4,get_TransmitQueueDepth(channel)+1,get_TxQueueLabelData(channel,txbuf&0xFF));
    }

    m_TQID[channel]->erase(m_TQID[channel]->begin()+(txbuf&0xFF));
    m_TQPTR[channel]->erase(m_TQPTR[channel]->begin()+(txbuf&0xFF));
    m_TQDF0[channel]->erase(m_TQDF0[channel]->begin()+(txbuf&0xFF));
    m_TQDF1[channel]->erase(m_TQDF1[channel]->begin()+(txbuf&0xFF));
    update_TransmitQueueEmptyFullFlags(channel);

    if(get_InterChannelCommunicationTestEnable() == 0x1){
      for(unsigned j=0;j<4;j++){
        if(get_InterChannelCommunicationTestChannelEnable(j) == 0x1){
          gout(" Channel "<<j<<" included in Inter Channel Communication Test ");
          try_rx(j,msg,num);
        }else{
          gout(" Channel "<<j<<" not included in Inter Channel Communication Test ");
        }
      }
    }else if(get_CommunicationTestModeEnable(channel) == 0x1){
      unsigned test_mode = get_CommunicationTestModeSelect(channel);
      switch(test_mode){
        case 2:
          gout(" Channel "<<channel<<" is in Test Mode (External Loop back): Send PKT with size "<<dec<<num);
          TX_write(channel,msg,num);
          break;
        case 3:
          gout(" Channel "<<channel<<" is in Test Mode (Internal Loop back): Send PKT with size "<<dec<<num);
          try_rx(channel,msg,num);
          break;
      }
    }else{
      gout(" Send PKT with size "<<dec<<num<<" from Channel "<<channel);
      TX_write(channel,msg,num);
    }

    if(get_TransmitQueueInterruptSourceSelect(channel) == 0){
      if(m_TQID[channel]->empty()){
        set_TransmitQueueInterruptFlag(channel,1);
      }
    }else{
      set_TransmitQueueInterruptFlag(channel,1);
    }

  }else if(is_TransmitBufferLinkedToCommonFIFO(channel,txbuf)){

    unsigned linkedcommonfifo = get_CommonFIFOLinkedToTransmitBuffer(channel,txbuf);
    for(unsigned i=0;i<get_CommonFIFOMessageTxInterval(channel*3+linkedcommonfifo);i++){

      if(get_CommonFIFOMessageCounter(channel*3+linkedcommonfifo) == 0x0){
        gout(" Common FIFO "<<(channel*3+linkedcommonfifo)<<" is empty, no data to send ");
        gout(" "<<i<<" Messages Sent from "<<get_CommonFIFOMessageTxInterval(channel*3+linkedcommonfifo));
        set_ChannelTransmitStatus(channel,0);
        return;
      }

      msg[num++] = (((get_CommonFIFOIDE(channel*3+linkedcommonfifo) << 0) & 0x1) | ((get_CommonFIFORTR(channel*3+linkedcommonfifo) << 1) & 0x1));
      if(get_CommonFIFOIDE(channel*3+linkedcommonfifo)){
        msg[num++] = ((get_CommonFIFOID(channel*3+linkedcommonfifo) >> 0) & 0xFF);
        msg[num++] = ((get_CommonFIFOID(channel*3+linkedcommonfifo) >> 8) & 0xFF);
        msg[num++] = ((get_CommonFIFOID(channel*3+linkedcommonfifo) >> 16) & 0xFF);
        msg[num++] = ((get_CommonFIFOID(channel*3+linkedcommonfifo) >> 24) & 0x1F);
      }else{
        msg[num++] = ((get_CommonFIFOID(channel*3+linkedcommonfifo) >> 0) & 0xFF);
        msg[num++] = ((get_CommonFIFOID(channel*3+linkedcommonfifo) >> 8) & 0x7);
      }
      msg[num++] = get_CommonFIFODLC(channel*3+linkedcommonfifo);
      if(get_CommonFIFORTR(channel*3+linkedcommonfifo) == 0x0){
        for(unsigned j=0;j<get_CommonFIFODLC(channel*3+linkedcommonfifo);j++){
          msg[num++] = get_CommonFIFOData(channel*3+linkedcommonfifo,j);
        }
      }

      if(get_CommonFIFOTransmitHistoryDataStoreEnable(channel*3+linkedcommonfifo)){
        Store_TXList(channel,0x2,txbuf,get_CommonFIFOLabelData(channel*3+linkedcommonfifo));
      }

      unsigned dummy_data = 0;
      m_CFIFO_CFID[channel*3+linkedcommonfifo].read(&dummy_data,1);
      m_CFIFO_CFPTR[channel*3+linkedcommonfifo].read(&dummy_data,1);
      m_CFIFO_CFDF0[channel*3+linkedcommonfifo].read(&dummy_data,1);
      m_CFIFO_CFDF1[channel*3+linkedcommonfifo].read(&dummy_data,1);
      set_CommonFIFOMessageCounter(channel*3+linkedcommonfifo,get_CommonFIFOMessageCounter(channel*3+linkedcommonfifo)-1);
      update_CommonFIFOFullEmptyFlags(channel*3+linkedcommonfifo);

      if(get_InterChannelCommunicationTestEnable() == 0x1){
        for(unsigned j=0;j<4;j++){
          if(get_InterChannelCommunicationTestChannelEnable(j) == 0x1){
            gout(" Channel "<<j<<" included in Inter Channel Communication Test ");
            try_rx(j,msg,num);
          }else{
            gout(" Channel "<<j<<" not included in Inter Channel Communication Test ");
          }
        }
      }else if(get_CommunicationTestModeEnable(channel) == 0x1){
        unsigned test_mode = get_CommunicationTestModeSelect(channel);
        switch(test_mode){
          case 2:
            gout(" Channel "<<channel<<" is in Test Mode (External Loop back): Send PKT with size "<<dec<<num);
            TX_write(channel,msg,num);
            break;
          case 3:
            gout(" Channel "<<channel<<" is in Test Mode (Internal Loop back): Send PKT with size "<<dec<<num);
            try_rx(channel,msg,num);
            break;
        }
      }else{
        gout(" Send PKT with size "<<dec<<num<<" from Channel "<<channel);
        TX_write(channel,msg,num);
      }

      if(get_CommonFIFOInterruptSourceSelect(channel*3+linkedcommonfifo) == 0){
        if(get_CommonFIFOMessageCounter(channel*3+linkedcommonfifo) == 0x0){
          set_CommonFIFOTxInterruptRequestFlag(channel*3+linkedcommonfifo,1);
        }
      }else{
        set_CommonFIFOTxInterruptRequestFlag(channel*3+linkedcommonfifo,1);
      }

    }

  }else{

    set_TransmitBufferTxStatusFlag(channel*16+txbuf,1);

    msg[num++] = (((get_TXBufferIDE(channel*16+txbuf) << 0) & 0x1) | ((get_TXBufferRTR(channel*16+txbuf) << 1) & 0x1));
    if(get_TXBufferIDE(channel*16+txbuf)){
      msg[num++] = ((get_TXBufferID(channel*16+txbuf) >> 0) & 0xFF);
      msg[num++] = ((get_TXBufferID(channel*16+txbuf) >> 8) & 0xFF);
      msg[num++] = ((get_TXBufferID(channel*16+txbuf) >> 16) & 0xFF);
      msg[num++] = ((get_TXBufferID(channel*16+txbuf) >> 24) & 0x1F);
    }else{
      msg[num++] = ((get_TXBufferID(channel*16+txbuf) >> 0) & 0xFF);
      msg[num++] = ((get_TXBufferID(channel*16+txbuf) >> 8) & 0x7);
    }
    msg[num++] = get_TXBufferDLC(channel*16+txbuf);
    if(get_TXBufferRTR(channel*16+txbuf) == 0x0){
      for(unsigned j=0;j<get_TXBufferDLC(channel*16+txbuf);j++){
        msg[num++] = get_TXBufferData(channel*16+txbuf,j);
      }
    }

    if(get_TxBufferTransmitHistoryDataStoreEnable(channel*16+txbuf)){
      Store_TXList(channel,0x1,txbuf,get_TxBufferLabelData(channel*16+txbuf));
    }

    if(get_InterChannelCommunicationTestEnable() == 0x1){
        for(unsigned j=0;j<4;j++){
          if(get_InterChannelCommunicationTestChannelEnable(j) == 0x1){
            gout(" Channel "<<j<<" included in Inter Channel Communication Test ");
            try_rx(j,msg,num);
          }else{
            gout(" Channel "<<j<<" not included in Inter Channel Communication Test ");
          }
        }
      }else if(get_CommunicationTestModeEnable(channel) == 0x1){
      unsigned test_mode = get_CommunicationTestModeSelect(channel);
      switch(test_mode){
        case 2:
          gout(" Channel "<<channel<<" is in Test Mode (External Loop back): Send PKT with size "<<dec<<num);
          TX_write(channel,msg,num);
          break;
        case 3:
          gout(" Channel "<<channel<<" is in Test Mode (Internal Loop back): Send PKT with size "<<dec<<num);
          try_rx(channel,msg,num);
          break;
      }
    }else{
      gout(" Send PKT with size "<<dec<<num<<" from Channel "<<channel);
      TX_write(channel,msg,num);
    }

    set_TxBufferTXRequestBit(channel*16+txbuf,0);
    set_TxBufferTXRequestFlag(channel*16+txbuf,0);
    set_TransmitBufferTxStatusFlag(channel*16+txbuf,0);
    if(get_TxBufferAbortRequestFlag(channel*16+txbuf) == 0x0){
      set_TransmitBufferTxResultFlag(channel*16+txbuf,2);
    }else{
      set_TransmitBufferTxResultFlag(channel*16+txbuf,3);
    }
    
  }

  set_ChannelTransmitStatus(channel,0);

}
/////////////////////////////////////////////////////////////////////////////
void RH850E1_CAN_pv::TX_write(unsigned port,unsigned char * data,unsigned size){
      switch(port){
        case 0:
          TX0_write(0x0,data,size);
          break;
        case 1:
          TX0_write(0x0,data,size);
          break;
        case 2:
          TX0_write(0x0,data,size);
          break;
        case 3:
          TX0_write(0x0,data,size);
          break;
      }
}
/////////////////////////////////////////////////////////////////////////////
void RH850E1_CAN_pv::try_abort(unsigned txbuf){
  //TODO Check if TX buffer will not transmitted or next
  set_TxBufferAbortRequestBit(txbuf,0);
  set_TxBufferAbortRequestFlag(txbuf,0);
  set_TransmitBufferTxResultFlag(txbuf,1);
}
/////////////////////////////////////////////////////////////////////////////
void RH850E1_CAN_pv::Store_TXList(unsigned channel,unsigned buffertype,unsigned buffernum,unsigned info){

  if(get_TransmitHistoryBufferEnable(channel) == 0x0){
    gout(" Channel "<<channel<<" TX History List is disabled ");
    return;
  }

  if((get_TransmitHistoryTargetBufferSelect(channel) == 0x0) && (buffertype == 0x1)){
    gout(" Channel "<<channel<<" TX History List Can not take from Transmit Buffer ");
    return;
  }

  if((get_TransmitHistoryUnReadDataCounter(channel) == 16)){
    gout(" Channel "<<channel<<" TX History List is full ");
    set_TransmitHistoryBufferOverflowFlag(channel,1);
    update_GlobalTransmitHistoryBufferOverflow();
    return;
  }

  unsigned writedata = (((buffertype & 0x7) << 0) | ((buffernum & 0xF) << 3) | ((info & 0xFF) << 8));
  m_TXHistory[channel].write(&writedata,1);

  set_TransmitHistoryUnReadDataCounter(channel,get_TransmitHistoryUnReadDataCounter(channel)+1);
  update_TxBufferFullEmptyFlags(channel);

  if(get_TransmitHistoryInterruptSourceSelect(channel) == 0x0){
    if(get_TransmitHistoryUnReadDataCounter(channel) == 12){
      set_TransmitHistoryInterruptFlag(channel,1);
    }
  }else{
    if(get_TransmitHistoryUnReadDataCounter(channel) == 1){
      set_TransmitHistoryInterruptFlag(channel,1);
    }
  }

}
/////////////////////////////////////////////////////////////////////////////
void RH850E1_CAN_pv::update_TxBufferFullEmptyFlags(unsigned channel){

  if(m_TXHistory[channel].full()){
    gout(" TX History Buffer "<<dec<<channel<<" becomes Full ");
    set_TxHistoryFullFlag(channel,1);
  }else{
    set_TxHistoryFullFlag(channel,0);
  }

  if(m_TXHistory[channel].empty()){
    gout(" TX History Buffer "<<dec<<channel<<" becomes Empty ");
    set_TxHistoryEmptyFlag(channel,1);
  }else{
    set_TxHistoryEmptyFlag(channel,0);
  }

}
/////////////////////////////////////////////////////////////////////////////
void RH850E1_CAN_pv::update_GlobalTransmitHistoryBufferOverflow(){
  unsigned GTHBOV = 0;
  for(unsigned i=0;i<4;i++){
    GTHBOV = GTHBOV | get_TransmitHistoryBufferOverflowFlag(i);
  }
  set_GlobalTransmitHistoryBufferOverflow(GTHBOV);
  GI_err.write(get_GlobalTransmitHistoryBufferOverflow() && get_GlobalTransmitHistoryBufferOverflowEnable());
}
/////////////////////////////////////////////////////////////////////////////
void RH850E1_CAN_pv::update_TransmitQueueEmptyFullFlags(unsigned channel){

  if(m_TQID[channel]->size() == (get_TransmitQueueDepth(channel)+1)){
    gout(" Transmit Queue "<<dec<<channel<<" becomes Full ");
    set_TransmitQueueFullFlag(channel,1);
  }else{
    set_TransmitQueueFullFlag(channel,0);
  }

  if(m_TQID[channel]->empty()){
    gout(" Transmit Queue "<<dec<<channel<<" becomes Empty ");
    set_TransmitQueueEmptyFlag(channel,1);
  }else{
    set_TransmitQueueEmptyFlag(channel,0);
  }

}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void RH850E1_CAN_pv::RX_callback_write(unsigned channel,unsigned char* data,unsigned size){
  if(get_InterChannelCommunicationTestEnable() == 0x1){
    gout(" Model is in Inter Channel Communication Test Mode, cannot receive ");
  }else if(get_CommunicationTestModeEnable(channel) == 0x1){
    unsigned test_mode = get_CommunicationTestModeSelect(channel);
    switch(test_mode){
      case 0:
        gout(" Channel "<<channel<<" is in Test Mode (CRC Test), cannot receive ");
        break;
      case 3:
        gout(" Channel "<<channel<<" is in Test Mode (Internal Loop back), cannot receive ");
        break;
      default:
        try_rx(channel,data,size);
        break;
    }
  }else{
    try_rx(channel,data,size);
  }
}
/////////////////////////////////////////////////////////////////////////////
void RH850E1_CAN_pv::try_rx(unsigned channel,unsigned char* data,unsigned size){

  unsigned ownmsg = 0;
  if(m_COMode[channel] != C_operation_mode){
    gout(" Channel "<<channel<<" Can not Receive in "<<get_ChannelModeName(m_COMode[channel]));
    return;
  }

  if((get_InterChannelCommunicationTestEnable() == 0x1) && (get_InterChannelCommunicationTestChannelEnable(channel) == 0x1)){
    gout(" Channel "<<channel<<" is in Inter Channel Communication Test Mode ");
  }else if(get_CommunicationTestModeEnable(channel) == 0x1){
    unsigned test_mode = get_CommunicationTestModeSelect(channel);
    switch(test_mode){
      case 0:
        gout(" Channel "<<channel<<" is in Test Mode (CRC Test) ");
        return;
        break;
      case 1:
        gout(" Channel "<<channel<<" is in Test Mode (Listen Only) ");
        break;
      case 2:
        gout(" Channel "<<channel<<" is in Test Mode (External Loop back) ");
        break;
      case 3:
        gout(" Channel "<<channel<<" is in Test Mode (Internal Loop back) ");
        break;
    }
  }

  if((get_ChannelReceiveStatus(channel) == 0x1)){
    gout(" Channel "<<channel<<" RX is in progress, Message will be ignored. ");
    return;
  }else if((get_ChannelTransmitStatus(channel) == 0x1) && (get_ChannelBusoffStatus(channel) == 0x0) && (get_MirrorFunctionEnable() == 0x0) && (get_CommunicationTestModeEnable(channel) == 0x0) &&
           (get_InterChannelCommunicationTestEnable() == 0x0) && (get_InterChannelCommunicationTestChannelEnable(channel) == 0x0)){
    gout(" Channel "<<channel<<" TX is in progress, Message will be ignored. ");
    return;
  }else if((get_ChannelTransmitStatus(channel) == 0x1) && (get_ChannelBusoffStatus(channel) == 0x0) && (get_MirrorFunctionEnable() == 0x1)){
    gout(" Channel "<<channel<<" TX is in progress, but Mirror Function is enabled so Receive Transmitted Message. ");
    ownmsg = 1;
  }else if((get_ChannelTransmitStatus(channel) == 0x1) && (get_ChannelBusoffStatus(channel) == 0x1)){
    gout(" Channel "<<channel<<" In busoff state, Message will be ignored. ");
    return;
  }else{
    gout(" Channel "<<channel<<" Start RX ... ");
  }

  set_ChannelReceiveStatus(channel,0x1);
  receive_msg(ownmsg,channel,data,size);
  set_ChannelReceiveStatus(channel,0x0);

  if(is_CommonFIFOsetforGateway(channel)){
    gout(" Common FIFOs for Channel "<<dec<<channel<<" may have Messages for Transmit ");
    try_tx(channel);
  }

}
/////////////////////////////////////////////////////////////////////////////
void RH850E1_CAN_pv::receive_msg(unsigned ownmsg,unsigned channel,unsigned char* data,unsigned size){

  memset(&m_rxmsg[channel][0],0x0,14);
  memcpy(&m_rxmsg[channel][0],data,size);

  for(unsigned i=get_StartRule(channel);i<get_NumberOfChannelRules(channel);i++){
    if(ownmsg == get_GlobalAcceptanceFilterReceiveRuleTargeMessageSelect(i)){
      if((get_ReceivedMessageIDE(channel) & get_GlobalAcceptanceFilterIDEMask(i)) == (get_GlobalAcceptanceFilterIDE(i) & get_GlobalAcceptanceFilterIDEMask(i))){
        if((get_ReceivedMessageRTR(channel) & get_GlobalAcceptanceFilterRTRMask(i)) == (get_GlobalAcceptanceFilterRTR(i) & get_GlobalAcceptanceFilterRTRMask(i))){
          if((get_ReceivedMessageID(channel) & get_GlobalAcceptanceFilterIDMask(i)) == (get_GlobalAcceptanceFilterID(i) & get_GlobalAcceptanceFilterIDMask(i))){
            if(get_DLCCheckEnable() == 0x1){
              if(get_ReceivedMessageDLC(channel) >= get_GlobalAcceptanceFilterDLC(i)){
                write_ReceivedMessage(channel,i);
                break;
              }else{
                set_DLCErrorFlag(0x1);
              }
            }else{
              write_ReceivedMessage(channel,i);
              break;
            }
          }
        }
      }
    }
  }

}
/////////////////////////////////////////////////////////////////////////////
unsigned RH850E1_CAN_pv::get_StartRule(unsigned channel){
  switch(channel){
    case 0:
      return 0;
      break;
    case 1:
      return get_NumberOfChannelRules(0);
      break;
    case 2:
      return get_NumberOfChannelRules(0) + get_NumberOfChannelRules(1);
      break;
    case 3:
      return get_NumberOfChannelRules(0) + get_NumberOfChannelRules(1) + get_NumberOfChannelRules(2);
      break;
  }
  return 0;
}
/////////////////////////////////////////////////////////////////////////////
void RH850E1_CAN_pv::write_ReceivedMessage(unsigned channel,unsigned idx){

  gout(" Channel "<<channel<<" Receive Message pass filters rule "<<dec<<idx);

  unsigned receivein = 0;

  if(get_GlobalAcceptanceFilterReceiveBufferEnable(idx) == 0x1){

    receivein = 1;
    gout(" Write to Receive Buffer "<<dec<<get_GlobalAcceptanceFilterReceiveBufferNumber(idx));
    set_RXBufferNewData(get_GlobalAcceptanceFilterReceiveBufferNumber(idx),1);

    set_RXBufferIDE(get_GlobalAcceptanceFilterReceiveBufferNumber(idx),get_ReceivedMessageIDE(channel));
    set_RXBufferRTR(get_GlobalAcceptanceFilterReceiveBufferNumber(idx),get_ReceivedMessageRTR(channel));
    set_RXBufferID(get_GlobalAcceptanceFilterReceiveBufferNumber(idx),get_ReceivedMessageID(channel));
    set_RXBufferLabelData(get_GlobalAcceptanceFilterReceiveBufferNumber(idx),get_GlobalAcceptanceFilterReceiveRuleLabel(idx));

    if(get_DLCReplacmentEnable() == 0x1){

      gout(" DLC Replacment is enabled, will receive "<<get_GlobalAcceptanceFilterDLC(idx)<<" Byte ");
      set_RXBufferDLC(get_GlobalAcceptanceFilterReceiveBufferNumber(idx),get_GlobalAcceptanceFilterDLC(idx));
      for(unsigned i=0;i<get_ReceivedMessageDLC(channel);i++){
        if(i<get_GlobalAcceptanceFilterDLC(idx)){
          set_RXBufferData(get_GlobalAcceptanceFilterReceiveBufferNumber(idx),i,get_ReceivedMessageData(channel,i));
        }else{
          set_RXBufferData(get_GlobalAcceptanceFilterReceiveBufferNumber(idx),i,0);
        }
      }

    }else{

      gout(" DLC Replacment is disabled, will receive "<<get_ReceivedMessageDLC(channel)<<" Byte ");
      set_RXBufferDLC(get_GlobalAcceptanceFilterReceiveBufferNumber(idx),get_ReceivedMessageDLC(channel));
      for(unsigned i=0;i<get_ReceivedMessageDLC(channel);i++){
        set_RXBufferData(get_GlobalAcceptanceFilterReceiveBufferNumber(idx),i,get_ReceivedMessageData(channel,i));
      }

    }

  }

  for(unsigned i=0;i<20;i++){
    if(is_FIFOBufferUsed(idx,i)){
      if(receivein > 8){
        gout(" Can not Receive more than eight times ");
        return;
      }
      if(i<8){
        receivein++;
        write_ReceivedMessageinRXFIFO(channel,idx,i);
      }else{
        if(is_CommonFIFOMatchWithChannel(channel,(i-8))){
          receivein++;
          write_ReceivedMessageinCommonFIFO(channel,idx,(i-8));
        }else{
          gout(" Common FIFO "<<dec<<(i-8)<<" Can not be used in Channel "<<dec<<channel);
        }
      }
    }
  }

}
/////////////////////////////////////////////////////////////////////////////
unsigned RH850E1_CAN_pv::is_FIFOBufferUsed(unsigned idx,unsigned fifonum){
  return (m_RRT_FLP1[idx] & (0x1 << fifonum));
}
/////////////////////////////////////////////////////////////////////////////
unsigned RH850E1_CAN_pv::is_CommonFIFOMatchWithChannel(unsigned channel,unsigned cfnum){
  switch(cfnum){
    case 0:
    case 1:
    case 2:
      return (channel == 0);
      break;
    case 3:
    case 4:
    case 5:
      return (channel == 1);
      break;
    case 6:
    case 7:
    case 8:
      return (channel == 2);
      break;
    case 9:
    case 10:
    case 11:
      return (channel == 3);
      break;
  }
  return 0;
}
/////////////////////////////////////////////////////////////////////////////
void RH850E1_CAN_pv::write_ReceivedMessageinRXFIFO(unsigned channel,unsigned idx,unsigned fifonum){

  gout(" Write to Receive FIFO "<<dec<<fifonum);

  if(is_RXFIFOCanReceive(fifonum) == 0x0){
    gout(" Receive FIFO "<<dec<<fifonum<<" is not set for Receive ");
    return;
  }

  if(get_RXFIFOMessageCounter(fifonum) == get_RXFIFOBufferDepth(fifonum)){
    gout(" Receive FIFO is Full, Message will be lost ");
    set_RXFIFOMessageLostFlag(fifonum,1);
    return;
  }

  unsigned rxid = ((get_ReceivedMessageIDE(channel) & 0x1) << 31) | ((get_ReceivedMessageRTR(channel) & 0x1) << 30) | ((get_ReceivedMessageID(channel) & 0x1FFFFFFF) << 0);
  unsigned rxptr = ((get_GlobalAcceptanceFilterReceiveRuleLabel(idx) & 0xFFF) << 16);
  unsigned rxdf0 = 0;
  unsigned rxdf1 = 0;

  if(get_DLCReplacmentEnable() == 0x1){

    gout(" DLC Replacment is enabled, will receive "<<get_GlobalAcceptanceFilterDLC(idx)<<" Byte ");
    rxptr = rxptr | ((get_GlobalAcceptanceFilterDLC(idx) & 0xF) << 28);
    for(unsigned i=0;i<get_GlobalAcceptanceFilterDLC(idx);i++){
      if(i<4){
        rxdf0 = rxdf0 | ((get_ReceivedMessageData(channel,i) & 0xFF) << (i*8));
      }else{
        rxdf0 = rxdf0 | ((get_ReceivedMessageData(channel,i) & 0xFF) << ((i-4)*8));
      }
    }

  }else{

    gout(" DLC Replacment is disabled, will receive "<<get_ReceivedMessageDLC(channel)<<" Byte ");
    rxptr =  rxptr | ((get_ReceivedMessageDLC(channel) & 0xF) << 28);
    for(unsigned i=0;i<get_ReceivedMessageDLC(channel);i++){
      if(i<4){
        rxdf0 = rxdf0 | ((get_ReceivedMessageData(channel,i) & 0xFF) << (i*8));
      }else{
        rxdf0 = rxdf0 | ((get_ReceivedMessageData(channel,i) & 0xFF) << ((i-4)*8));
      }
    }

  }

  m_RFIFO_RFID[fifonum].write(&rxid,1);
  m_RFIFO_RFPTR[fifonum].write(&rxptr,1);
  m_RFIFO_RFDF0[fifonum].write(&rxdf0,1);
  m_RFIFO_RFDF1[fifonum].write(&rxdf1,1);

  set_RXFIFOMessageCounter(fifonum,get_RXFIFOMessageCounter(fifonum)+1);
  update_RXFIFOFullEmptyFlags(fifonum);

  if(get_RXFIFOInterruptSourceSelect(fifonum) == 0x0){
    if(get_RXFIFOMessageCounter(fifonum) >= get_RXFIFOInterruptRequestTimingSelect(fifonum)){
      set_RXFIFOInterruptRequestFlag(fifonum,1);
    }
  }else{
    set_RXFIFOInterruptRequestFlag(fifonum,1);
  }

}
/////////////////////////////////////////////////////////////////////////////
unsigned RH850E1_CAN_pv::is_RXFIFOCanReceive(unsigned fifonum){
  return get_RXFIFOEnable(fifonum) && (get_RXFIFOBufferDepth(fifonum) != 0x0);
}
/////////////////////////////////////////////////////////////////////////////
void RH850E1_CAN_pv::update_RXFIFOFullEmptyFlags(unsigned fifonum){
  if(m_RFIFO_RFID[fifonum].full()){
    gout(" Receive FIFO "<<dec<<fifonum<<" becomes Full ");
    set_RXFIFOFullFlag(fifonum,1);
  }else{
    set_RXFIFOFullFlag(fifonum,0);
  }
  if(m_RFIFO_RFID[fifonum].empty()){
    gout(" Receive FIFO "<<dec<<fifonum<<" becomes Empty ");
    set_RXFIFOEmptyFlag(fifonum,1);
  }else{
    set_RXFIFOEmptyFlag(fifonum,0);
  }
}
/////////////////////////////////////////////////////////////////////////////
unsigned RH850E1_CAN_pv::is_CommonFIFOSetForReceive(unsigned cfnum){
  return (get_CommonFIFOEnable(cfnum) && ((get_CommonFIFOMode(cfnum) == 0x0) || (get_CommonFIFOMode(cfnum) == 0x2)) && (get_CommonFIFOBufferDepth(cfnum) != 0x0));
}
/////////////////////////////////////////////////////////////////////////////
void RH850E1_CAN_pv::write_ReceivedMessageinCommonFIFO(unsigned channel,unsigned idx,unsigned fifonum){

  gout(" Write to Common FIFO "<<dec<<fifonum);

  if(is_CommonFIFOSetForReceive(fifonum) == 0x0){
    gout(" Common FIFO "<<dec<<fifonum<<" is not set for Receive ");
    return;
  }

  if(get_CommonFIFOMessageCounter(fifonum) == get_CommonFIFOBufferDepth(fifonum)){
    gout(" Receive FIFO is Full, Message will be lost ");
    set_CommonFIFOMessageLostFlag(fifonum,1);
    return;
  }

  unsigned rxid = ((get_ReceivedMessageIDE(channel) & 0x1) << 31) | ((get_ReceivedMessageRTR(channel) & 0x1) << 30) | ((get_ReceivedMessageID(channel) & 0x1FFFFFFF) << 0);
  unsigned rxptr = ((get_GlobalAcceptanceFilterReceiveRuleLabel(idx) & 0xFFF) << 16);
  unsigned rxdf0 = 0;
  unsigned rxdf1 = 0;

  if(get_DLCReplacmentEnable() == 0x1){

    gout(" DLC Replacment is enabled, will receive "<<get_GlobalAcceptanceFilterDLC(idx)<<" Byte ");
    rxptr = rxptr | ((get_GlobalAcceptanceFilterDLC(idx) & 0xF) << 28);
    for(unsigned i=0;i<get_GlobalAcceptanceFilterDLC(idx);i++){
      if(i<4){
        rxdf0 = rxdf0 | ((get_ReceivedMessageData(channel,i) & 0xFF) << (i*8));
      }else{
        rxdf0 = rxdf0 | ((get_ReceivedMessageData(channel,i) & 0xFF) << ((i-4)*8));
      }
    }

  }else{

    gout(" DLC Replacment is disabled, will receive "<<get_ReceivedMessageDLC(channel)<<" Byte ");
    rxptr =  rxptr | ((get_ReceivedMessageDLC(channel) & 0xF) << 28);
    for(unsigned i=0;i<get_ReceivedMessageDLC(channel);i++){
      if(i<4){
        rxdf0 = rxdf0 | ((get_ReceivedMessageData(channel,i) & 0xFF) << (i*8));
      }else{
        rxdf0 = rxdf0 | ((get_ReceivedMessageData(channel,i) & 0xFF) << ((i-4)*8));
      }
    }

  }

  m_CFIFO_CFID[fifonum].write(&rxid,1);
  m_CFIFO_CFPTR[fifonum].write(&rxptr,1);
  m_CFIFO_CFDF0[fifonum].write(&rxdf0,1);
  m_CFIFO_CFDF1[fifonum].write(&rxdf1,1);

  set_CommonFIFOMessageCounter(fifonum,get_CommonFIFOMessageCounter(fifonum)+1);
  update_CommonFIFOFullEmptyFlags(fifonum);

  if(get_CommonFIFOInterruptSourceSelect(fifonum) == 0x0){
    if(get_CommonFIFOMessageCounter(fifonum) >= get_CommonFIFOInterruptRequestTimingSelect(fifonum)){
      set_CommonFIFORxInterruptRequestFlag(fifonum,1);
    }
  }else{
    set_CommonFIFORxInterruptRequestFlag(fifonum,1);
  }

}
/////////////////////////////////////////////////////////////////////////////
unsigned RH850E1_CAN_pv::is_CommonFIFOsetforGateway(unsigned channel){
  unsigned have = 0;
  for(unsigned i=0;i<3;i++){
    have = have || (get_CommonFIFOEnable(channel*3+i) && (get_CommonFIFOMode(channel*3+i) == 0x2) && (get_CommonFIFOBufferDepth(channel*3+i) != 0x0) && (get_CommonFIFOMessageCounter(channel*3+i) != 0x0));
  }
  return have;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void RH850E1_CAN_pv::update_counter(){

  sc_core::sc_time clk;
  if(get_TimeStampSourceSelect()){
    clk = ((get_CANClockSourceSelect()) ? (clk_xincan * 2) : (clkc));
    clk = clk * (get_PreScalerDivisionRatio(get_TimeStampClockSourceSelect())+1) * (1 + get_TimeSegment1(get_TimeStampClockSourceSelect()) + get_TimeSegment2(get_TimeStampClockSourceSelect()));
  }else{
    clk = pclk/2;
  }
  clk = clk * (1 << get_TimeStampClockSourceDivision());
  m_cnt->set_period(clk);

}
void RH850E1_CAN_pv::pause_counter(){
  if(m_cnt->is_running() == true){
    m_cnt_val = m_cnt->get_value();
    m_cnt->set_running(false);
  }
}
void RH850E1_CAN_pv::resume_counter(){
  if(m_cnt->is_running() == false){
    m_cnt->set_value(m_cnt_val);
    m_cnt->set_running(true);
  }
}
unsigned RH850E1_CAN_pv::get_counter_value(){
  if(m_cnt->is_running() == true){
    return  m_cnt->get_value();
  }else{
    return m_cnt_val;
  }
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void RH850E1_CAN_pv::setup_reg(){

m_RSCAN0CmCFG[0] = &RSCAN0C0CFG;
m_RSCAN0CmCFG[1] = &RSCAN0C1CFG;
m_RSCAN0CmCFG[2] = &RSCAN0C2CFG;
m_RSCAN0CmCFG[3] = &RSCAN0C3CFG;

m_RSCAN0CmCTR[0] = &RSCAN0C0CTR;
m_RSCAN0CmCTR[1] = &RSCAN0C1CTR;
m_RSCAN0CmCTR[2] = &RSCAN0C2CTR;
m_RSCAN0CmCTR[3] = &RSCAN0C3CTR;

m_RSCAN0CmSTS[0] = &RSCAN0C0STS;
m_RSCAN0CmSTS[1] = &RSCAN0C1STS;
m_RSCAN0CmSTS[2] = &RSCAN0C2STS;
m_RSCAN0CmSTS[3] = &RSCAN0C3STS;

m_RSCAN0CmERFL[0] = &RSCAN0C0ERFL;
m_RSCAN0CmERFL[1] = &RSCAN0C1ERFL;
m_RSCAN0CmERFL[2] = &RSCAN0C2ERFL;
m_RSCAN0CmERFL[3] = &RSCAN0C3ERFL;
/////////////////////////////////////////////////////////////////////////////
m_RSCAN0RFCCx[0] = &RSCAN0RFCC0;
m_RSCAN0RFCCx[1] = &RSCAN0RFCC1;
m_RSCAN0RFCCx[2] = &RSCAN0RFCC2;
m_RSCAN0RFCCx[3] = &RSCAN0RFCC3;
m_RSCAN0RFCCx[4] = &RSCAN0RFCC4;
m_RSCAN0RFCCx[5] = &RSCAN0RFCC5;
m_RSCAN0RFCCx[6] = &RSCAN0RFCC6;
m_RSCAN0RFCCx[7] = &RSCAN0RFCC7;

m_RSCAN0RFSTSx[0] = &RSCAN0RFSTS0;
m_RSCAN0RFSTSx[1] = &RSCAN0RFSTS1;
m_RSCAN0RFSTSx[2] = &RSCAN0RFSTS2;
m_RSCAN0RFSTSx[3] = &RSCAN0RFSTS3;
m_RSCAN0RFSTSx[4] = &RSCAN0RFSTS4;
m_RSCAN0RFSTSx[5] = &RSCAN0RFSTS5;
m_RSCAN0RFSTSx[6] = &RSCAN0RFSTS6;
m_RSCAN0RFSTSx[7] = &RSCAN0RFSTS7;

m_RSCAN0RFPCTRx[0] = &RSCAN0RFPCTR0;
m_RSCAN0RFPCTRx[1] = &RSCAN0RFPCTR1;
m_RSCAN0RFPCTRx[2] = &RSCAN0RFPCTR2;
m_RSCAN0RFPCTRx[3] = &RSCAN0RFPCTR3;
m_RSCAN0RFPCTRx[4] = &RSCAN0RFPCTR4;
m_RSCAN0RFPCTRx[5] = &RSCAN0RFPCTR5;
m_RSCAN0RFPCTRx[6] = &RSCAN0RFPCTR6;
m_RSCAN0RFPCTRx[7] = &RSCAN0RFPCTR7;
/////////////////////////////////////////////////////////////////////////////
m_RSCAN0CFCCk[0] = &RSCAN0CFCC0;
m_RSCAN0CFCCk[1] = &RSCAN0CFCC1;
m_RSCAN0CFCCk[2] = &RSCAN0CFCC2;
m_RSCAN0CFCCk[3] = &RSCAN0CFCC3;
m_RSCAN0CFCCk[4] = &RSCAN0CFCC4;
m_RSCAN0CFCCk[5] = &RSCAN0CFCC5;
m_RSCAN0CFCCk[6] = &RSCAN0CFCC6;
m_RSCAN0CFCCk[7] = &RSCAN0CFCC7;
m_RSCAN0CFCCk[8] = &RSCAN0CFCC8;
m_RSCAN0CFCCk[9] = &RSCAN0CFCC9;
m_RSCAN0CFCCk[10] = &RSCAN0CFCC10;
m_RSCAN0CFCCk[11] = &RSCAN0CFCC11;

m_RSCAN0CFSTSk[0] = &RSCAN0CFSTS0;
m_RSCAN0CFSTSk[1] = &RSCAN0CFSTS1;
m_RSCAN0CFSTSk[2] = &RSCAN0CFSTS2;
m_RSCAN0CFSTSk[3] = &RSCAN0CFSTS3;
m_RSCAN0CFSTSk[4] = &RSCAN0CFSTS4;
m_RSCAN0CFSTSk[5] = &RSCAN0CFSTS5;
m_RSCAN0CFSTSk[6] = &RSCAN0CFSTS6;
m_RSCAN0CFSTSk[7] = &RSCAN0CFSTS7;
m_RSCAN0CFSTSk[8] = &RSCAN0CFSTS8;
m_RSCAN0CFSTSk[9] = &RSCAN0CFSTS9;
m_RSCAN0CFSTSk[10] = &RSCAN0CFSTS10;
m_RSCAN0CFSTSk[11] = &RSCAN0CFSTS11;

m_RSCAN0CFPCTRk[0] = &RSCAN0CFPCTR0;
m_RSCAN0CFPCTRk[1] = &RSCAN0CFPCTR1;
m_RSCAN0CFPCTRk[2] = &RSCAN0CFPCTR2;
m_RSCAN0CFPCTRk[3] = &RSCAN0CFPCTR3;
m_RSCAN0CFPCTRk[4] = &RSCAN0CFPCTR4;
m_RSCAN0CFPCTRk[5] = &RSCAN0CFPCTR5;
m_RSCAN0CFPCTRk[6] = &RSCAN0CFPCTR6;
m_RSCAN0CFPCTRk[7] = &RSCAN0CFPCTR7;
m_RSCAN0CFPCTRk[8] = &RSCAN0CFPCTR8;
m_RSCAN0CFPCTRk[9] = &RSCAN0CFPCTR9;
m_RSCAN0CFPCTRk[10] = &RSCAN0CFPCTR10;
m_RSCAN0CFPCTRk[11] = &RSCAN0CFPCTR11;
/////////////////////////////////////////////////////////////////////////////
m_RSCAN0TMCp[0] = &RSCAN0TMC0;
m_RSCAN0TMCp[1] = &RSCAN0TMC1;
m_RSCAN0TMCp[2] = &RSCAN0TMC2;
m_RSCAN0TMCp[3] = &RSCAN0TMC3;
m_RSCAN0TMCp[4] = &RSCAN0TMC4;
m_RSCAN0TMCp[5] = &RSCAN0TMC5;
m_RSCAN0TMCp[6] = &RSCAN0TMC6;
m_RSCAN0TMCp[7] = &RSCAN0TMC7;
m_RSCAN0TMCp[8] = &RSCAN0TMC8;
m_RSCAN0TMCp[9] = &RSCAN0TMC9;
m_RSCAN0TMCp[10] = &RSCAN0TMC10;
m_RSCAN0TMCp[11] = &RSCAN0TMC11;
m_RSCAN0TMCp[12] = &RSCAN0TMC12;
m_RSCAN0TMCp[13] = &RSCAN0TMC13;
m_RSCAN0TMCp[14] = &RSCAN0TMC14;
m_RSCAN0TMCp[15] = &RSCAN0TMC15;
m_RSCAN0TMCp[16] = &RSCAN0TMC16;
m_RSCAN0TMCp[17] = &RSCAN0TMC17;
m_RSCAN0TMCp[18] = &RSCAN0TMC18;
m_RSCAN0TMCp[19] = &RSCAN0TMC19;
m_RSCAN0TMCp[20] = &RSCAN0TMC20;
m_RSCAN0TMCp[21] = &RSCAN0TMC21;
m_RSCAN0TMCp[22] = &RSCAN0TMC22;
m_RSCAN0TMCp[23] = &RSCAN0TMC23;
m_RSCAN0TMCp[24] = &RSCAN0TMC24;
m_RSCAN0TMCp[25] = &RSCAN0TMC25;
m_RSCAN0TMCp[26] = &RSCAN0TMC26;
m_RSCAN0TMCp[27] = &RSCAN0TMC27;
m_RSCAN0TMCp[28] = &RSCAN0TMC28;
m_RSCAN0TMCp[29] = &RSCAN0TMC29;
m_RSCAN0TMCp[30] = &RSCAN0TMC30;
m_RSCAN0TMCp[31] = &RSCAN0TMC31;
m_RSCAN0TMCp[32] = &RSCAN0TMC32;
m_RSCAN0TMCp[33] = &RSCAN0TMC33;
m_RSCAN0TMCp[34] = &RSCAN0TMC34;
m_RSCAN0TMCp[35] = &RSCAN0TMC35;
m_RSCAN0TMCp[36] = &RSCAN0TMC36;
m_RSCAN0TMCp[37] = &RSCAN0TMC37;
m_RSCAN0TMCp[38] = &RSCAN0TMC38;
m_RSCAN0TMCp[39] = &RSCAN0TMC39;
m_RSCAN0TMCp[40] = &RSCAN0TMC40;
m_RSCAN0TMCp[41] = &RSCAN0TMC41;
m_RSCAN0TMCp[42] = &RSCAN0TMC42;
m_RSCAN0TMCp[43] = &RSCAN0TMC43;
m_RSCAN0TMCp[44] = &RSCAN0TMC44;
m_RSCAN0TMCp[45] = &RSCAN0TMC45;
m_RSCAN0TMCp[46] = &RSCAN0TMC46;
m_RSCAN0TMCp[47] = &RSCAN0TMC47;
m_RSCAN0TMCp[48] = &RSCAN0TMC48;
m_RSCAN0TMCp[49] = &RSCAN0TMC49;
m_RSCAN0TMCp[50] = &RSCAN0TMC50;
m_RSCAN0TMCp[51] = &RSCAN0TMC51;
m_RSCAN0TMCp[52] = &RSCAN0TMC52;
m_RSCAN0TMCp[53] = &RSCAN0TMC53;
m_RSCAN0TMCp[54] = &RSCAN0TMC54;
m_RSCAN0TMCp[55] = &RSCAN0TMC55;
m_RSCAN0TMCp[56] = &RSCAN0TMC56;
m_RSCAN0TMCp[57] = &RSCAN0TMC57;
m_RSCAN0TMCp[58] = &RSCAN0TMC58;
m_RSCAN0TMCp[59] = &RSCAN0TMC59;
m_RSCAN0TMCp[60] = &RSCAN0TMC60;
m_RSCAN0TMCp[61] = &RSCAN0TMC61;
m_RSCAN0TMCp[62] = &RSCAN0TMC62;
m_RSCAN0TMCp[63] = &RSCAN0TMC63;

m_RSCAN0TMSTSp[0] = &RSCAN0TMSTS0;
m_RSCAN0TMSTSp[1] = &RSCAN0TMSTS1;
m_RSCAN0TMSTSp[2] = &RSCAN0TMSTS2;
m_RSCAN0TMSTSp[3] = &RSCAN0TMSTS3;
m_RSCAN0TMSTSp[4] = &RSCAN0TMSTS4;
m_RSCAN0TMSTSp[5] = &RSCAN0TMSTS5;
m_RSCAN0TMSTSp[6] = &RSCAN0TMSTS6;
m_RSCAN0TMSTSp[7] = &RSCAN0TMSTS7;
m_RSCAN0TMSTSp[8] = &RSCAN0TMSTS8;
m_RSCAN0TMSTSp[9] = &RSCAN0TMSTS9;
m_RSCAN0TMSTSp[10] = &RSCAN0TMSTS10;
m_RSCAN0TMSTSp[11] = &RSCAN0TMSTS11;
m_RSCAN0TMSTSp[12] = &RSCAN0TMSTS12;
m_RSCAN0TMSTSp[13] = &RSCAN0TMSTS13;
m_RSCAN0TMSTSp[14] = &RSCAN0TMSTS14;
m_RSCAN0TMSTSp[15] = &RSCAN0TMSTS15;
m_RSCAN0TMSTSp[16] = &RSCAN0TMSTS16;
m_RSCAN0TMSTSp[17] = &RSCAN0TMSTS17;
m_RSCAN0TMSTSp[18] = &RSCAN0TMSTS18;
m_RSCAN0TMSTSp[19] = &RSCAN0TMSTS19;
m_RSCAN0TMSTSp[20] = &RSCAN0TMSTS20;
m_RSCAN0TMSTSp[21] = &RSCAN0TMSTS21;
m_RSCAN0TMSTSp[22] = &RSCAN0TMSTS22;
m_RSCAN0TMSTSp[23] = &RSCAN0TMSTS23;
m_RSCAN0TMSTSp[24] = &RSCAN0TMSTS24;
m_RSCAN0TMSTSp[25] = &RSCAN0TMSTS25;
m_RSCAN0TMSTSp[26] = &RSCAN0TMSTS26;
m_RSCAN0TMSTSp[27] = &RSCAN0TMSTS27;
m_RSCAN0TMSTSp[28] = &RSCAN0TMSTS28;
m_RSCAN0TMSTSp[29] = &RSCAN0TMSTS29;
m_RSCAN0TMSTSp[30] = &RSCAN0TMSTS30;
m_RSCAN0TMSTSp[31] = &RSCAN0TMSTS31;
m_RSCAN0TMSTSp[32] = &RSCAN0TMSTS32;
m_RSCAN0TMSTSp[33] = &RSCAN0TMSTS33;
m_RSCAN0TMSTSp[34] = &RSCAN0TMSTS34;
m_RSCAN0TMSTSp[35] = &RSCAN0TMSTS35;
m_RSCAN0TMSTSp[36] = &RSCAN0TMSTS36;
m_RSCAN0TMSTSp[37] = &RSCAN0TMSTS37;
m_RSCAN0TMSTSp[38] = &RSCAN0TMSTS38;
m_RSCAN0TMSTSp[39] = &RSCAN0TMSTS39;
m_RSCAN0TMSTSp[40] = &RSCAN0TMSTS40;
m_RSCAN0TMSTSp[41] = &RSCAN0TMSTS41;
m_RSCAN0TMSTSp[42] = &RSCAN0TMSTS42;
m_RSCAN0TMSTSp[43] = &RSCAN0TMSTS43;
m_RSCAN0TMSTSp[44] = &RSCAN0TMSTS44;
m_RSCAN0TMSTSp[45] = &RSCAN0TMSTS45;
m_RSCAN0TMSTSp[46] = &RSCAN0TMSTS46;
m_RSCAN0TMSTSp[47] = &RSCAN0TMSTS47;
m_RSCAN0TMSTSp[48] = &RSCAN0TMSTS48;
m_RSCAN0TMSTSp[49] = &RSCAN0TMSTS49;
m_RSCAN0TMSTSp[50] = &RSCAN0TMSTS50;
m_RSCAN0TMSTSp[51] = &RSCAN0TMSTS51;
m_RSCAN0TMSTSp[52] = &RSCAN0TMSTS52;
m_RSCAN0TMSTSp[53] = &RSCAN0TMSTS53;
m_RSCAN0TMSTSp[54] = &RSCAN0TMSTS54;
m_RSCAN0TMSTSp[55] = &RSCAN0TMSTS55;
m_RSCAN0TMSTSp[56] = &RSCAN0TMSTS56;
m_RSCAN0TMSTSp[57] = &RSCAN0TMSTS57;
m_RSCAN0TMSTSp[58] = &RSCAN0TMSTS58;
m_RSCAN0TMSTSp[59] = &RSCAN0TMSTS59;
m_RSCAN0TMSTSp[60] = &RSCAN0TMSTS60;
m_RSCAN0TMSTSp[61] = &RSCAN0TMSTS61;
m_RSCAN0TMSTSp[62] = &RSCAN0TMSTS62;
m_RSCAN0TMSTSp[63] = &RSCAN0TMSTS63;
/////////////////////////////////////////////////////////////////////////////
m_RSCAN0TXQCCm[0] = &RSCAN0TXQCC0;
m_RSCAN0TXQCCm[1] = &RSCAN0TXQCC1;
m_RSCAN0TXQCCm[2] = &RSCAN0TXQCC2;
m_RSCAN0TXQCCm[3] = &RSCAN0TXQCC3;

m_RSCAN0TXQSTSm[0] = &RSCAN0TXQSTS0;
m_RSCAN0TXQSTSm[1] = &RSCAN0TXQSTS1;
m_RSCAN0TXQSTSm[2] = &RSCAN0TXQSTS2;
m_RSCAN0TXQSTSm[3] = &RSCAN0TXQSTS3;

m_RSCAN0TXQPCTRm[0] = &RSCAN0TXQPCTR0;
m_RSCAN0TXQPCTRm[1] = &RSCAN0TXQPCTR1;
m_RSCAN0TXQPCTRm[2] = &RSCAN0TXQPCTR2;
m_RSCAN0TXQPCTRm[3] = &RSCAN0TXQPCTR3;
/////////////////////////////////////////////////////////////////////////////
m_RSCAN0THLCCm[0] = &RSCAN0THLCC0;
m_RSCAN0THLCCm[1] = &RSCAN0THLCC1;
m_RSCAN0THLCCm[2] = &RSCAN0THLCC2;
m_RSCAN0THLCCm[3] = &RSCAN0THLCC3;

m_RSCAN0THLSTSm[0] = &RSCAN0THLSTS0;
m_RSCAN0THLSTSm[1] = &RSCAN0THLSTS1;
m_RSCAN0THLSTSm[2] = &RSCAN0THLSTS2;
m_RSCAN0THLSTSm[3] = &RSCAN0THLSTS3;

m_RSCAN0THLPCTRm[0] = &RSCAN0THLPCTR0;
m_RSCAN0THLPCTRm[1] = &RSCAN0THLPCTR1;
m_RSCAN0THLPCTRm[2] = &RSCAN0THLPCTR2;
m_RSCAN0THLPCTRm[3] = &RSCAN0THLPCTR3;
/////////////////////////////////////////////////////////////////////////////
m_RSCAN0GAFLIDj[0] = &RSCAN0GAFLID0;
m_RSCAN0GAFLIDj[1] = &RSCAN0GAFLID1;
m_RSCAN0GAFLIDj[2] = &RSCAN0GAFLID2;
m_RSCAN0GAFLIDj[3] = &RSCAN0GAFLID3;
m_RSCAN0GAFLIDj[4] = &RSCAN0GAFLID4;
m_RSCAN0GAFLIDj[5] = &RSCAN0GAFLID5;
m_RSCAN0GAFLIDj[6] = &RSCAN0GAFLID6;
m_RSCAN0GAFLIDj[7] = &RSCAN0GAFLID7;
m_RSCAN0GAFLIDj[8] = &RSCAN0GAFLID8;
m_RSCAN0GAFLIDj[9] = &RSCAN0GAFLID9;
m_RSCAN0GAFLIDj[10] = &RSCAN0GAFLID10;
m_RSCAN0GAFLIDj[11] = &RSCAN0GAFLID11;
m_RSCAN0GAFLIDj[12] = &RSCAN0GAFLID12;
m_RSCAN0GAFLIDj[13] = &RSCAN0GAFLID13;
m_RSCAN0GAFLIDj[14] = &RSCAN0GAFLID14;
m_RSCAN0GAFLIDj[15] = &RSCAN0GAFLID15;

m_RSCAN0GAFLMj[0] = &RSCAN0GAFLM0;
m_RSCAN0GAFLMj[1] = &RSCAN0GAFLM1;
m_RSCAN0GAFLMj[2] = &RSCAN0GAFLM2;
m_RSCAN0GAFLMj[3] = &RSCAN0GAFLM3;
m_RSCAN0GAFLMj[4] = &RSCAN0GAFLM4;
m_RSCAN0GAFLMj[5] = &RSCAN0GAFLM5;
m_RSCAN0GAFLMj[6] = &RSCAN0GAFLM6;
m_RSCAN0GAFLMj[7] = &RSCAN0GAFLM7;
m_RSCAN0GAFLMj[8] = &RSCAN0GAFLM8;
m_RSCAN0GAFLMj[9] = &RSCAN0GAFLM9;
m_RSCAN0GAFLMj[10] = &RSCAN0GAFLM10;
m_RSCAN0GAFLMj[11] = &RSCAN0GAFLM11;
m_RSCAN0GAFLMj[12] = &RSCAN0GAFLM12;
m_RSCAN0GAFLMj[13] = &RSCAN0GAFLM13;
m_RSCAN0GAFLMj[14] = &RSCAN0GAFLM14;
m_RSCAN0GAFLMj[15] = &RSCAN0GAFLM15;

m_RSCAN0GAFLP0j[0] = &RSCAN0GAFLP00;
m_RSCAN0GAFLP0j[1] = &RSCAN0GAFLP01;
m_RSCAN0GAFLP0j[2] = &RSCAN0GAFLP02;
m_RSCAN0GAFLP0j[3] = &RSCAN0GAFLP03;
m_RSCAN0GAFLP0j[4] = &RSCAN0GAFLP04;
m_RSCAN0GAFLP0j[5] = &RSCAN0GAFLP05;
m_RSCAN0GAFLP0j[6] = &RSCAN0GAFLP06;
m_RSCAN0GAFLP0j[7] = &RSCAN0GAFLP07;
m_RSCAN0GAFLP0j[8] = &RSCAN0GAFLP08;
m_RSCAN0GAFLP0j[9] = &RSCAN0GAFLP09;
m_RSCAN0GAFLP0j[10] = &RSCAN0GAFLP010;
m_RSCAN0GAFLP0j[11] = &RSCAN0GAFLP011;
m_RSCAN0GAFLP0j[12] = &RSCAN0GAFLP012;
m_RSCAN0GAFLP0j[13] = &RSCAN0GAFLP013;
m_RSCAN0GAFLP0j[14] = &RSCAN0GAFLP014;
m_RSCAN0GAFLP0j[15] = &RSCAN0GAFLP015;

m_RSCAN0GAFLP1j[0] = &RSCAN0GAFLP10;
m_RSCAN0GAFLP1j[1] = &RSCAN0GAFLP11;
m_RSCAN0GAFLP1j[2] = &RSCAN0GAFLP12;
m_RSCAN0GAFLP1j[3] = &RSCAN0GAFLP13;
m_RSCAN0GAFLP1j[4] = &RSCAN0GAFLP14;
m_RSCAN0GAFLP1j[5] = &RSCAN0GAFLP15;
m_RSCAN0GAFLP1j[6] = &RSCAN0GAFLP16;
m_RSCAN0GAFLP1j[7] = &RSCAN0GAFLP17;
m_RSCAN0GAFLP1j[8] = &RSCAN0GAFLP18;
m_RSCAN0GAFLP1j[9] = &RSCAN0GAFLP19;
m_RSCAN0GAFLP1j[10] = &RSCAN0GAFLP110;
m_RSCAN0GAFLP1j[11] = &RSCAN0GAFLP111;
m_RSCAN0GAFLP1j[12] = &RSCAN0GAFLP112;
m_RSCAN0GAFLP1j[13] = &RSCAN0GAFLP113;
m_RSCAN0GAFLP1j[14] = &RSCAN0GAFLP114;
m_RSCAN0GAFLP1j[15] = &RSCAN0GAFLP115;
/////////////////////////////////////////////////////////////////////////////
m_RSCAN0RMIDq[0] = &RSCAN0RMID0;
m_RSCAN0RMIDq[1] = &RSCAN0RMID1;
m_RSCAN0RMIDq[2] = &RSCAN0RMID2;
m_RSCAN0RMIDq[3] = &RSCAN0RMID3;
m_RSCAN0RMIDq[4] = &RSCAN0RMID4;
m_RSCAN0RMIDq[5] = &RSCAN0RMID5;
m_RSCAN0RMIDq[6] = &RSCAN0RMID6;
m_RSCAN0RMIDq[7] = &RSCAN0RMID7;
m_RSCAN0RMIDq[8] = &RSCAN0RMID8;
m_RSCAN0RMIDq[9] = &RSCAN0RMID9;
m_RSCAN0RMIDq[10] = &RSCAN0RMID10;
m_RSCAN0RMIDq[11] = &RSCAN0RMID11;
m_RSCAN0RMIDq[12] = &RSCAN0RMID12;
m_RSCAN0RMIDq[13] = &RSCAN0RMID13;
m_RSCAN0RMIDq[14] = &RSCAN0RMID14;
m_RSCAN0RMIDq[15] = &RSCAN0RMID15;
m_RSCAN0RMIDq[16] = &RSCAN0RMID16;
m_RSCAN0RMIDq[17] = &RSCAN0RMID17;
m_RSCAN0RMIDq[18] = &RSCAN0RMID18;
m_RSCAN0RMIDq[19] = &RSCAN0RMID19;
m_RSCAN0RMIDq[20] = &RSCAN0RMID20;
m_RSCAN0RMIDq[21] = &RSCAN0RMID21;
m_RSCAN0RMIDq[22] = &RSCAN0RMID22;
m_RSCAN0RMIDq[23] = &RSCAN0RMID23;
m_RSCAN0RMIDq[24] = &RSCAN0RMID24;
m_RSCAN0RMIDq[25] = &RSCAN0RMID25;
m_RSCAN0RMIDq[26] = &RSCAN0RMID26;
m_RSCAN0RMIDq[27] = &RSCAN0RMID27;
m_RSCAN0RMIDq[28] = &RSCAN0RMID28;
m_RSCAN0RMIDq[29] = &RSCAN0RMID29;
m_RSCAN0RMIDq[30] = &RSCAN0RMID30;
m_RSCAN0RMIDq[31] = &RSCAN0RMID31;
m_RSCAN0RMIDq[32] = &RSCAN0RMID32;
m_RSCAN0RMIDq[33] = &RSCAN0RMID33;
m_RSCAN0RMIDq[34] = &RSCAN0RMID34;
m_RSCAN0RMIDq[35] = &RSCAN0RMID35;
m_RSCAN0RMIDq[36] = &RSCAN0RMID36;
m_RSCAN0RMIDq[37] = &RSCAN0RMID37;
m_RSCAN0RMIDq[38] = &RSCAN0RMID38;
m_RSCAN0RMIDq[39] = &RSCAN0RMID39;
m_RSCAN0RMIDq[40] = &RSCAN0RMID40;
m_RSCAN0RMIDq[41] = &RSCAN0RMID41;
m_RSCAN0RMIDq[42] = &RSCAN0RMID42;
m_RSCAN0RMIDq[43] = &RSCAN0RMID43;
m_RSCAN0RMIDq[44] = &RSCAN0RMID44;
m_RSCAN0RMIDq[45] = &RSCAN0RMID45;
m_RSCAN0RMIDq[46] = &RSCAN0RMID46;
m_RSCAN0RMIDq[47] = &RSCAN0RMID47;
m_RSCAN0RMIDq[48] = &RSCAN0RMID48;
m_RSCAN0RMIDq[49] = &RSCAN0RMID49;
m_RSCAN0RMIDq[50] = &RSCAN0RMID50;
m_RSCAN0RMIDq[51] = &RSCAN0RMID51;
m_RSCAN0RMIDq[52] = &RSCAN0RMID52;
m_RSCAN0RMIDq[53] = &RSCAN0RMID53;
m_RSCAN0RMIDq[54] = &RSCAN0RMID54;
m_RSCAN0RMIDq[55] = &RSCAN0RMID55;
m_RSCAN0RMIDq[56] = &RSCAN0RMID56;
m_RSCAN0RMIDq[57] = &RSCAN0RMID57;
m_RSCAN0RMIDq[58] = &RSCAN0RMID58;
m_RSCAN0RMIDq[59] = &RSCAN0RMID59;
m_RSCAN0RMIDq[60] = &RSCAN0RMID60;
m_RSCAN0RMIDq[61] = &RSCAN0RMID61;
m_RSCAN0RMIDq[62] = &RSCAN0RMID62;
m_RSCAN0RMIDq[63] = &RSCAN0RMID63;

m_RSCAN0RMPTRq[0] = &RSCAN0RMPTR0;
m_RSCAN0RMPTRq[1] = &RSCAN0RMPTR1;
m_RSCAN0RMPTRq[2] = &RSCAN0RMPTR2;
m_RSCAN0RMPTRq[3] = &RSCAN0RMPTR3;
m_RSCAN0RMPTRq[4] = &RSCAN0RMPTR4;
m_RSCAN0RMPTRq[5] = &RSCAN0RMPTR5;
m_RSCAN0RMPTRq[6] = &RSCAN0RMPTR6;
m_RSCAN0RMPTRq[7] = &RSCAN0RMPTR7;
m_RSCAN0RMPTRq[8] = &RSCAN0RMPTR8;
m_RSCAN0RMPTRq[9] = &RSCAN0RMPTR9;
m_RSCAN0RMPTRq[10] = &RSCAN0RMPTR10;
m_RSCAN0RMPTRq[11] = &RSCAN0RMPTR11;
m_RSCAN0RMPTRq[12] = &RSCAN0RMPTR12;
m_RSCAN0RMPTRq[13] = &RSCAN0RMPTR13;
m_RSCAN0RMPTRq[14] = &RSCAN0RMPTR14;
m_RSCAN0RMPTRq[15] = &RSCAN0RMPTR15;
m_RSCAN0RMPTRq[16] = &RSCAN0RMPTR16;
m_RSCAN0RMPTRq[17] = &RSCAN0RMPTR17;
m_RSCAN0RMPTRq[18] = &RSCAN0RMPTR18;
m_RSCAN0RMPTRq[19] = &RSCAN0RMPTR19;
m_RSCAN0RMPTRq[20] = &RSCAN0RMPTR20;
m_RSCAN0RMPTRq[21] = &RSCAN0RMPTR21;
m_RSCAN0RMPTRq[22] = &RSCAN0RMPTR22;
m_RSCAN0RMPTRq[23] = &RSCAN0RMPTR23;
m_RSCAN0RMPTRq[24] = &RSCAN0RMPTR24;
m_RSCAN0RMPTRq[25] = &RSCAN0RMPTR25;
m_RSCAN0RMPTRq[26] = &RSCAN0RMPTR26;
m_RSCAN0RMPTRq[27] = &RSCAN0RMPTR27;
m_RSCAN0RMPTRq[28] = &RSCAN0RMPTR28;
m_RSCAN0RMPTRq[29] = &RSCAN0RMPTR29;
m_RSCAN0RMPTRq[30] = &RSCAN0RMPTR30;
m_RSCAN0RMPTRq[31] = &RSCAN0RMPTR31;
m_RSCAN0RMPTRq[32] = &RSCAN0RMPTR32;
m_RSCAN0RMPTRq[33] = &RSCAN0RMPTR33;
m_RSCAN0RMPTRq[34] = &RSCAN0RMPTR34;
m_RSCAN0RMPTRq[35] = &RSCAN0RMPTR35;
m_RSCAN0RMPTRq[36] = &RSCAN0RMPTR36;
m_RSCAN0RMPTRq[37] = &RSCAN0RMPTR37;
m_RSCAN0RMPTRq[38] = &RSCAN0RMPTR38;
m_RSCAN0RMPTRq[39] = &RSCAN0RMPTR39;
m_RSCAN0RMPTRq[40] = &RSCAN0RMPTR40;
m_RSCAN0RMPTRq[41] = &RSCAN0RMPTR41;
m_RSCAN0RMPTRq[42] = &RSCAN0RMPTR42;
m_RSCAN0RMPTRq[43] = &RSCAN0RMPTR43;
m_RSCAN0RMPTRq[44] = &RSCAN0RMPTR44;
m_RSCAN0RMPTRq[45] = &RSCAN0RMPTR45;
m_RSCAN0RMPTRq[46] = &RSCAN0RMPTR46;
m_RSCAN0RMPTRq[47] = &RSCAN0RMPTR47;
m_RSCAN0RMPTRq[48] = &RSCAN0RMPTR48;
m_RSCAN0RMPTRq[49] = &RSCAN0RMPTR49;
m_RSCAN0RMPTRq[50] = &RSCAN0RMPTR50;
m_RSCAN0RMPTRq[51] = &RSCAN0RMPTR51;
m_RSCAN0RMPTRq[52] = &RSCAN0RMPTR52;
m_RSCAN0RMPTRq[53] = &RSCAN0RMPTR53;
m_RSCAN0RMPTRq[54] = &RSCAN0RMPTR54;
m_RSCAN0RMPTRq[55] = &RSCAN0RMPTR55;
m_RSCAN0RMPTRq[56] = &RSCAN0RMPTR56;
m_RSCAN0RMPTRq[57] = &RSCAN0RMPTR57;
m_RSCAN0RMPTRq[58] = &RSCAN0RMPTR58;
m_RSCAN0RMPTRq[59] = &RSCAN0RMPTR59;
m_RSCAN0RMPTRq[60] = &RSCAN0RMPTR60;
m_RSCAN0RMPTRq[61] = &RSCAN0RMPTR61;
m_RSCAN0RMPTRq[62] = &RSCAN0RMPTR62;
m_RSCAN0RMPTRq[63] = &RSCAN0RMPTR63;

m_RSCAN0RMDF0q[0] = &RSCAN0RMDF00;
m_RSCAN0RMDF0q[1] = &RSCAN0RMDF01;
m_RSCAN0RMDF0q[2] = &RSCAN0RMDF02;
m_RSCAN0RMDF0q[3] = &RSCAN0RMDF03;
m_RSCAN0RMDF0q[4] = &RSCAN0RMDF04;
m_RSCAN0RMDF0q[5] = &RSCAN0RMDF05;
m_RSCAN0RMDF0q[6] = &RSCAN0RMDF06;
m_RSCAN0RMDF0q[7] = &RSCAN0RMDF07;
m_RSCAN0RMDF0q[8] = &RSCAN0RMDF08;
m_RSCAN0RMDF0q[9] = &RSCAN0RMDF09;
m_RSCAN0RMDF0q[10] = &RSCAN0RMDF010;
m_RSCAN0RMDF0q[11] = &RSCAN0RMDF011;
m_RSCAN0RMDF0q[12] = &RSCAN0RMDF012;
m_RSCAN0RMDF0q[13] = &RSCAN0RMDF013;
m_RSCAN0RMDF0q[14] = &RSCAN0RMDF014;
m_RSCAN0RMDF0q[15] = &RSCAN0RMDF015;
m_RSCAN0RMDF0q[16] = &RSCAN0RMDF016;
m_RSCAN0RMDF0q[17] = &RSCAN0RMDF017;
m_RSCAN0RMDF0q[18] = &RSCAN0RMDF018;
m_RSCAN0RMDF0q[19] = &RSCAN0RMDF019;
m_RSCAN0RMDF0q[20] = &RSCAN0RMDF020;
m_RSCAN0RMDF0q[21] = &RSCAN0RMDF021;
m_RSCAN0RMDF0q[22] = &RSCAN0RMDF022;
m_RSCAN0RMDF0q[23] = &RSCAN0RMDF023;
m_RSCAN0RMDF0q[24] = &RSCAN0RMDF024;
m_RSCAN0RMDF0q[25] = &RSCAN0RMDF025;
m_RSCAN0RMDF0q[26] = &RSCAN0RMDF026;
m_RSCAN0RMDF0q[27] = &RSCAN0RMDF027;
m_RSCAN0RMDF0q[28] = &RSCAN0RMDF028;
m_RSCAN0RMDF0q[29] = &RSCAN0RMDF029;
m_RSCAN0RMDF0q[30] = &RSCAN0RMDF030;
m_RSCAN0RMDF0q[31] = &RSCAN0RMDF031;
m_RSCAN0RMDF0q[32] = &RSCAN0RMDF032;
m_RSCAN0RMDF0q[33] = &RSCAN0RMDF033;
m_RSCAN0RMDF0q[34] = &RSCAN0RMDF034;
m_RSCAN0RMDF0q[35] = &RSCAN0RMDF035;
m_RSCAN0RMDF0q[36] = &RSCAN0RMDF036;
m_RSCAN0RMDF0q[37] = &RSCAN0RMDF037;
m_RSCAN0RMDF0q[38] = &RSCAN0RMDF038;
m_RSCAN0RMDF0q[39] = &RSCAN0RMDF039;
m_RSCAN0RMDF0q[40] = &RSCAN0RMDF040;
m_RSCAN0RMDF0q[41] = &RSCAN0RMDF041;
m_RSCAN0RMDF0q[42] = &RSCAN0RMDF042;
m_RSCAN0RMDF0q[43] = &RSCAN0RMDF043;
m_RSCAN0RMDF0q[44] = &RSCAN0RMDF044;
m_RSCAN0RMDF0q[45] = &RSCAN0RMDF045;
m_RSCAN0RMDF0q[46] = &RSCAN0RMDF046;
m_RSCAN0RMDF0q[47] = &RSCAN0RMDF047;
m_RSCAN0RMDF0q[48] = &RSCAN0RMDF048;
m_RSCAN0RMDF0q[49] = &RSCAN0RMDF049;
m_RSCAN0RMDF0q[50] = &RSCAN0RMDF050;
m_RSCAN0RMDF0q[51] = &RSCAN0RMDF051;
m_RSCAN0RMDF0q[52] = &RSCAN0RMDF052;
m_RSCAN0RMDF0q[53] = &RSCAN0RMDF053;
m_RSCAN0RMDF0q[54] = &RSCAN0RMDF054;
m_RSCAN0RMDF0q[55] = &RSCAN0RMDF055;
m_RSCAN0RMDF0q[56] = &RSCAN0RMDF056;
m_RSCAN0RMDF0q[57] = &RSCAN0RMDF057;
m_RSCAN0RMDF0q[58] = &RSCAN0RMDF058;
m_RSCAN0RMDF0q[59] = &RSCAN0RMDF059;
m_RSCAN0RMDF0q[60] = &RSCAN0RMDF060;
m_RSCAN0RMDF0q[61] = &RSCAN0RMDF061;
m_RSCAN0RMDF0q[62] = &RSCAN0RMDF062;
m_RSCAN0RMDF0q[63] = &RSCAN0RMDF063;

m_RSCAN0RMDF1q[0] = &RSCAN0RMDF10;
m_RSCAN0RMDF1q[1] = &RSCAN0RMDF11;
m_RSCAN0RMDF1q[2] = &RSCAN0RMDF12;
m_RSCAN0RMDF1q[3] = &RSCAN0RMDF13;
m_RSCAN0RMDF1q[4] = &RSCAN0RMDF14;
m_RSCAN0RMDF1q[5] = &RSCAN0RMDF15;
m_RSCAN0RMDF1q[6] = &RSCAN0RMDF16;
m_RSCAN0RMDF1q[7] = &RSCAN0RMDF17;
m_RSCAN0RMDF1q[8] = &RSCAN0RMDF18;
m_RSCAN0RMDF1q[9] = &RSCAN0RMDF19;
m_RSCAN0RMDF1q[10] = &RSCAN0RMDF110;
m_RSCAN0RMDF1q[11] = &RSCAN0RMDF111;
m_RSCAN0RMDF1q[12] = &RSCAN0RMDF112;
m_RSCAN0RMDF1q[13] = &RSCAN0RMDF113;
m_RSCAN0RMDF1q[14] = &RSCAN0RMDF114;
m_RSCAN0RMDF1q[15] = &RSCAN0RMDF115;
m_RSCAN0RMDF1q[16] = &RSCAN0RMDF116;
m_RSCAN0RMDF1q[17] = &RSCAN0RMDF117;
m_RSCAN0RMDF1q[18] = &RSCAN0RMDF118;
m_RSCAN0RMDF1q[19] = &RSCAN0RMDF119;
m_RSCAN0RMDF1q[20] = &RSCAN0RMDF120;
m_RSCAN0RMDF1q[21] = &RSCAN0RMDF121;
m_RSCAN0RMDF1q[22] = &RSCAN0RMDF122;
m_RSCAN0RMDF1q[23] = &RSCAN0RMDF123;
m_RSCAN0RMDF1q[24] = &RSCAN0RMDF124;
m_RSCAN0RMDF1q[25] = &RSCAN0RMDF125;
m_RSCAN0RMDF1q[26] = &RSCAN0RMDF126;
m_RSCAN0RMDF1q[27] = &RSCAN0RMDF127;
m_RSCAN0RMDF1q[28] = &RSCAN0RMDF128;
m_RSCAN0RMDF1q[29] = &RSCAN0RMDF129;
m_RSCAN0RMDF1q[30] = &RSCAN0RMDF130;
m_RSCAN0RMDF1q[31] = &RSCAN0RMDF131;
m_RSCAN0RMDF1q[32] = &RSCAN0RMDF132;
m_RSCAN0RMDF1q[33] = &RSCAN0RMDF133;
m_RSCAN0RMDF1q[34] = &RSCAN0RMDF134;
m_RSCAN0RMDF1q[35] = &RSCAN0RMDF135;
m_RSCAN0RMDF1q[36] = &RSCAN0RMDF136;
m_RSCAN0RMDF1q[37] = &RSCAN0RMDF137;
m_RSCAN0RMDF1q[38] = &RSCAN0RMDF138;
m_RSCAN0RMDF1q[39] = &RSCAN0RMDF139;
m_RSCAN0RMDF1q[40] = &RSCAN0RMDF140;
m_RSCAN0RMDF1q[41] = &RSCAN0RMDF141;
m_RSCAN0RMDF1q[42] = &RSCAN0RMDF142;
m_RSCAN0RMDF1q[43] = &RSCAN0RMDF143;
m_RSCAN0RMDF1q[44] = &RSCAN0RMDF144;
m_RSCAN0RMDF1q[45] = &RSCAN0RMDF145;
m_RSCAN0RMDF1q[46] = &RSCAN0RMDF146;
m_RSCAN0RMDF1q[47] = &RSCAN0RMDF147;
m_RSCAN0RMDF1q[48] = &RSCAN0RMDF148;
m_RSCAN0RMDF1q[49] = &RSCAN0RMDF149;
m_RSCAN0RMDF1q[50] = &RSCAN0RMDF150;
m_RSCAN0RMDF1q[51] = &RSCAN0RMDF151;
m_RSCAN0RMDF1q[52] = &RSCAN0RMDF152;
m_RSCAN0RMDF1q[53] = &RSCAN0RMDF153;
m_RSCAN0RMDF1q[54] = &RSCAN0RMDF154;
m_RSCAN0RMDF1q[55] = &RSCAN0RMDF155;
m_RSCAN0RMDF1q[56] = &RSCAN0RMDF156;
m_RSCAN0RMDF1q[57] = &RSCAN0RMDF157;
m_RSCAN0RMDF1q[58] = &RSCAN0RMDF158;
m_RSCAN0RMDF1q[59] = &RSCAN0RMDF159;
m_RSCAN0RMDF1q[60] = &RSCAN0RMDF160;
m_RSCAN0RMDF1q[61] = &RSCAN0RMDF161;
m_RSCAN0RMDF1q[62] = &RSCAN0RMDF162;
m_RSCAN0RMDF1q[63] = &RSCAN0RMDF163;
/////////////////////////////////////////////////////////////////////////////
m_RSCAN0RFIDx[0] = &RSCAN0RFID0;
m_RSCAN0RFIDx[1] = &RSCAN0RFID1;
m_RSCAN0RFIDx[2] = &RSCAN0RFID2;
m_RSCAN0RFIDx[3] = &RSCAN0RFID3;
m_RSCAN0RFIDx[4] = &RSCAN0RFID4;
m_RSCAN0RFIDx[5] = &RSCAN0RFID5;
m_RSCAN0RFIDx[6] = &RSCAN0RFID6;
m_RSCAN0RFIDx[7] = &RSCAN0RFID7;

m_RSCAN0RFPTRx[0] = &RSCAN0RFPTR0;
m_RSCAN0RFPTRx[1] = &RSCAN0RFPTR1;
m_RSCAN0RFPTRx[2] = &RSCAN0RFPTR2;
m_RSCAN0RFPTRx[3] = &RSCAN0RFPTR3;
m_RSCAN0RFPTRx[4] = &RSCAN0RFPTR4;
m_RSCAN0RFPTRx[5] = &RSCAN0RFPTR5;
m_RSCAN0RFPTRx[6] = &RSCAN0RFPTR6;
m_RSCAN0RFPTRx[7] = &RSCAN0RFPTR7;

m_RSCAN0RFDF0x[0] = &RSCAN0RFDF00;
m_RSCAN0RFDF0x[1] = &RSCAN0RFDF01;
m_RSCAN0RFDF0x[2] = &RSCAN0RFDF02;
m_RSCAN0RFDF0x[3] = &RSCAN0RFDF03;
m_RSCAN0RFDF0x[4] = &RSCAN0RFDF04;
m_RSCAN0RFDF0x[5] = &RSCAN0RFDF05;
m_RSCAN0RFDF0x[6] = &RSCAN0RFDF06;
m_RSCAN0RFDF0x[7] = &RSCAN0RFDF07;

m_RSCAN0RFDF1x[0] = &RSCAN0RFDF10;
m_RSCAN0RFDF1x[1] = &RSCAN0RFDF11;
m_RSCAN0RFDF1x[2] = &RSCAN0RFDF12;
m_RSCAN0RFDF1x[3] = &RSCAN0RFDF13;
m_RSCAN0RFDF1x[4] = &RSCAN0RFDF14;
m_RSCAN0RFDF1x[5] = &RSCAN0RFDF15;
m_RSCAN0RFDF1x[6] = &RSCAN0RFDF16;
m_RSCAN0RFDF1x[7] = &RSCAN0RFDF17;
/////////////////////////////////////////////////////////////////////////////
m_RSCAN0CFIDk[0] = &RSCAN0CFID0;
m_RSCAN0CFIDk[1] = &RSCAN0CFID1;
m_RSCAN0CFIDk[2] = &RSCAN0CFID2;
m_RSCAN0CFIDk[3] = &RSCAN0CFID3;
m_RSCAN0CFIDk[4] = &RSCAN0CFID4;
m_RSCAN0CFIDk[5] = &RSCAN0CFID5;
m_RSCAN0CFIDk[6] = &RSCAN0CFID6;
m_RSCAN0CFIDk[7] = &RSCAN0CFID7;
m_RSCAN0CFIDk[8] = &RSCAN0CFID8;
m_RSCAN0CFIDk[9] = &RSCAN0CFID9;
m_RSCAN0CFIDk[10] = &RSCAN0CFID10;
m_RSCAN0CFIDk[11] = &RSCAN0CFID11;

m_RSCAN0CFPTRk[0] = &RSCAN0CFPTR0;
m_RSCAN0CFPTRk[1] = &RSCAN0CFPTR1;
m_RSCAN0CFPTRk[2] = &RSCAN0CFPTR2;
m_RSCAN0CFPTRk[3] = &RSCAN0CFPTR3;
m_RSCAN0CFPTRk[4] = &RSCAN0CFPTR4;
m_RSCAN0CFPTRk[5] = &RSCAN0CFPTR5;
m_RSCAN0CFPTRk[6] = &RSCAN0CFPTR6;
m_RSCAN0CFPTRk[7] = &RSCAN0CFPTR7;
m_RSCAN0CFPTRk[8] = &RSCAN0CFPTR8;
m_RSCAN0CFPTRk[9] = &RSCAN0CFPTR9;
m_RSCAN0CFPTRk[10] = &RSCAN0CFPTR10;
m_RSCAN0CFPTRk[11] = &RSCAN0CFPTR11;

m_RSCAN0CFDF0k[0] = &RSCAN0CFDF00;
m_RSCAN0CFDF0k[1] = &RSCAN0CFDF01;
m_RSCAN0CFDF0k[2] = &RSCAN0CFDF02;
m_RSCAN0CFDF0k[3] = &RSCAN0CFDF03;
m_RSCAN0CFDF0k[4] = &RSCAN0CFDF04;
m_RSCAN0CFDF0k[5] = &RSCAN0CFDF05;
m_RSCAN0CFDF0k[6] = &RSCAN0CFDF06;
m_RSCAN0CFDF0k[7] = &RSCAN0CFDF07;
m_RSCAN0CFDF0k[8] = &RSCAN0CFDF08;
m_RSCAN0CFDF0k[9] = &RSCAN0CFDF09;
m_RSCAN0CFDF0k[10] = &RSCAN0CFDF010;
m_RSCAN0CFDF0k[11] = &RSCAN0CFDF011;

m_RSCAN0CFDF1k[0] = &RSCAN0CFDF10;
m_RSCAN0CFDF1k[1] = &RSCAN0CFDF11;
m_RSCAN0CFDF1k[2] = &RSCAN0CFDF12;
m_RSCAN0CFDF1k[3] = &RSCAN0CFDF13;
m_RSCAN0CFDF1k[4] = &RSCAN0CFDF14;
m_RSCAN0CFDF1k[5] = &RSCAN0CFDF15;
m_RSCAN0CFDF1k[6] = &RSCAN0CFDF16;
m_RSCAN0CFDF1k[7] = &RSCAN0CFDF17;
m_RSCAN0CFDF1k[8] = &RSCAN0CFDF18;
m_RSCAN0CFDF1k[9] = &RSCAN0CFDF19;
m_RSCAN0CFDF1k[10] = &RSCAN0CFDF110;
m_RSCAN0CFDF1k[11] = &RSCAN0CFDF111;
/////////////////////////////////////////////////////////////////////////////
m_RSCAN0TMIDp[0] = &RSCAN0TMID0;
m_RSCAN0TMIDp[1] = &RSCAN0TMID1;
m_RSCAN0TMIDp[2] = &RSCAN0TMID2;
m_RSCAN0TMIDp[3] = &RSCAN0TMID3;
m_RSCAN0TMIDp[4] = &RSCAN0TMID4;
m_RSCAN0TMIDp[5] = &RSCAN0TMID5;
m_RSCAN0TMIDp[6] = &RSCAN0TMID6;
m_RSCAN0TMIDp[7] = &RSCAN0TMID7;
m_RSCAN0TMIDp[8] = &RSCAN0TMID8;
m_RSCAN0TMIDp[9] = &RSCAN0TMID9;
m_RSCAN0TMIDp[10] = &RSCAN0TMID10;
m_RSCAN0TMIDp[11] = &RSCAN0TMID11;
m_RSCAN0TMIDp[12] = &RSCAN0TMID12;
m_RSCAN0TMIDp[13] = &RSCAN0TMID13;
m_RSCAN0TMIDp[14] = &RSCAN0TMID14;
m_RSCAN0TMIDp[15] = &RSCAN0TMID15;
m_RSCAN0TMIDp[16] = &RSCAN0TMID16;
m_RSCAN0TMIDp[17] = &RSCAN0TMID17;
m_RSCAN0TMIDp[18] = &RSCAN0TMID18;
m_RSCAN0TMIDp[19] = &RSCAN0TMID19;
m_RSCAN0TMIDp[20] = &RSCAN0TMID20;
m_RSCAN0TMIDp[21] = &RSCAN0TMID21;
m_RSCAN0TMIDp[22] = &RSCAN0TMID22;
m_RSCAN0TMIDp[23] = &RSCAN0TMID23;
m_RSCAN0TMIDp[24] = &RSCAN0TMID24;
m_RSCAN0TMIDp[25] = &RSCAN0TMID25;
m_RSCAN0TMIDp[26] = &RSCAN0TMID26;
m_RSCAN0TMIDp[27] = &RSCAN0TMID27;
m_RSCAN0TMIDp[28] = &RSCAN0TMID28;
m_RSCAN0TMIDp[29] = &RSCAN0TMID29;
m_RSCAN0TMIDp[30] = &RSCAN0TMID30;
m_RSCAN0TMIDp[31] = &RSCAN0TMID31;
m_RSCAN0TMIDp[32] = &RSCAN0TMID32;
m_RSCAN0TMIDp[33] = &RSCAN0TMID33;
m_RSCAN0TMIDp[34] = &RSCAN0TMID34;
m_RSCAN0TMIDp[35] = &RSCAN0TMID35;
m_RSCAN0TMIDp[36] = &RSCAN0TMID36;
m_RSCAN0TMIDp[37] = &RSCAN0TMID37;
m_RSCAN0TMIDp[38] = &RSCAN0TMID38;
m_RSCAN0TMIDp[39] = &RSCAN0TMID39;
m_RSCAN0TMIDp[40] = &RSCAN0TMID40;
m_RSCAN0TMIDp[41] = &RSCAN0TMID41;
m_RSCAN0TMIDp[42] = &RSCAN0TMID42;
m_RSCAN0TMIDp[43] = &RSCAN0TMID43;
m_RSCAN0TMIDp[44] = &RSCAN0TMID44;
m_RSCAN0TMIDp[45] = &RSCAN0TMID45;
m_RSCAN0TMIDp[46] = &RSCAN0TMID46;
m_RSCAN0TMIDp[47] = &RSCAN0TMID47;
m_RSCAN0TMIDp[48] = &RSCAN0TMID48;
m_RSCAN0TMIDp[49] = &RSCAN0TMID49;
m_RSCAN0TMIDp[50] = &RSCAN0TMID50;
m_RSCAN0TMIDp[51] = &RSCAN0TMID51;
m_RSCAN0TMIDp[52] = &RSCAN0TMID52;
m_RSCAN0TMIDp[53] = &RSCAN0TMID53;
m_RSCAN0TMIDp[54] = &RSCAN0TMID54;
m_RSCAN0TMIDp[55] = &RSCAN0TMID55;
m_RSCAN0TMIDp[56] = &RSCAN0TMID56;
m_RSCAN0TMIDp[57] = &RSCAN0TMID57;
m_RSCAN0TMIDp[58] = &RSCAN0TMID58;
m_RSCAN0TMIDp[59] = &RSCAN0TMID59;
m_RSCAN0TMIDp[60] = &RSCAN0TMID60;
m_RSCAN0TMIDp[61] = &RSCAN0TMID61;
m_RSCAN0TMIDp[62] = &RSCAN0TMID62;
m_RSCAN0TMIDp[63] = &RSCAN0TMID63;

m_RSCAN0TMPTRp[0] = &RSCAN0TMPTR0;
m_RSCAN0TMPTRp[1] = &RSCAN0TMPTR1;
m_RSCAN0TMPTRp[2] = &RSCAN0TMPTR2;
m_RSCAN0TMPTRp[3] = &RSCAN0TMPTR3;
m_RSCAN0TMPTRp[4] = &RSCAN0TMPTR4;
m_RSCAN0TMPTRp[5] = &RSCAN0TMPTR5;
m_RSCAN0TMPTRp[6] = &RSCAN0TMPTR6;
m_RSCAN0TMPTRp[7] = &RSCAN0TMPTR7;
m_RSCAN0TMPTRp[8] = &RSCAN0TMPTR8;
m_RSCAN0TMPTRp[9] = &RSCAN0TMPTR9;
m_RSCAN0TMPTRp[10] = &RSCAN0TMPTR10;
m_RSCAN0TMPTRp[11] = &RSCAN0TMPTR11;
m_RSCAN0TMPTRp[12] = &RSCAN0TMPTR12;
m_RSCAN0TMPTRp[13] = &RSCAN0TMPTR13;
m_RSCAN0TMPTRp[14] = &RSCAN0TMPTR14;
m_RSCAN0TMPTRp[15] = &RSCAN0TMPTR15;
m_RSCAN0TMPTRp[16] = &RSCAN0TMPTR16;
m_RSCAN0TMPTRp[17] = &RSCAN0TMPTR17;
m_RSCAN0TMPTRp[18] = &RSCAN0TMPTR18;
m_RSCAN0TMPTRp[19] = &RSCAN0TMPTR19;
m_RSCAN0TMPTRp[20] = &RSCAN0TMPTR20;
m_RSCAN0TMPTRp[21] = &RSCAN0TMPTR21;
m_RSCAN0TMPTRp[22] = &RSCAN0TMPTR22;
m_RSCAN0TMPTRp[23] = &RSCAN0TMPTR23;
m_RSCAN0TMPTRp[24] = &RSCAN0TMPTR24;
m_RSCAN0TMPTRp[25] = &RSCAN0TMPTR25;
m_RSCAN0TMPTRp[26] = &RSCAN0TMPTR26;
m_RSCAN0TMPTRp[27] = &RSCAN0TMPTR27;
m_RSCAN0TMPTRp[28] = &RSCAN0TMPTR28;
m_RSCAN0TMPTRp[29] = &RSCAN0TMPTR29;
m_RSCAN0TMPTRp[30] = &RSCAN0TMPTR30;
m_RSCAN0TMPTRp[31] = &RSCAN0TMPTR31;
m_RSCAN0TMPTRp[32] = &RSCAN0TMPTR32;
m_RSCAN0TMPTRp[33] = &RSCAN0TMPTR33;
m_RSCAN0TMPTRp[34] = &RSCAN0TMPTR34;
m_RSCAN0TMPTRp[35] = &RSCAN0TMPTR35;
m_RSCAN0TMPTRp[36] = &RSCAN0TMPTR36;
m_RSCAN0TMPTRp[37] = &RSCAN0TMPTR37;
m_RSCAN0TMPTRp[38] = &RSCAN0TMPTR38;
m_RSCAN0TMPTRp[39] = &RSCAN0TMPTR39;
m_RSCAN0TMPTRp[40] = &RSCAN0TMPTR40;
m_RSCAN0TMPTRp[41] = &RSCAN0TMPTR41;
m_RSCAN0TMPTRp[42] = &RSCAN0TMPTR42;
m_RSCAN0TMPTRp[43] = &RSCAN0TMPTR43;
m_RSCAN0TMPTRp[44] = &RSCAN0TMPTR44;
m_RSCAN0TMPTRp[45] = &RSCAN0TMPTR45;
m_RSCAN0TMPTRp[46] = &RSCAN0TMPTR46;
m_RSCAN0TMPTRp[47] = &RSCAN0TMPTR47;
m_RSCAN0TMPTRp[48] = &RSCAN0TMPTR48;
m_RSCAN0TMPTRp[49] = &RSCAN0TMPTR49;
m_RSCAN0TMPTRp[50] = &RSCAN0TMPTR50;
m_RSCAN0TMPTRp[51] = &RSCAN0TMPTR51;
m_RSCAN0TMPTRp[52] = &RSCAN0TMPTR52;
m_RSCAN0TMPTRp[53] = &RSCAN0TMPTR53;
m_RSCAN0TMPTRp[54] = &RSCAN0TMPTR54;
m_RSCAN0TMPTRp[55] = &RSCAN0TMPTR55;
m_RSCAN0TMPTRp[56] = &RSCAN0TMPTR56;
m_RSCAN0TMPTRp[57] = &RSCAN0TMPTR57;
m_RSCAN0TMPTRp[58] = &RSCAN0TMPTR58;
m_RSCAN0TMPTRp[59] = &RSCAN0TMPTR59;
m_RSCAN0TMPTRp[60] = &RSCAN0TMPTR60;
m_RSCAN0TMPTRp[61] = &RSCAN0TMPTR61;
m_RSCAN0TMPTRp[62] = &RSCAN0TMPTR62;
m_RSCAN0TMPTRp[63] = &RSCAN0TMPTR63;

m_RSCAN0TMDF0p[0] = &RSCAN0TMDF00;
m_RSCAN0TMDF0p[1] = &RSCAN0TMDF01;
m_RSCAN0TMDF0p[2] = &RSCAN0TMDF02;
m_RSCAN0TMDF0p[3] = &RSCAN0TMDF03;
m_RSCAN0TMDF0p[4] = &RSCAN0TMDF04;
m_RSCAN0TMDF0p[5] = &RSCAN0TMDF05;
m_RSCAN0TMDF0p[6] = &RSCAN0TMDF06;
m_RSCAN0TMDF0p[7] = &RSCAN0TMDF07;
m_RSCAN0TMDF0p[8] = &RSCAN0TMDF08;
m_RSCAN0TMDF0p[9] = &RSCAN0TMDF09;
m_RSCAN0TMDF0p[10] = &RSCAN0TMDF010;
m_RSCAN0TMDF0p[11] = &RSCAN0TMDF011;
m_RSCAN0TMDF0p[12] = &RSCAN0TMDF012;
m_RSCAN0TMDF0p[13] = &RSCAN0TMDF013;
m_RSCAN0TMDF0p[14] = &RSCAN0TMDF014;
m_RSCAN0TMDF0p[15] = &RSCAN0TMDF015;
m_RSCAN0TMDF0p[16] = &RSCAN0TMDF016;
m_RSCAN0TMDF0p[17] = &RSCAN0TMDF017;
m_RSCAN0TMDF0p[18] = &RSCAN0TMDF018;
m_RSCAN0TMDF0p[19] = &RSCAN0TMDF019;
m_RSCAN0TMDF0p[20] = &RSCAN0TMDF020;
m_RSCAN0TMDF0p[21] = &RSCAN0TMDF021;
m_RSCAN0TMDF0p[22] = &RSCAN0TMDF022;
m_RSCAN0TMDF0p[23] = &RSCAN0TMDF023;
m_RSCAN0TMDF0p[24] = &RSCAN0TMDF024;
m_RSCAN0TMDF0p[25] = &RSCAN0TMDF025;
m_RSCAN0TMDF0p[26] = &RSCAN0TMDF026;
m_RSCAN0TMDF0p[27] = &RSCAN0TMDF027;
m_RSCAN0TMDF0p[28] = &RSCAN0TMDF028;
m_RSCAN0TMDF0p[29] = &RSCAN0TMDF029;
m_RSCAN0TMDF0p[30] = &RSCAN0TMDF030;
m_RSCAN0TMDF0p[31] = &RSCAN0TMDF031;
m_RSCAN0TMDF0p[32] = &RSCAN0TMDF032;
m_RSCAN0TMDF0p[33] = &RSCAN0TMDF033;
m_RSCAN0TMDF0p[34] = &RSCAN0TMDF034;
m_RSCAN0TMDF0p[35] = &RSCAN0TMDF035;
m_RSCAN0TMDF0p[36] = &RSCAN0TMDF036;
m_RSCAN0TMDF0p[37] = &RSCAN0TMDF037;
m_RSCAN0TMDF0p[38] = &RSCAN0TMDF038;
m_RSCAN0TMDF0p[39] = &RSCAN0TMDF039;
m_RSCAN0TMDF0p[40] = &RSCAN0TMDF040;
m_RSCAN0TMDF0p[41] = &RSCAN0TMDF041;
m_RSCAN0TMDF0p[42] = &RSCAN0TMDF042;
m_RSCAN0TMDF0p[43] = &RSCAN0TMDF043;
m_RSCAN0TMDF0p[44] = &RSCAN0TMDF044;
m_RSCAN0TMDF0p[45] = &RSCAN0TMDF045;
m_RSCAN0TMDF0p[46] = &RSCAN0TMDF046;
m_RSCAN0TMDF0p[47] = &RSCAN0TMDF047;
m_RSCAN0TMDF0p[48] = &RSCAN0TMDF048;
m_RSCAN0TMDF0p[49] = &RSCAN0TMDF049;
m_RSCAN0TMDF0p[50] = &RSCAN0TMDF050;
m_RSCAN0TMDF0p[51] = &RSCAN0TMDF051;
m_RSCAN0TMDF0p[52] = &RSCAN0TMDF052;
m_RSCAN0TMDF0p[53] = &RSCAN0TMDF053;
m_RSCAN0TMDF0p[54] = &RSCAN0TMDF054;
m_RSCAN0TMDF0p[55] = &RSCAN0TMDF055;
m_RSCAN0TMDF0p[56] = &RSCAN0TMDF056;
m_RSCAN0TMDF0p[57] = &RSCAN0TMDF057;
m_RSCAN0TMDF0p[58] = &RSCAN0TMDF058;
m_RSCAN0TMDF0p[59] = &RSCAN0TMDF059;
m_RSCAN0TMDF0p[60] = &RSCAN0TMDF060;
m_RSCAN0TMDF0p[61] = &RSCAN0TMDF061;
m_RSCAN0TMDF0p[62] = &RSCAN0TMDF062;
m_RSCAN0TMDF0p[63] = &RSCAN0TMDF063;

m_RSCAN0TMDF1p[0] = &RSCAN0TMDF10;
m_RSCAN0TMDF1p[1] = &RSCAN0TMDF11;
m_RSCAN0TMDF1p[2] = &RSCAN0TMDF12;
m_RSCAN0TMDF1p[3] = &RSCAN0TMDF13;
m_RSCAN0TMDF1p[4] = &RSCAN0TMDF14;
m_RSCAN0TMDF1p[5] = &RSCAN0TMDF15;
m_RSCAN0TMDF1p[6] = &RSCAN0TMDF16;
m_RSCAN0TMDF1p[7] = &RSCAN0TMDF17;
m_RSCAN0TMDF1p[8] = &RSCAN0TMDF18;
m_RSCAN0TMDF1p[9] = &RSCAN0TMDF19;
m_RSCAN0TMDF1p[10] = &RSCAN0TMDF110;
m_RSCAN0TMDF1p[11] = &RSCAN0TMDF111;
m_RSCAN0TMDF1p[12] = &RSCAN0TMDF112;
m_RSCAN0TMDF1p[13] = &RSCAN0TMDF113;
m_RSCAN0TMDF1p[14] = &RSCAN0TMDF114;
m_RSCAN0TMDF1p[15] = &RSCAN0TMDF115;
m_RSCAN0TMDF1p[16] = &RSCAN0TMDF116;
m_RSCAN0TMDF1p[17] = &RSCAN0TMDF117;
m_RSCAN0TMDF1p[18] = &RSCAN0TMDF118;
m_RSCAN0TMDF1p[19] = &RSCAN0TMDF119;
m_RSCAN0TMDF1p[20] = &RSCAN0TMDF120;
m_RSCAN0TMDF1p[21] = &RSCAN0TMDF121;
m_RSCAN0TMDF1p[22] = &RSCAN0TMDF122;
m_RSCAN0TMDF1p[23] = &RSCAN0TMDF123;
m_RSCAN0TMDF1p[24] = &RSCAN0TMDF124;
m_RSCAN0TMDF1p[25] = &RSCAN0TMDF125;
m_RSCAN0TMDF1p[26] = &RSCAN0TMDF126;
m_RSCAN0TMDF1p[27] = &RSCAN0TMDF127;
m_RSCAN0TMDF1p[28] = &RSCAN0TMDF128;
m_RSCAN0TMDF1p[29] = &RSCAN0TMDF129;
m_RSCAN0TMDF1p[30] = &RSCAN0TMDF130;
m_RSCAN0TMDF1p[31] = &RSCAN0TMDF131;
m_RSCAN0TMDF1p[32] = &RSCAN0TMDF132;
m_RSCAN0TMDF1p[33] = &RSCAN0TMDF133;
m_RSCAN0TMDF1p[34] = &RSCAN0TMDF134;
m_RSCAN0TMDF1p[35] = &RSCAN0TMDF135;
m_RSCAN0TMDF1p[36] = &RSCAN0TMDF136;
m_RSCAN0TMDF1p[37] = &RSCAN0TMDF137;
m_RSCAN0TMDF1p[38] = &RSCAN0TMDF138;
m_RSCAN0TMDF1p[39] = &RSCAN0TMDF139;
m_RSCAN0TMDF1p[40] = &RSCAN0TMDF140;
m_RSCAN0TMDF1p[41] = &RSCAN0TMDF141;
m_RSCAN0TMDF1p[42] = &RSCAN0TMDF142;
m_RSCAN0TMDF1p[43] = &RSCAN0TMDF143;
m_RSCAN0TMDF1p[44] = &RSCAN0TMDF144;
m_RSCAN0TMDF1p[45] = &RSCAN0TMDF145;
m_RSCAN0TMDF1p[46] = &RSCAN0TMDF146;
m_RSCAN0TMDF1p[47] = &RSCAN0TMDF147;
m_RSCAN0TMDF1p[48] = &RSCAN0TMDF148;
m_RSCAN0TMDF1p[49] = &RSCAN0TMDF149;
m_RSCAN0TMDF1p[50] = &RSCAN0TMDF150;
m_RSCAN0TMDF1p[51] = &RSCAN0TMDF151;
m_RSCAN0TMDF1p[52] = &RSCAN0TMDF152;
m_RSCAN0TMDF1p[53] = &RSCAN0TMDF153;
m_RSCAN0TMDF1p[54] = &RSCAN0TMDF154;
m_RSCAN0TMDF1p[55] = &RSCAN0TMDF155;
m_RSCAN0TMDF1p[56] = &RSCAN0TMDF156;
m_RSCAN0TMDF1p[57] = &RSCAN0TMDF157;
m_RSCAN0TMDF1p[58] = &RSCAN0TMDF158;
m_RSCAN0TMDF1p[59] = &RSCAN0TMDF159;
m_RSCAN0TMDF1p[60] = &RSCAN0TMDF160;
m_RSCAN0TMDF1p[61] = &RSCAN0TMDF161;
m_RSCAN0TMDF1p[62] = &RSCAN0TMDF162;
m_RSCAN0TMDF1p[63] = &RSCAN0TMDF163;
/////////////////////////////////////////////////////////////////////////////
m_RSCAN0THLACCm[0] = &RSCAN0THLACC0;
m_RSCAN0THLACCm[1] = &RSCAN0THLACC1;
m_RSCAN0THLACCm[2] = &RSCAN0THLACC2;
m_RSCAN0THLACCm[3] = &RSCAN0THLACC3;
/////////////////////////////////////////////////////////////////////////////
m_RSCAN0RPGACCr[0] = &RSCAN0RPGACC0;
m_RSCAN0RPGACCr[1] = &RSCAN0RPGACC1;
m_RSCAN0RPGACCr[2] = &RSCAN0RPGACC2;
m_RSCAN0RPGACCr[3] = &RSCAN0RPGACC3;
m_RSCAN0RPGACCr[4] = &RSCAN0RPGACC4;
m_RSCAN0RPGACCr[5] = &RSCAN0RPGACC5;
m_RSCAN0RPGACCr[6] = &RSCAN0RPGACC6;
m_RSCAN0RPGACCr[7] = &RSCAN0RPGACC7;
m_RSCAN0RPGACCr[8] = &RSCAN0RPGACC8;
m_RSCAN0RPGACCr[9] = &RSCAN0RPGACC9;
m_RSCAN0RPGACCr[10] = &RSCAN0RPGACC10;
m_RSCAN0RPGACCr[11] = &RSCAN0RPGACC11;
m_RSCAN0RPGACCr[12] = &RSCAN0RPGACC12;
m_RSCAN0RPGACCr[13] = &RSCAN0RPGACC13;
m_RSCAN0RPGACCr[14] = &RSCAN0RPGACC14;
m_RSCAN0RPGACCr[15] = &RSCAN0RPGACC15;
m_RSCAN0RPGACCr[16] = &RSCAN0RPGACC16;
m_RSCAN0RPGACCr[17] = &RSCAN0RPGACC17;
m_RSCAN0RPGACCr[18] = &RSCAN0RPGACC18;
m_RSCAN0RPGACCr[19] = &RSCAN0RPGACC19;
m_RSCAN0RPGACCr[20] = &RSCAN0RPGACC20;
m_RSCAN0RPGACCr[21] = &RSCAN0RPGACC21;
m_RSCAN0RPGACCr[22] = &RSCAN0RPGACC22;
m_RSCAN0RPGACCr[23] = &RSCAN0RPGACC23;
m_RSCAN0RPGACCr[24] = &RSCAN0RPGACC24;
m_RSCAN0RPGACCr[25] = &RSCAN0RPGACC25;
m_RSCAN0RPGACCr[26] = &RSCAN0RPGACC26;
m_RSCAN0RPGACCr[27] = &RSCAN0RPGACC27;
m_RSCAN0RPGACCr[28] = &RSCAN0RPGACC28;
m_RSCAN0RPGACCr[29] = &RSCAN0RPGACC29;
m_RSCAN0RPGACCr[30] = &RSCAN0RPGACC30;
m_RSCAN0RPGACCr[31] = &RSCAN0RPGACC31;
m_RSCAN0RPGACCr[32] = &RSCAN0RPGACC32;
m_RSCAN0RPGACCr[33] = &RSCAN0RPGACC33;
m_RSCAN0RPGACCr[34] = &RSCAN0RPGACC34;
m_RSCAN0RPGACCr[35] = &RSCAN0RPGACC35;
m_RSCAN0RPGACCr[36] = &RSCAN0RPGACC36;
m_RSCAN0RPGACCr[37] = &RSCAN0RPGACC37;
m_RSCAN0RPGACCr[38] = &RSCAN0RPGACC38;
m_RSCAN0RPGACCr[39] = &RSCAN0RPGACC39;
m_RSCAN0RPGACCr[40] = &RSCAN0RPGACC40;
m_RSCAN0RPGACCr[41] = &RSCAN0RPGACC41;
m_RSCAN0RPGACCr[42] = &RSCAN0RPGACC42;
m_RSCAN0RPGACCr[43] = &RSCAN0RPGACC43;
m_RSCAN0RPGACCr[44] = &RSCAN0RPGACC44;
m_RSCAN0RPGACCr[45] = &RSCAN0RPGACC45;
m_RSCAN0RPGACCr[46] = &RSCAN0RPGACC46;
m_RSCAN0RPGACCr[47] = &RSCAN0RPGACC47;
m_RSCAN0RPGACCr[48] = &RSCAN0RPGACC48;
m_RSCAN0RPGACCr[49] = &RSCAN0RPGACC49;
m_RSCAN0RPGACCr[50] = &RSCAN0RPGACC50;
m_RSCAN0RPGACCr[51] = &RSCAN0RPGACC51;
m_RSCAN0RPGACCr[52] = &RSCAN0RPGACC52;
m_RSCAN0RPGACCr[53] = &RSCAN0RPGACC53;
m_RSCAN0RPGACCr[54] = &RSCAN0RPGACC54;
m_RSCAN0RPGACCr[55] = &RSCAN0RPGACC55;
m_RSCAN0RPGACCr[56] = &RSCAN0RPGACC56;
m_RSCAN0RPGACCr[57] = &RSCAN0RPGACC57;
m_RSCAN0RPGACCr[58] = &RSCAN0RPGACC58;
m_RSCAN0RPGACCr[59] = &RSCAN0RPGACC59;
m_RSCAN0RPGACCr[60] = &RSCAN0RPGACC60;
m_RSCAN0RPGACCr[61] = &RSCAN0RPGACC61;
m_RSCAN0RPGACCr[62] = &RSCAN0RPGACC62;
m_RSCAN0RPGACCr[63] = &RSCAN0RPGACC63;

}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


