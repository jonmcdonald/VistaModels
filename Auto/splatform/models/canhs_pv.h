
/**************************************************************/
/*                                                            */
/*      Copyright Mentor Graphics Corporation 2006 - 2012     */
/*                  All Rights Reserved                       */
/*                                                            */
/*       THIS WORK CONTAINS TRADE SECRET AND PROPRIETARY      */
/*         INFORMATION WHICH IS THE PROPERTY OF MENTOR        */
/*         GRAPHICS CORPORATION OR ITS LICENSORS AND IS       */
/*                 SUBJECT TO LICENSE TERMS.                  */
/*                                                            */
/**************************************************************/

//*<
//* Generated By Model Builder, Mentor Graphics Computer Systems, Inc.
//*
//* This file contains the PV class for canhs.
//* This is a template file: You may modify this file to implement the 
//* behavior of your component. 
//* 
//* Model Builder version: 3.9.0
//* Generated on: Apr. 01, 2015 08:18:18 AM, (user: jon)
//*>


#pragma once

#include "canhs_model.h"

using namespace tlm;

//This class inherits from the canhs_pv_base class
class canhs_pv : public canhs_pv_base {
 public:
  typedef esl::tlm_types::Address mb_address_type;
 public:
  // Constructor
  // Do not add parameters here.
  // To add parameters - use the Model Builder form (under PV->Parameters tab)
  SC_HAS_PROCESS(canhs_pv);
  canhs_pv(sc_core::sc_module_name module_name);   

  void thread();
  void thread_emu();
  void thread_sa();
  void thread_rbl();
  void thread_c();
  void thread_abs();


 protected:
  ////////////////////////////////////////
  // target ports read callbacks
  //////////////////////////////////////// 
  bool sa_tx_callback_read(mb_address_type address, unsigned char* data, unsigned size);
  
  unsigned sa_tx_callback_read_dbg(mb_address_type address, unsigned char* data, unsigned size);
  bool c_tx_callback_read(mb_address_type address, unsigned char* data, unsigned size);
  
  unsigned c_tx_callback_read_dbg(mb_address_type address, unsigned char* data, unsigned size);
  bool rbl_tx_callback_read(mb_address_type address, unsigned char* data, unsigned size);
  
  unsigned rbl_tx_callback_read_dbg(mb_address_type address, unsigned char* data, unsigned size);
  bool abs_tx_callback_read(mb_address_type address, unsigned char* data, unsigned size);
  
  unsigned abs_tx_callback_read_dbg(mb_address_type address, unsigned char* data, unsigned size);
  bool emu_tx_callback_read(mb_address_type address, unsigned char* data, unsigned size);
  
  unsigned emu_tx_callback_read_dbg(mb_address_type address, unsigned char* data, unsigned size); 

 protected:
  ////////////////////////////////////////
  // target ports write callbacks
  //////////////////////////////////////// 
  bool sa_tx_callback_write(mb_address_type address, unsigned char* data, unsigned size);
  
  unsigned sa_tx_callback_write_dbg(mb_address_type address, unsigned char* data, unsigned size);
  bool c_tx_callback_write(mb_address_type address, unsigned char* data, unsigned size);
  
  unsigned c_tx_callback_write_dbg(mb_address_type address, unsigned char* data, unsigned size);
  bool rbl_tx_callback_write(mb_address_type address, unsigned char* data, unsigned size);
  
  unsigned rbl_tx_callback_write_dbg(mb_address_type address, unsigned char* data, unsigned size);
  bool abs_tx_callback_write(mb_address_type address, unsigned char* data, unsigned size);
  
  unsigned abs_tx_callback_write_dbg(mb_address_type address, unsigned char* data, unsigned size);
  bool emu_tx_callback_write(mb_address_type address, unsigned char* data, unsigned size);
  
  unsigned emu_tx_callback_write_dbg(mb_address_type address, unsigned char* data, unsigned size);  
  bool sa_tx_get_direct_memory_ptr(mb_address_type address, tlm::tlm_dmi& dmiData);  
  bool c_tx_get_direct_memory_ptr(mb_address_type address, tlm::tlm_dmi& dmiData);  
  bool rbl_tx_get_direct_memory_ptr(mb_address_type address, tlm::tlm_dmi& dmiData);  
  bool abs_tx_get_direct_memory_ptr(mb_address_type address, tlm::tlm_dmi& dmiData);  
  bool emu_tx_get_direct_memory_ptr(mb_address_type address, tlm::tlm_dmi& dmiData);   

 private:
  class DataType {
    public:
    unsigned int m_ident;
    unsigned int m_length;
    unsigned int m_crc;
    unsigned int m_size;
    mb::mb_token_ptr m_tokenptr;
    unsigned char * m_data;

      DataType() {}

      DataType(mb_address_type address, unsigned size, mb::mb_token_ptr tokenptr)
        : m_ident(address), m_size(size)
      {
        m_tokenptr = tokenptr;
        if (m_tokenptr && m_tokenptr->hasField("DataPtr")) {
          m_data = (unsigned char *) m_tokenptr->getFieldAsVoidPtr("DataPtr");
        } else {
          cout << "Error: canls_pv.h DataType constructor.\n";
        }
      }

      bool operator() (const DataType* lhs, const DataType* rhs) const {
        return lhs->m_ident < rhs->m_ident; }
  };

  tlm_fifo<int> iff;
  mb::mb_fifo<DataType*> emuff;
  mb::mb_fifo<DataType*> rblff;
  mb::mb_fifo<DataType*> cff;
  mb::mb_fifo<DataType*> absff;
  mb::mb_fifo<DataType*> saff;
  priority_queue<DataType*, vector<DataType*>, DataType> pq;
};
