
/**************************************************************/
/*                                                            */
/*      Copyright Mentor Graphics Corporation 2006 - 2012     */
/*                  All Rights Reserved                       */
/*                                                            */
/*       THIS WORK CONTAINS TRADE SECRET AND PROPRIETARY      */
/*         INFORMATION WHICH IS THE PROPERTY OF MENTOR        */
/*         GRAPHICS CORPORATION OR ITS LICENSORS AND IS       */
/*                 SUBJECT TO LICENSE TERMS.                  */
/*                                                            */
/**************************************************************/

//*<
//* Generated By Model Builder, Mentor Graphics Computer Systems, Inc.
//*
//* This file contains the PV class for canhs.
//* This is a template file: You may modify this file to implement the 
//* behavior of your component. 
//* 
//* Model Builder version: 3.9.0
//* Generated on: Apr. 01, 2015 08:18:18 AM, (user: jon)
//*>



#include "canhs_pv.h"
#include <iostream>

using namespace sc_core;
using namespace sc_dt;
using namespace std;

//constructor
canhs_pv::canhs_pv(sc_module_name module_name) 
  : canhs_pv_base(module_name) {
}    

// Read callback for sa_tx port.
// Returns true when successful.
bool canhs_pv::sa_tx_callback_read(mb_address_type address, unsigned char* data, unsigned size) {
  
  return true;
}


// Read callback for c_tx port.
// Returns true when successful.
bool canhs_pv::c_tx_callback_read(mb_address_type address, unsigned char* data, unsigned size) {
  
  return true;
}


// Read callback for rbl_tx port.
// Returns true when successful.
bool canhs_pv::rbl_tx_callback_read(mb_address_type address, unsigned char* data, unsigned size) {
  
  return true;
}


// Read callback for abs_tx port.
// Returns true when successful.
bool canhs_pv::abs_tx_callback_read(mb_address_type address, unsigned char* data, unsigned size) {
  
  return true;
}


// Read callback for emu_tx port.
// Returns true when successful.
bool canhs_pv::emu_tx_callback_read(mb_address_type address, unsigned char* data, unsigned size) {
  
  return true;
}

// Write callback for sa_tx port.
// Returns true when successful.
bool canhs_pv::sa_tx_callback_write(mb_address_type address, unsigned char* data, unsigned size) {
  
  return true;
} 

// Write callback for c_tx port.
// Returns true when successful.
bool canhs_pv::c_tx_callback_write(mb_address_type address, unsigned char* data, unsigned size) {
  
  return true;
} 

// Write callback for rbl_tx port.
// Returns true when successful.
bool canhs_pv::rbl_tx_callback_write(mb_address_type address, unsigned char* data, unsigned size) {
  
  return true;
} 

// Write callback for abs_tx port.
// Returns true when successful.
bool canhs_pv::abs_tx_callback_write(mb_address_type address, unsigned char* data, unsigned size) {
  
  return true;
} 

// Write callback for emu_tx port.
// Returns true when successful.
bool canhs_pv::emu_tx_callback_write(mb_address_type address, unsigned char* data, unsigned size) {
  
  return true;
} 




unsigned canhs_pv::sa_tx_callback_read_dbg(mb_address_type address, unsigned char* data, unsigned size) {
  return 0;
} 

unsigned canhs_pv::sa_tx_callback_write_dbg(mb_address_type address, unsigned char* data, unsigned size) {
  return 0;
} 

bool canhs_pv::sa_tx_get_direct_memory_ptr(mb_address_type address, tlm::tlm_dmi& dmiData) {
  return false;
}





unsigned canhs_pv::c_tx_callback_read_dbg(mb_address_type address, unsigned char* data, unsigned size) {
  return 0;
} 

unsigned canhs_pv::c_tx_callback_write_dbg(mb_address_type address, unsigned char* data, unsigned size) {
  return 0;
} 

bool canhs_pv::c_tx_get_direct_memory_ptr(mb_address_type address, tlm::tlm_dmi& dmiData) {
  return false;
}





unsigned canhs_pv::rbl_tx_callback_read_dbg(mb_address_type address, unsigned char* data, unsigned size) {
  return 0;
} 

unsigned canhs_pv::rbl_tx_callback_write_dbg(mb_address_type address, unsigned char* data, unsigned size) {
  return 0;
} 

bool canhs_pv::rbl_tx_get_direct_memory_ptr(mb_address_type address, tlm::tlm_dmi& dmiData) {
  return false;
}





unsigned canhs_pv::abs_tx_callback_read_dbg(mb_address_type address, unsigned char* data, unsigned size) {
  return 0;
} 

unsigned canhs_pv::abs_tx_callback_write_dbg(mb_address_type address, unsigned char* data, unsigned size) {
  return 0;
} 

bool canhs_pv::abs_tx_get_direct_memory_ptr(mb_address_type address, tlm::tlm_dmi& dmiData) {
  return false;
}





unsigned canhs_pv::emu_tx_callback_read_dbg(mb_address_type address, unsigned char* data, unsigned size) {
  return 0;
} 

unsigned canhs_pv::emu_tx_callback_write_dbg(mb_address_type address, unsigned char* data, unsigned size) {
  return 0;
} 

bool canhs_pv::emu_tx_get_direct_memory_ptr(mb_address_type address, tlm::tlm_dmi& dmiData) {
  return false;
}

 
