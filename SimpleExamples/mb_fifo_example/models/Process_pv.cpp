
/**************************************************************/
/*                                                            */
/*      Copyright Mentor Graphics Corporation 2006 - 2015     */
/*                  All Rights Reserved                       */
/*                                                            */
/*       THIS WORK CONTAINS TRADE SECRET AND PROPRIETARY      */
/*         INFORMATION WHICH IS THE PROPERTY OF MENTOR        */
/*         GRAPHICS CORPORATION OR ITS LICENSORS AND IS       */
/*                 SUBJECT TO LICENSE TERMS.                  */
/*                                                            */
/**************************************************************/

//*<
//* Generated By Model Builder, Mentor Graphics Computer Systems, Inc.
//*
//* This file contains the PV class for Process.
//* This is a template file: You may modify this file to implement the 
//* behavior of your component. 
//* 
//* Model Builder version: 4.2.1
//* Generated on: Nov. 01, 2016 10:04:38 AM, (user: markca)
//*>



#include "Process_pv.h"
#include <iostream>
#include <bitset>

using namespace sc_core;
using namespace sc_dt;
using namespace std;

//constructor
Process_pv::Process_pv(sc_module_name module_name) 
  : Process_pv_base(module_name) {

  fifo.set_minimal_delay(fifo_delay);
  fifo.nb_bound(fifo_bound);

  SC_THREAD(thread);
}      

// Read callback for slave port.
// Returns true when successful.
bool Process_pv::slave_callback_read(mb_address_type address, unsigned char* data, unsigned size) {
  return true;
}

// Write callback for slave port.
// Returns true when successful.
bool Process_pv::slave_callback_write(mb_address_type address, unsigned char* data, unsigned size) {
  unsigned int value = (unsigned int) *data;
  fifo.put(value);
  cout << "                        " << "PRO @ " << sc_time_stamp() << " FIFO PUT " << hex << value << endl;
  return true;
} 


unsigned Process_pv::slave_callback_read_dbg(mb_address_type address, unsigned char* data, unsigned size) {
  return 0;
} 

unsigned Process_pv::slave_callback_write_dbg(mb_address_type address, unsigned char* data, unsigned size) {
  return 0;
} 

bool Process_pv::slave_get_direct_memory_ptr(mb_address_type address, tlm::tlm_dmi& dmiData) {
  return false;
}

 

// in order to minimize merging conflicts, we recommend to add your functions after this comment

void Process_pv::thread() {
  unsigned int value;
  while(1) {
    value = fifo.peek();
    cout << "                        " << "PRO @ " << sc_time_stamp() << " WRITE " << hex << value << endl;
    master_write(0x0, &value, 1);
    fifo.get();
  }
}
