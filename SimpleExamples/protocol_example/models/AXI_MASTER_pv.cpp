
/**************************************************************/
/*                                                            */
/*      Copyright Mentor Graphics Corporation 2006 - 2015     */
/*                  All Rights Reserved                       */
/*                                                            */
/*       THIS WORK CONTAINS TRADE SECRET AND PROPRIETARY      */
/*         INFORMATION WHICH IS THE PROPERTY OF MENTOR        */
/*         GRAPHICS CORPORATION OR ITS LICENSORS AND IS       */
/*                 SUBJECT TO LICENSE TERMS.                  */
/*                                                            */
/**************************************************************/

//*<
//* Generated By Model Builder, Mentor Graphics Computer Systems, Inc.
//*
//* This file contains the PV class for AXI_MASTER.
//* This is a template file: You may modify this file to implement the 
//* behavior of your component. 
//* 
//* Model Builder version: 4.2.2beta
//* Generated on: Nov. 24, 2016 04:47:02 PM, (user: markca)
//*>



#include "AXI_MASTER_pv.h"
#include <iostream>
#include <bitset>

using namespace sc_core;
using namespace sc_dt;
using namespace std;

//constructor
AXI_MASTER_pv::AXI_MASTER_pv(sc_module_name module_name) 
  : AXI_MASTER_pv_base(module_name) {

  rFifo.set_minimal_delay(sc_time(2, SC_NS));
  wFifo.set_minimal_delay(sc_time(2, SC_NS));

  SC_THREAD(thread_w1);
  SC_THREAD(thread_r1);
} 

// Read callback for input port.
// Returns true when successful.
bool AXI_MASTER_pv::input_callback_read(mb_address_type address, unsigned char* data, unsigned size) {
  cout << name() << " @ " << sc_time_stamp() << " READ from address = " << address << endl;  
  return true;
}

// Write callback for input port.
// Returns true when successful.
bool AXI_MASTER_pv::input_callback_write(mb_address_type address, unsigned char* data, unsigned size) {
  std::string binary = std::bitset<32>((unsigned int) *data).to_string(); //to binary
  unsigned int val = (unsigned int) *data;
  cout << name() << " @ " << sc_time_stamp() << " WRITE to address " << address << " data = " << hex << val << " , " << binary << endl;

  for(uint8_t i = 0; i < NUM_OPS; i++) {
    wFifo.put(i);
    rFifo.put(i);
  }

  return true;
} 




unsigned AXI_MASTER_pv::input_callback_read_dbg(mb_address_type address, unsigned char* data, unsigned size) {
  return 0;
} 

unsigned AXI_MASTER_pv::input_callback_write_dbg(mb_address_type address, unsigned char* data, unsigned size) {
  return 0;
} 

bool AXI_MASTER_pv::input_get_direct_memory_ptr(mb_address_type address, tlm::tlm_dmi& dmiData) {
  return false;
}



// This thread can be used to generate outgoing transactions
void AXI_MASTER_pv::thread_w1() { 
  uint8_t* data = (uint8_t*) malloc(LEN_WRITE * sizeof(uint8_t));
  while(1) {
    uint8_t v = wFifo.peek(); // block/wait until start bit is written
    for(uint32_t i = 0; i < LEN_WRITE; i++) {
      data[i] = v;
    }   
    master_write(0x0, data, LEN_WRITE);
    wFifo.get();  // release Fifo, Done.
  }
  free(data);
}

void AXI_MASTER_pv::thread_r1() { 
  uint8_t* data = (uint8_t*) malloc(LEN_READ * sizeof(uint8_t));
  while(1) {
    rFifo.peek(); // block/wait until start bit is written
    master_read(0x0, data, LEN_READ);
    rFifo.get();  // release Fifo, Done.
  }
  free(data);
}

