
/**************************************************************/
/*                                                            */
/*      Copyright Mentor Graphics Corporation 2006 - 2015     */
/*                  All Rights Reserved                       */
/*                                                            */
/*       THIS WORK CONTAINS TRADE SECRET AND PROPRIETARY      */
/*         INFORMATION WHICH IS THE PROPERTY OF MENTOR        */
/*         GRAPHICS CORPORATION OR ITS LICENSORS AND IS       */
/*                 SUBJECT TO LICENSE TERMS.                  */
/*                                                            */
/**************************************************************/

//*<
//* Generated By Model Builder, Mentor Graphics Computer Systems, Inc.
//*
//* This file contains the PV class for AbstractCPU.
//* This is a template file: You may modify this file to implement the 
//* behavior of your component. 
//* 
//* Model Builder version: 4.2.1
//* Generated on: Nov. 21, 2016 12:13:48 PM, (user: markca)
//*>


#include "AbstractCPU_pv.h"
#include <iostream>

//constructor
AbstractCPU_pv::AbstractCPU_pv(sc_module_name module_name) 
  : AbstractCPU_pv_base(module_name) {
   SC_THREAD(thread);
} 

// This thread can be used to generate outgoing transactions
void AbstractCPU_pv::thread() {

  unsigned int value = 0x1;
  
  cout << name() << " @ " << sc_time_stamp() << " WRITING: " << hex << value << " to 0x1000" << endl;
  cpu_master_write(0x1000, &value, 1);
  wait(10, SC_NS);
  value++;
  cout << name() << " @ " << sc_time_stamp() << " WRITING: " << hex << value << " to 0x2000" << endl;
  cpu_master_write(0x2000, &value, 1);
  wait(10, SC_NS);
  value++;
  cout << name() << " @ " << sc_time_stamp() << " WRITING: " << hex << value << " to 0x3000" << endl;
  cpu_master_write(0x3000, &value, 1);
  wait(10, SC_NS);
  value++;  
  cout << name() << " @ " << sc_time_stamp() << " WRITING: " << hex << value << " to 0xA000 " << endl;
  cpu_master_write(0xA000, &value, 1);
  wait(10, SC_NS);
  value++;  
  cout << name() << " @ " << sc_time_stamp() << " WRITING: " << hex << value << " to 0xB000 " << endl;
  cpu_master_write(0xB000, &value, 1);
  wait(10, SC_NS);
  value++;  
  cout << name() << " @ " << sc_time_stamp() << " WRITING: " << hex << value << " to 0xC000 " << endl;
  cpu_master_write(0xC000, &value, 1);
}   

