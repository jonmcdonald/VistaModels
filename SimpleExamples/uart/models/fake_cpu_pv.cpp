
/**************************************************************/
/*                                                            */
/*      Copyright Mentor Graphics Corporation 2006 - 2012     */
/*                  All Rights Reserved                       */
/*                                                            */
/*       THIS WORK CONTAINS TRADE SECRET AND PROPRIETARY      */
/*         INFORMATION WHICH IS THE PROPERTY OF MENTOR        */
/*         GRAPHICS CORPORATION OR ITS LICENSORS AND IS       */
/*                 SUBJECT TO LICENSE TERMS.                  */
/*                                                            */
/**************************************************************/

//*<
//* Generated By Model Builder, Mentor Graphics Computer Systems, Inc.
//*
//* This file contains the PV class for fake_cpu.
//* This is a template file: You may modify this file to implement the 
//* behavior of your component. 
//* 
//* Model Builder version: 3.5.0
//* Generated on: Dec. 17, 2012 03:07:02 PM, (user: markca)
//*>


#include "fake_cpu_pv.h"
#include <iostream>

#include <stdint.h>

typedef volatile struct {
 uint32_t DR;
 uint32_t RSR_ECR;
 uint8_t reserved1[0x10];
 const uint32_t FR;
 uint8_t reserved2[0x4];
 uint32_t LPR;
 uint32_t IBRD;
 uint32_t FBRD;
 uint32_t LCR_H;
 uint32_t CR;
 uint32_t IFLS;
 uint32_t IMSC;
 const uint32_t RIS;
 const uint32_t MIS;
 uint32_t ICR;
 uint32_t DMACR;
} pl011_T;

enum {
 RXFE = 0x10,
 TXFF = 0x20,
};

const int UART0 = 0x4000C000;

void
fake_cpu_pv::print_UART0(char *ptr)
{
  // Enable the UART for transmit and recieve
  unsigned int d = 0x301;
  cpu_master_write(UART0 + offsetof(pl011_T, CR), d);

  while (*ptr != '\0') {
    unsigned int t = 0;
    do {
      cpu_master_read(UART0 + offsetof(pl011_T, FR), &d, 1);
    } while(d & TXFF);

    cpu_master_write(UART0 + offsetof(pl011_T, DR), *ptr++);
  }
}


//constructor
fake_cpu_pv::fake_cpu_pv(sc_module_name module_name) 
  : fake_cpu_pv_base(module_name) {
   SC_THREAD(thread);
} 

// This thread can be used to generate outgoing transactions
void fake_cpu_pv::thread() {
  print_UART0("Welcome\n");
  print_UART0("to\n");
  print_UART0("Vista\r\n");
  print_UART0("Hello World\r\n");
}   

