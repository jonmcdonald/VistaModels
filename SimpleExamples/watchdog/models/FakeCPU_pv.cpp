
/**************************************************************/
/*                                                            */
/*      Copyright Mentor Graphics Corporation 2006 - 2012     */
/*                  All Rights Reserved                       */
/*                                                            */
/*       THIS WORK CONTAINS TRADE SECRET AND PROPRIETARY      */
/*         INFORMATION WHICH IS THE PROPERTY OF MENTOR        */
/*         GRAPHICS CORPORATION OR ITS LICENSORS AND IS       */
/*                 SUBJECT TO LICENSE TERMS.                  */
/*                                                            */
/**************************************************************/

//*<
//* Generated By Model Builder, Mentor Graphics Computer Systems, Inc.
//*
//* This file contains the PV class for FakeCPU.
//* This is a template file: You may modify this file to implement the 
//* behavior of your component. 
//* 
//* Model Builder version: 4.2alpha1
//* Generated on: Feb. 01, 2016 09:46:12 AM, (user: markca)
//* Automatically merged on: Feb. 01, 2016 10:07:19 AM, (user: markca)
//*>


#include "FakeCPU_pv.h"
#include <iostream>

//constructor
FakeCPU_pv::FakeCPU_pv(sc_module_name module_name) 
  : FakeCPU_pv_base(module_name) {
   SC_THREAD(thread);
} 

// This thread can be used to generate outgoing transactions
void FakeCPU_pv::thread() {

  unsigned char data = 0x1;
  cpu_master_write(0x0, data);  // Start WD
  wait(900, SC_MS);             // Wait 500 MS
  cpu_master_write(0x0, data);  // Restart WD
  wait(1100, SC_MS);            // Wait 1100 MS
  cpu_master_write(0x0, data);  // Restart WD
  wait(900, SC_MS);             // Wait 900 MS
  data = 0x0;
  cpu_master_write(0x0, data);  // Stop WD

}   

// callback for any change in signal: int_source of type: sc_in<bool>
void FakeCPU_pv::int_source_callback() {

  if(int_source == true) {
    cout << name() << " @ " << sc_time_stamp() << " : Watchdog interrupt caught" << endl;
  }
}

