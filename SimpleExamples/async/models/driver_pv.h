
/**************************************************************/
/*                                                            */
/*      Copyright Mentor Graphics Corporation 2006 - 2012     */
/*                  All Rights Reserved                       */
/*                                                            */
/*       THIS WORK CONTAINS TRADE SECRET AND PROPRIETARY      */
/*         INFORMATION WHICH IS THE PROPERTY OF MENTOR        */
/*         GRAPHICS CORPORATION OR ITS LICENSORS AND IS       */
/*                 SUBJECT TO LICENSE TERMS.                  */
/*                                                            */
/**************************************************************/

//*<
//* Generated By Model Builder, Mentor Graphics Computer Systems, Inc.
//*
//* This file contains the PV class for driver.
//* This is a template file: You may modify this file to implement the 
//* behavior of your component. 
//* 
//* Model Builder version: 3.7.0
//* Generated on: Oct. 19, 2013 09:49:15 AM, (user: jon)
//*>


#pragma once

#include "driver_model.h"
#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <deque>

// thread_safe_event.h requires SystemC 2.3
#include "thread_safe_event.h"
#include "DataType.h"

using namespace tlm;

//This class inherits from the driver_pv_base class
// This driver_pv module opens a terminal and accpets user input.  The user input will be read, put into
// a DataType datastructure and writen out the y port.  
// Currently the model expects 3 integers on a line to fill the datastructure.  The startReader function
// can be modified to accept different types of data.

class driver_pv : public driver_pv_base {
 public:
  typedef esl::tlm_types::Address mb_address_type;
 public:
  // Constructor
  // Do not add parameters here.
  // To add parameters - use the Model Builder form (under PV->Parameters tab)
  SC_HAS_PROCESS(driver_pv);
  driver_pv(sc_core::sc_module_name module_name);        

  void input();		// SystemC process which waits for asynchronous input from external process
  void output();	// SystemC process which takes data from input and writes out through the tlm port

 private:
  // call_startReader is a wrapper function that allows a member function to be used as pthread argument.
  static void* call_startReader(void *arg) { return ((driver_pv*)arg)->startReader(); }
  void *startReader();	// C++ pthread which will fork and exec the external process then wait for input
                        // from the external process.  It will forward and call notify on safe_ev

  pthread_t readerThread;
  pthread_mutex_t mutex;	// Used to safely pass data from startReader to input processes.
  
  thread_safe_event safe_ev;	// Thread safe event used to notify from startReader to input processes.

  std::deque<DataType *> q;	// queue holding data passed from startReader to input processes
  tlm::tlm_fifo<DataType *> fifo;  // queue holding data passed from input to output processes
};

