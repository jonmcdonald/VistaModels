   This repository will contain Vista Architect model libraries and projects.
To create a new area, make a directory then run vista under that directory.  Any data 
you create should stay under the created directory.  You should be able to point at 
libraries in other directories within this repository as well as make modifications 
to elements in those other directories.
   To get started with git using this repository execute:
> git clone git@github.com:jonmcdonald/VistaModels.git
   Documentation on using git can be found at: http://www.git-scm.com/documentation
   Note you will also have to load an ssh key into github (https://help.github.com/articles/generating-ssh-keys)

A few useful git sequences:

 - To set user name.  Needed to push changes, not to fetch.
   > git config --global user.name "Your Name"
   > git config --global user.email your_name@email.com

 - To add local changes to the repository
   First commit your local changes
   > git add *
   > git commit -a -m "Comment changes"
   # Next fetch latest from repository, merge and push
   > git fetch origin
   > git merge origin/master
   > git push origin master

 - To reset your git area to what is on the server.  This will delete any files you've added.
   > git reset --hard HEAD
   > git clean -f -d
   > git pull
   Note that git clean will accept a path and only clean that path.

 - To add all of your new files and then update from the repository, taking the repository as the correct file.
   You will loose any changes you have made that conflict with what is in the repository.
   First commit your local changes
   > git add *
   > git commit -a -m "Comment for committed file set"
   Next fetch from the repository and overwrite any local conflicts
   > git fetch origin master
   > git merge -s recursive -X theirs origin/master

 - To cause a tracked file which changes local not to be checked in
   > git update-index --assume-unchanged path/to/file.txt
   To cause it to be checked in again
   > git update-index --no-assume-unchanged path/to/file.txt

 - Tentative flow
   Create local branch.  This branch will not be pushed to the server
   > git branch <branch-name>
   Do your work on the branch, commit changes and add files
   > git add <files>
   > git commit -m "Comment message"
   To eliminate files that have been changed locally but not committed.  Such as .mb files that you don't want
   to check in, you can checkout a given directory to overwrite changes. This may be useful before rebasing.
   > git checkout .
   Keep up with any changes on the server by rebasing.  First pull updates from master
   > git checkout master
   > git pull origin master
   Then rebase.  This is done while you are on the <branch-name> you created.  Do this to keep up with master.
   > git checkout <branch-name>
   > git rebase master
   When ready to push changes to repository, first update local master to what is on repository
   > git checkout master
   > git pull origin master
   > git checkout local
   > git rebase master
   Everything is up to date, now do a fast forward merge to move master up to all of the changes on <branch-name>
   > git checkout master
   > git merge local
   Assuming no problems, now push the changes
   > git push origin master


